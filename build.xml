<?xml version="1.0" encoding="UTF-8"?>
<project 
  name="Build file for GNS"
  basedir="."
  default="jar" >

  <property name="src.dir" value="src"/>
  <property name="testsrc.dir" location="test"/>
  <property name="build.dir" value="build"/>
  <property name="build.classes.dir" value="${build.dir}/classes"/>
  <property name="build.test.classes.dir" value="${build.dir}/test/classes"/>
  <property name="test.dir" value="test" />
  <property name="build.test.dir" value="${build.dir}/test"/>
  <property name="build.jar.dir" value="${build.dir}/jars"/>
  <property name="lib.dir" value="lib"/>
  <property name="dist.dir" value="dist"/>
  <property name="jars.dir" value="jars"/>
  <property name="conf.dir" value="conf"/>
  <property name="scripts.dir" value="scripts"/>
    
  <!-- Properties -->
  <property file="build.properties" />
  
  <path id="classpath.base">
    <pathelement location="${build.dir}"/>
    <pathelement location="${build.classes.dir}"/>
    <pathelement location="${conf.dir}"/>
    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <target name="init">
    <tstamp/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes.dir}"/>
  </target>

  <target name="compile" depends="init, buildnumber" description="compile java files">
    <javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="true" debuglevel="lines,vars,source"
           includeantruntime="false">
      <compilerarg value="-Xlint:unchecked"/>
      <classpath refid="classpath.base"/>
    </javac>
  </target>
  
  <target name="server_jarbuild" depends="compile" description="generate jar files">
    <mkdir dir="${build.jar.dir}"/>
    <jar destfile="${build.jar.dir}/gnsserver-${VERSION}-${RELEASE}.jar" filesetmanifest="mergewithoutmain">
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Main-Class" value="edu.umass.cs.gns.httpserver.GnsHttpServer"/>
        <attribute name="Class-Path" value="."/>
        <attribute name="Build-Version" value="${version.code}" />
      </manifest>
      <fileset dir="${build.classes.dir}" 
               includes="**/*.class"
               excludes="edu/umass/cs/gnsclient/**"
      />
      <fileset dir="${conf.dir}" includes="trustStore/**, keystore/**" />
      <fileset dir="${conf.dir}" includes="**" />
      <zipgroupfileset dir="${lib.dir}" 
                       includes="**/*.jar" 
                       excludes="android.jar, hamcrest*.jar, junit*.jar"/>
    </jar>
  </target>
  
  <fileset id="client.includes" dir="${build.classes.dir}"
               includes="**/*.class"/>
<!--           includes="edu/umass/cs/gnsclient/**/*.class,
                     edu/umass/cs/gnscommon/**/*.class,
                     edu/umass/cs/gnsserver/**/*.class, 
                     org/**/*.class"-->
  
  
  <fileset id="client.keystore" dir="${conf.dir}" includes="trustStore/**, keystore/**" />
  
  <!--              gigapaxos below could probably be nio-->
  <zipfileset id="client.lib" dir="${lib.dir}" 
              includes="derby.jar, jline*.jar, commons-cli*.jar, commons-lang*.jar, gigapaxos*.jar"
  />
  <!--                       excludes="android.jar, hamcrest*.jar, junit*.jar"-->
      
  <!--                       includes="jline*.jar,mail.jar,commons*.jar,nio*.jar" -->

  <target name="client_jarbuild" depends="compile" description="generate jar files">
    <mkdir dir="${build.jar.dir}"/>
    <jar jarfile="${build.jar.dir}/gnsclient-${VERSION}-${RELEASE}.jar">
      <manifest>
        <attribute name="Built-By" value="Westy"/>
        <attribute name="Implementation-Vendor"
                   value="University of Massachusetts" />
        <attribute name="Implementation-Title" value="GNS" />
        <attribute name="Implementation-Version"
                   value="${VERSION}-${RELEASE}" />
        <attribute name="Class-Path" value="."/>
        <!--        <attribute name="Class-Path" value="${jar.classpath}"/>-->
        <attribute name="Build-Version" value="${version.code}" />
      </manifest>
      <fileset refid="client.includes"/>
      <fileset refid="client.keystore" />
      <zipgroupfileset refid="client.lib" />

    </jar>
  </target>

  <target name="client_console_jarbuild" depends="compile">
    <mkdir dir="${build.jar.dir}"/>
    <jar jarfile="${build.jar.dir}/gns-cli-${VERSION}-${RELEASE}.jar">
      <manifest>
        <attribute name="Built-By" value="Westy" />
        <!-- Information about the program itself -->
        <attribute name="Implementation-Vendor"
                   value="University of Massachusetts" />
        <attribute name="Implementation-Title" value="GNS CLI" />
        <attribute name="Implementation-Version"
                   value="${VERSION}-${RELEASE}" />
        <attribute name="Main-Class" value="edu.umass.cs.gnsclient.console.GnsCli" />
        <!--       <attribute name="Class-Path" value="${jar.classpath}" />-->
        <attribute name="Build-Version" value="${version.code}" />
      </manifest>
      <fileset refid="client.includes"/>
      <fileset refid="client.keystore" />
      <zipgroupfileset refid="client.lib" />
      <fileset dir="${src.dir}">
        <include name="edu/umass/cs/gnsclient/console/console.properties" />
      </fileset>
    </jar>
  </target>

  <target name="clean" description="remove generated files">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${jars.dir}"/>
  </target>

  <target name="doc" description="generate javadoc">
    <mkdir dir="${build.dir}/doc"/>
    <javadoc packagenames="edu.umass.cs.*" 
             sourcepath="${src.dir}" 
             destdir="${build.dir}/doc"
             additionalparam="-Xdoclint:none">
      <classpath refid="classpath.base"/>
      <!--      <link href="http://java.sun.com/javase/6/docs/api/"/>-->
    </javadoc>
    <mkdir dir="${dist.dir}/doc"/>
    <copy todir="${dist.dir}/doc">
      <fileset dir="${build.dir}/doc" includes="**"/>
    </copy> 
  </target>
    
  <target name="jar" depends="server_jarbuild, client_jarbuild, client_console_jarbuild">
    <!-- copy jars into dist/jars -->
    <mkdir dir="${dist.dir}/jars"/>
    <copy todir="${dist.dir}/jars">
      <fileset dir="${build.jar.dir}" includes="*.jar"/>
    </copy>  
    <!--    make a copy of the latest server and put it in GNS.jar-->
    <copy file="${dist.dir}/jars/gnsserver-${VERSION}-${RELEASE}.jar" tofile="${dist.dir}/jars/GNS.jar" />
    <!--    make a copy of the latest client and put it in GNSClient.jar-->
    <copy file="${dist.dir}/jars/gnsclient-${VERSION}-${RELEASE}.jar" tofile="${dist.dir}/jars/GNSClient.jar" />
    <copy file="${dist.dir}/jars/gns-cli-${VERSION}-${RELEASE}.jar" tofile="${dist.dir}/jars/GNS-CLI.jar" />
    <!--    make a symlink of the latest server and put it in GNS.jar-->
    <!--    <symlink link="${dist.dir}/jars/GNS.jar" resource="${dist.dir}/jars/gnsserver-${VERSION}-${RELEASE}.jar"/>-->
    <!--    make a symlink of the latest server and put it in GNSClient.jar-->
    <!--    <symlink link="${dist.dir}/jars/GNSClient.jar" resource="${dist.dir}/jars/gnsclient-${VERSION}-${RELEASE}.jar"/>-->
    <!-- copy jars into top level jars directory -->
    <mkdir dir="${jars.dir}"/>
    <copy todir="${jars.dir}">
      <fileset dir="${build.jar.dir}" includes="*.jar"/>
    </copy>
    <!--    make a copy of the latest server and put it in GNS.jar-->
    <copy file="${jars.dir}/gnsserver-${VERSION}-${RELEASE}.jar" tofile="${jars.dir}/GNS.jar" />
    <!--    make a copy of the latest client and put it in GNSClient.jar-->
    <copy file="${jars.dir}/gnsclient-${VERSION}-${RELEASE}.jar" tofile="${jars.dir}/GNSClient.jar" />
    <copy file="${jars.dir}/gns-cli-${VERSION}-${RELEASE}.jar" tofile="${jars.dir}/GNS-CLI.jar" />
    <!--    make a symlink of the latest server and put it in GNS.jar-->
    <!--    <symlink link="${jars.dir}/GNS.jar" resource="${jars.dir}/gnsserver-${VERSION}-${RELEASE}.jar"/>-->
    <!--    make a symlink of the latest server and put it in GNSClient.jar-->
    <!--    <symlink link="${jars.dir}/GNSClient.jar" resource="${jars.dir}/gnsclient-${VERSION}-${RELEASE}.jar"/>-->
     
    <!-- copy all of conf into dist/conf -->
    <mkdir dir="${dist.dir}/conf"/>
    <copy todir="${dist.dir}/conf">
      <fileset dir="${conf.dir}" includes="**" />  
    </copy>
    <!-- copy scripts into dist/scripts -->
    <mkdir dir="${dist.dir}/scripts"/>
    <copy todir="${dist.dir}/scripts">
      <fileset dir="${scripts.dir}" 
               excludes="paxos_logs, reconfiguration_DB, log, derby.log"/>  
    </copy>
    <!--    make scripts executable-->
    <chmod perm="ug+x">
      <fileset dir="${dist.dir}/scripts">
        <exclude name="*.properties"/>
      </fileset>
    </chmod>
   
  </target>
  
  <path id="classpath.test">
    <pathelement location="${build.classes.dir}"/>
    <pathelement location="${lib.dir}/junit-4.11.jar"/>
    <pathelement location="${lib.dir}/hamcrest-all-1.3.jar"/>
    <pathelement location="${lib.dir}/android.jar"/>
    <pathelement location="${lib.dir}/jline-1.0.jar"/>
    <pathelement location="${lib.dir}/commons-lang3-3.3.1.jar"/>
    <pathelement location="${lib.dir}/commons-cli-1.1.jar"/>
    <pathelement location="${lib.dir}/derby.jar"/>
    <pathelement location="${lib.dir}/log4j-1.2.16.jar"/>
    <pathelement location="${lib.dir}/gigapaxos-1.0.jar"/>
    <pathelement location="${conf.dir}"/>
  </path>
  
  <target name="ensure-test-name" unless="test">
    <fail message="You must run this target with -Dtest=TestName"/>
  </target>

  <target name="compiletest" depends="compile" description="Compile all the test files">
    <mkdir dir="${build.test.dir}" />
    <mkdir dir="${build.test.classes.dir}" />
    <javac srcdir="${test.dir}" 
           destdir="${build.test.classes.dir}" 
           debug="on"
           includeantruntime="false">
      <classpath refid="classpath.test"/>
    </javac>
  </target>
  
  <target name="runtest" description="Runs the test you specify on the command line with -Dtest=" 
          depends="compiletest, ensure-test-name">
    <!-- Allows use to pass in some standard args from command line using things like -Dhost=127.0.0.1/>-->
    <property name="host" value=""/>
    <property name="port" value=""/>
    <property name="alias" value=""/>
    <property name="password" value=""/>
    <property name="count" value=""/>
    <property name="disableSSL" value=""/>
    <junit printsummary="withOutAndErr" fork="yes"> 
      <jvmarg value="-Djavax.net.ssl.trustStorePassword=qwerty"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=conf/trustStore/node100.jks"/>
      <jvmarg value="-Dhost=${host}"/>
      <jvmarg value="-Dport=${port}"/>
      <jvmarg value="-Dalias=${alias}"/>
      <jvmarg value="-Dpassword=${password}"/>
      <jvmarg value="-Dcount=${count}"/>
      <jvmarg value="-DdisableSSL=${disableSSL}"/>
      <!--      <jvmarg value="-Djavax.net.debug=ssl"/>-->
      <classpath>
        <pathelement location="${build.test.classes.dir}"/>
      </classpath>
      <!-- Make sure these libraries are included -->
      <classpath refid="classpath.test" />
      <formatter type="plain" usefile="false"/>
      <batchtest>
        <fileset dir="${test.dir}">
          <include name="**/${test}.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>
  
  <target name="test" description="Runs the default integration test" 
          depends="jar, compiletest">
    <junit printsummary="yes" fork="yes" haltonfailure="on"
showoutput="yes">
      <test name="edu.umass.cs.gnsclient.client.ServerIntegrationTest"/>
      <formatter type="plain" usefile="false"/>
      <jvmarg value="-Djavax.net.ssl.trustStorePassword=qwerty"/>
      <jvmarg value="-Djavax.net.ssl.trustStore=conf/trustStore/node100.jks"/>
      <jvmarg value="-DstartServer=true"/>
      <jvmarg
value="-DgigapaxosConfig=conf/gigapaxos.gnsApp.properties"/>
      <classpath>
        <pathelement location="${build.test.classes.dir}"/>
      </classpath>
      <!-- Make sure these libraries are included -->
      <classpath refid="classpath.test" />
    </junit>
  </target>

  <target name="all" depends="clean,jar"
          description="build all files"/>
    
  <target name="buildnumber" description="Generates version number and sets it in properties file.">
    <buildnumber file="build.number" />

    <property name="version.code" value="${VERSION}_${RELEASE}_build${build.number}" />

    <echo>Version: ${version.code}</echo>

  </target>
	
	
  <!-- Msocket jar build -->
	
  <!-- Documentation -->
	
  <target name="msocketdoc" depends="compile" description="Builds the Javadoc">
    <javadoc packagenames="edu.umass.cs.msocket.*"
             sourcepath="${src.dir}"
             destdir="${build.dir}/docs/api"
             author="true"
             version="true"
             use="true"
             public="true"
             windowtitle="mSocket library API (specification ${VERSION}-${RELEASE})">
      <doctitle>
        <![CDATA[<h1>mSocket library API (specification ${VERSION}-${RELEASE})</h1>]]>
      </doctitle>
      <bottom>
      <![CDATA[<i>Copyright &#169; 2013-2014 University of Massachusetts - All Rights Reserved.</i>]]>
      </bottom>
      <classpath refid="classpath.base" />
    </javadoc>
  </target>
	
  <!-- Release -->
  <!--<target name="msocket-jars"
  depends="msocket-jar,msocket-nodoc-jar,msocket-proxy-console-jar,msocketdocdoc"
  description="Build both mSocket and proxy jars" />-->

  <target name="msocket-jar"
          depends="clean,compile,msocketdoc"
          description="Builds the mSocket Jar">
    <mkdir dir="${build.jar.dir}"/>
    <jar jarfile="${build.jar.dir}/msocket-${VERSION}-${RELEASE}.jar">
		
      <!-- including gns client -->
      <fileset refid="client.includes"/>
      <fileset refid="client.keystore" />
      <zipgroupfileset refid="client.lib" />
		
      <!-- include log4j, to be removed at some point -->
      <zipgroupfileset dir="${lib.dir}" includes="log4j*.jar" />
		
      <!-- including msocket core code -->
      <fileset dir="${build.classes.dir}">
        <include name="edu/umass/cs/msocket/**" />
        <exclude name="edu/umass/cs/msocket/docs/**" />
        <exclude name="edu/umass/cs/msocket/proxy/**" />
        <exclude name="edu/umass/cs/msocket/watchdog/**" />
      </fileset>
		
      <!-- including context service messages -->
      <fileset dir="${build.classes.dir}" includes="edu/umass/cs/contextservice/messages/*.class"/>
		
      <!-- including config files -->
      <fileset dir="${conf.dir}/msocketFiles">
        <include name="topLevelDomainNames.txt" />
      </fileset>
	 
      <fileset dir="${conf.dir}/msocketFiles">
        <include name="contextServiceNodeSetup.txt" />
      </fileset>
	  
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Implementation-Vendor"
                   value="University of Massachusetts" />
        <attribute name="Implementation-Title" value="MSocket Library" />
        <attribute name="Implementation-Version"
                   value="${VERSION}-${RELEASE}" />
        <attribute name="Build-Version" value="${version.code}" />
      </manifest>
    </jar>
  </target>
	
  <target name="msocket-proxy-console-jar"
          depends="clean,compile,msocketdoc"
          description="Builds the mSocket proxy console Jar">
    <mkdir dir="${build.jar.dir}"/>
    <jar jarfile="${build.jar.dir}/msocket-proxy-console-${VERSION}-${RELEASE}.jar">
			
      <!-- including gns client -->
      <fileset refid="client.includes"/>
      <fileset refid="client.keystore" />
      <zipgroupfileset refid="client.lib" />
			
      <!-- include log4j, to be removed at some point -->
      <zipgroupfileset dir="${lib.dir}" includes="log4j*.jar" />
			
      <!-- including msocket core code -->
      <fileset dir="${build.classes.dir}">
        <include name="edu/umass/cs/msocket/**" />
      </fileset>
			
      <!-- including context service messages -->
      <fileset dir="${build.classes.dir}" includes="edu/umass/cs/contextservice/messages/*.class"/>
			
      <!-- including config files -->
      <fileset dir="${conf.dir}/msocketFiles">
        <include name="topLevelDomainNames.txt" />
      </fileset>
		 
      <fileset dir="${conf.dir}/msocketFiles">
        <include name="contextServiceNodeSetup.txt" />
      </fileset>
			
      <fileset dir="${src.dir}">
        <include name="edu/umass/cs/msocket/proxy/console/console.ini" />
      </fileset>
		  
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Implementation-Vendor"
                   value="University of Massachusetts" />
        <attribute name="Implementation-Title" value="MSocket Library" />
        <attribute name="Implementation-Version"
                   value="${VERSION}-${RELEASE}" />
        <attribute name="Build-Version" value="${version.code}" />
      </manifest>
    </jar>
  </target>
</project>
