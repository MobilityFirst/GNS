//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../gig_ios/src/org/json/JSONObject.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Package.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Collection.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/ResourceBundle.h"
#include "java/util/Set.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONException.h"
#include "org/json/JSONObject.h"
#include "org/json/JSONString.h"
#include "org/json/JSONTokener.h"

@interface OrgJsonJSONObject () {
 @public
  id<JavaUtilMap> map_;
}

- (void)populateMapWithId:(id)bean;

@end

J2OBJC_FIELD_SETTER(OrgJsonJSONObject, map_, id<JavaUtilMap>)

inline NSString *OrgJsonJSONObject_get_sampleExplanation();
inline NSString *OrgJsonJSONObject_set_sampleExplanation(NSString *value);
static NSString *OrgJsonJSONObject_sampleExplanation = @" [555000 more chars] ...";
J2OBJC_STATIC_FIELD_OBJ(OrgJsonJSONObject, sampleExplanation, NSString *)

inline jint OrgJsonJSONObject_get_explanationSize();
inline jint OrgJsonJSONObject_set_explanationSize(jint value);
inline jint *OrgJsonJSONObject_getRef_explanationSize();
static jint OrgJsonJSONObject_explanationSize;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgJsonJSONObject, explanationSize, jint)

__attribute__((unused)) static void OrgJsonJSONObject_populateMapWithId_(OrgJsonJSONObject *self, id bean);

@interface OrgJsonJSONObject_Null : NSObject

- (instancetype)init;

- (id)java_clone;

- (jboolean)isEqual:(id)object;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsonJSONObject_Null)

__attribute__((unused)) static void OrgJsonJSONObject_Null_init(OrgJsonJSONObject_Null *self);

__attribute__((unused)) static OrgJsonJSONObject_Null *new_OrgJsonJSONObject_Null_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJsonJSONObject_Null *create_OrgJsonJSONObject_Null_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgJsonJSONObject_Null)

J2OBJC_INITIALIZED_DEFN(OrgJsonJSONObject)

id OrgJsonJSONObject_NULL;
jint OrgJsonJSONObject_reasonableFieldSize = 500;

@implementation OrgJsonJSONObject

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsonJSONObject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgJsonJSONObject:(OrgJsonJSONObject *)jo
                        withNSStringArray:(IOSObjectArray *)names {
  OrgJsonJSONObject_initWithOrgJsonJSONObject_withNSStringArray_(self, jo, names);
  return self;
}

- (instancetype)initWithOrgJsonJSONTokener:(OrgJsonJSONTokener *)x {
  OrgJsonJSONObject_initWithOrgJsonJSONTokener_(self, x);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  OrgJsonJSONObject_initWithJavaUtilMap_(self, map);
  return self;
}

- (instancetype)initWithId:(id)bean {
  OrgJsonJSONObject_initWithId_(self, bean);
  return self;
}

- (instancetype)initWithId:(id)object
         withNSStringArray:(IOSObjectArray *)names {
  OrgJsonJSONObject_initWithId_withNSStringArray_(self, object, names);
  return self;
}

- (instancetype)initWithNSString:(NSString *)source {
  OrgJsonJSONObject_initWithNSString_(self, source);
  return self;
}

- (instancetype)initWithNSString:(NSString *)baseName
              withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgJsonJSONObject_initWithNSString_withJavaUtilLocale_(self, baseName, locale);
  return self;
}

- (OrgJsonJSONObject *)accumulateWithNSString:(NSString *)key
                                       withId:(id)value {
  OrgJsonJSONObject_testValidityWithId_(value);
  id object = [self optWithNSString:key];
  if (object == nil) {
    [self putWithNSString:key withId:[value isKindOfClass:[OrgJsonJSONArray class]] ? [create_OrgJsonJSONArray_init() putWithId:value] : value];
  }
  else if ([object isKindOfClass:[OrgJsonJSONArray class]]) {
    [((OrgJsonJSONArray *) cast_chk(object, [OrgJsonJSONArray class])) putWithId:value];
  }
  else {
    [self putWithNSString:key withId:[((OrgJsonJSONArray *) nil_chk([create_OrgJsonJSONArray_init() putWithId:object])) putWithId:value]];
  }
  return self;
}

- (OrgJsonJSONObject *)appendWithNSString:(NSString *)key
                                   withId:(id)value {
  OrgJsonJSONObject_testValidityWithId_(value);
  id object = [self optWithNSString:key];
  if (object == nil) {
    [self putWithNSString:key withId:[create_OrgJsonJSONArray_init() putWithId:value]];
  }
  else if ([object isKindOfClass:[OrgJsonJSONArray class]]) {
    [self putWithNSString:key withId:[((OrgJsonJSONArray *) cast_chk(object, [OrgJsonJSONArray class])) putWithId:value]];
  }
  else {
    @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", key, @"] is not a JSONArray."));
  }
  return self;
}

+ (NSString *)doubleToStringWithDouble:(jdouble)d {
  return OrgJsonJSONObject_doubleToStringWithDouble_(d);
}

- (id)getWithNSString:(NSString *)key {
  if (key == nil) {
    @throw create_OrgJsonJSONException_initWithNSString_(@"Null key.");
  }
  id object = [self optWithNSString:key];
  if (object == nil) {
    @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] not found."));
  }
  return object;
}

- (jboolean)getBooleanWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  if ([nil_chk(object) isEqual:JreLoadStatic(JavaLangBoolean, FALSE)] || ([object isKindOfClass:[NSString class]] && [((NSString *) cast_chk(object, [NSString class])) java_equalsIgnoreCase:@"false"])) {
    return false;
  }
  else if ([object isEqual:JreLoadStatic(JavaLangBoolean, TRUE)] || ([object isKindOfClass:[NSString class]] && [((NSString *) cast_chk(object, [NSString class])) java_equalsIgnoreCase:@"true"])) {
    return true;
  }
  @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] is not a Boolean."));
}

- (jdouble)getDoubleWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) cast_chk(object, [NSNumber class])))) doubleValue] : JavaLangDouble_parseDoubleWithNSString_((NSString *) cast_chk(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] is not a number."));
  }
}

- (jint)getIntWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) cast_chk(object, [NSNumber class])))) intValue] : JavaLangInteger_parseIntWithNSString_((NSString *) cast_chk(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] is not an int."));
  }
}

- (OrgJsonJSONArray *)getJSONArrayWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  if ([object isKindOfClass:[OrgJsonJSONArray class]]) {
    return (OrgJsonJSONArray *) cast_chk(object, [OrgJsonJSONArray class]);
  }
  @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] is not a JSONArray."));
}

- (OrgJsonJSONObject *)getJSONObjectWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  if ([object isKindOfClass:[OrgJsonJSONObject class]]) {
    return (OrgJsonJSONObject *) cast_chk(object, [OrgJsonJSONObject class]);
  }
  @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] is not a JSONObject."));
}

- (jlong)getLongWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) cast_chk(object, [NSNumber class])))) longLongValue] : JavaLangLong_parseLongWithNSString_((NSString *) cast_chk(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"JSONObject[", OrgJsonJSONObject_quoteWithNSString_(key), @"] is not a long."));
  }
}

+ (IOSObjectArray *)getNamesWithId:(id)object {
  return OrgJsonJSONObject_getNamesWithId_(object);
}

+ (IOSObjectArray *)getNamesWithOrgJsonJSONObject:(OrgJsonJSONObject *)jo {
  return OrgJsonJSONObject_getNamesWithOrgJsonJSONObject_(jo);
}

- (NSString *)getStringWithNSString:(NSString *)key {
  id object = [self getWithNSString:key];
  return object == OrgJsonJSONObject_NULL ? nil : [nil_chk(object) description];
}

- (jboolean)hasWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(self->map_)) containsKeyWithId:key];
}

- (OrgJsonJSONObject *)incrementWithNSString:(NSString *)key {
  id value = [self optWithNSString:key];
  if (value == nil) {
    [self putWithNSString:key withInt:1];
  }
  else if ([value isKindOfClass:[JavaLangInteger class]]) {
    [self putWithNSString:key withInt:[((JavaLangInteger *) cast_chk(value, [JavaLangInteger class])) intValue] + 1];
  }
  else if ([value isKindOfClass:[JavaLangLong class]]) {
    [self putWithNSString:key withLong:[((JavaLangLong *) cast_chk(value, [JavaLangLong class])) longLongValue] + 1];
  }
  else if ([value isKindOfClass:[JavaLangDouble class]]) {
    [self putWithNSString:key withDouble:[((JavaLangDouble *) cast_chk(value, [JavaLangDouble class])) doubleValue] + 1];
  }
  else if ([value isKindOfClass:[JavaLangFloat class]]) {
    [self putWithNSString:key withDouble:[((JavaLangFloat *) cast_chk(value, [JavaLangFloat class])) floatValue] + 1];
  }
  else {
    @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$$$", @"Unable to increment [", OrgJsonJSONObject_quoteWithNSString_(key), @"]."));
  }
  return self;
}

- (jboolean)isNullWithNSString:(NSString *)key {
  return [nil_chk(OrgJsonJSONObject_NULL) isEqual:[self optWithNSString:key]];
}

- (id<JavaUtilIterator>)keys {
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(self->map_)) keySet])) iterator];
}

- (jint)length {
  return [((id<JavaUtilMap>) nil_chk(self->map_)) size];
}

- (OrgJsonJSONArray *)names {
  OrgJsonJSONArray *ja = create_OrgJsonJSONArray_init();
  id<JavaUtilIterator> keys = [self keys];
  while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
    [ja putWithId:[keys next]];
  }
  return [ja length] == 0 ? nil : ja;
}

+ (NSString *)numberToStringWithNSNumber:(NSNumber *)number {
  return OrgJsonJSONObject_numberToStringWithNSNumber_(number);
}

- (id)optWithNSString:(NSString *)key {
  return key == nil ? nil : [((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:key];
}

- (jboolean)optBooleanWithNSString:(NSString *)key {
  return [self optBooleanWithNSString:key withBoolean:false];
}

- (jboolean)optBooleanWithNSString:(NSString *)key
                       withBoolean:(jboolean)defaultValue {
  @try {
    return [self getBooleanWithNSString:key];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (jdouble)optDoubleWithNSString:(NSString *)key {
  return [self optDoubleWithNSString:key withDouble:JavaLangDouble_NaN];
}

- (jdouble)optDoubleWithNSString:(NSString *)key
                      withDouble:(jdouble)defaultValue {
  @try {
    return [self getDoubleWithNSString:key];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (jint)optIntWithNSString:(NSString *)key {
  return [self optIntWithNSString:key withInt:0];
}

- (jint)optIntWithNSString:(NSString *)key
                   withInt:(jint)defaultValue {
  @try {
    return [self getIntWithNSString:key];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (OrgJsonJSONArray *)optJSONArrayWithNSString:(NSString *)key {
  id o = [self optWithNSString:key];
  return [o isKindOfClass:[OrgJsonJSONArray class]] ? (OrgJsonJSONArray *) cast_chk(o, [OrgJsonJSONArray class]) : nil;
}

- (OrgJsonJSONObject *)optJSONObjectWithNSString:(NSString *)key {
  id object = [self optWithNSString:key];
  return [object isKindOfClass:[OrgJsonJSONObject class]] ? (OrgJsonJSONObject *) cast_chk(object, [OrgJsonJSONObject class]) : nil;
}

- (jlong)optLongWithNSString:(NSString *)key {
  return [self optLongWithNSString:key withLong:0];
}

- (jlong)optLongWithNSString:(NSString *)key
                    withLong:(jlong)defaultValue {
  @try {
    return [self getLongWithNSString:key];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (NSString *)optStringWithNSString:(NSString *)key {
  return [self optStringWithNSString:key withNSString:@""];
}

- (NSString *)optStringWithNSString:(NSString *)key
                       withNSString:(NSString *)defaultValue {
  id object = [self optWithNSString:key];
  return [nil_chk(OrgJsonJSONObject_NULL) isEqual:object] ? defaultValue : [nil_chk(object) description];
}

- (void)populateMapWithId:(id)bean {
  OrgJsonJSONObject_populateMapWithId_(self, bean);
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                           withBoolean:(jboolean)value {
  [self putWithNSString:key withId:value ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
  return self;
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                withJavaUtilCollection:(id<JavaUtilCollection>)value {
  [self putWithNSString:key withId:create_OrgJsonJSONArray_initWithJavaUtilCollection_(value)];
  return self;
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                            withDouble:(jdouble)value {
  [self putWithNSString:key withId:create_JavaLangDouble_initWithDouble_(value)];
  return self;
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                               withInt:(jint)value {
  [self putWithNSString:key withId:create_JavaLangInteger_initWithInt_(value)];
  return self;
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                              withLong:(jlong)value {
  [self putWithNSString:key withId:create_JavaLangLong_initWithLong_(value)];
  return self;
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                       withJavaUtilMap:(id<JavaUtilMap>)value {
  [self putWithNSString:key withId:create_OrgJsonJSONObject_initWithJavaUtilMap_(value)];
  return self;
}

- (OrgJsonJSONObject *)putWithNSString:(NSString *)key
                                withId:(id)value {
  if (key == nil) {
    @throw create_OrgJsonJSONException_initWithNSString_(@"Null key.");
  }
  if (value != nil) {
    OrgJsonJSONObject_testValidityWithId_(value);
    [((id<JavaUtilMap>) nil_chk(self->map_)) putWithId:key withId:value];
  }
  else {
    [self removeWithNSString:key];
  }
  return self;
}

- (OrgJsonJSONObject *)putOnceWithNSString:(NSString *)key
                                    withId:(id)value {
  if (key != nil && value != nil) {
    if ([self optWithNSString:key] != nil) {
      @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$$C", @"Duplicate key \"", key, '"'));
    }
    [self putWithNSString:key withId:value];
  }
  return self;
}

- (OrgJsonJSONObject *)putOptWithNSString:(NSString *)key
                                   withId:(id)value {
  if (key != nil && value != nil) {
    [self putWithNSString:key withId:value];
  }
  return self;
}

+ (NSString *)quoteWithNSString:(NSString *)string {
  return OrgJsonJSONObject_quoteWithNSString_(string);
}

- (id)removeWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(self->map_)) removeWithId:key];
}

+ (id)stringToValueWithNSString:(NSString *)string {
  return OrgJsonJSONObject_stringToValueWithNSString_(string);
}

+ (void)testValidityWithId:(id)o {
  OrgJsonJSONObject_testValidityWithId_(o);
}

- (OrgJsonJSONArray *)toJSONArrayWithOrgJsonJSONArray:(OrgJsonJSONArray *)names {
  if (names == nil || [names length] == 0) {
    return nil;
  }
  OrgJsonJSONArray *ja = create_OrgJsonJSONArray_init();
  for (jint i = 0; i < [names length]; i += 1) {
    [ja putWithId:[self optWithNSString:[names getStringWithInt:i]]];
  }
  return ja;
}

- (NSString *)description {
  @try {
    id<JavaUtilIterator> keys = [self keys];
    JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(@"{");
    while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
      if ([sb length] > 1) {
        [sb appendWithChar:','];
      }
      id o = [keys next];
      [sb appendWithNSString:OrgJsonJSONObject_quoteWithNSString_([nil_chk(o) description])];
      [sb appendWithChar:':'];
      [sb appendWithNSString:OrgJsonJSONObject_valueToStringWithId_([((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:o])];
    }
    [sb appendWithChar:'}'];
    return [sb description];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (NSString *)toStringWithInt:(jint)indentFactor {
  return [self toStringWithInt:indentFactor withInt:0];
}

- (NSString *)toStringWithInt:(jint)indentFactor
                      withInt:(jint)indent {
  jint i;
  jint length = [self length];
  if (length == 0) {
    return @"{}";
  }
  id<JavaUtilIterator> keys = [self keys];
  jint newindent = indent + indentFactor;
  id object;
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(@"{");
  if (length == 1) {
    object = [((id<JavaUtilIterator>) nil_chk(keys)) next];
    [sb appendWithNSString:OrgJsonJSONObject_quoteWithNSString_([nil_chk(object) description])];
    [sb appendWithNSString:@": "];
    [sb appendWithNSString:OrgJsonJSONObject_valueToStringWithId_withInt_withInt_([((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:object], indentFactor, indent)];
  }
  else {
    while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
      object = [keys next];
      if ([sb length] > 1) {
        [sb appendWithNSString:@",\n"];
      }
      else {
        [sb appendWithChar:0x000a];
      }
      for (i = 0; i < newindent; i += 1) {
        [sb appendWithChar:' '];
      }
      [sb appendWithNSString:OrgJsonJSONObject_quoteWithNSString_([nil_chk(object) description])];
      [sb appendWithNSString:@": "];
      [sb appendWithNSString:OrgJsonJSONObject_valueToStringWithId_withInt_withInt_([((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:object], indentFactor, newindent)];
    }
    if ([sb length] > 1) {
      [sb appendWithChar:0x000a];
      for (i = 0; i < indent; i += 1) {
        [sb appendWithChar:' '];
      }
    }
  }
  [sb appendWithChar:'}'];
  return [sb description];
}

+ (NSString *)valueToStringWithId:(id)value {
  return OrgJsonJSONObject_valueToStringWithId_(value);
}

+ (NSString *)valueToStringWithId:(id)value
                          withInt:(jint)indentFactor
                          withInt:(jint)indent {
  return OrgJsonJSONObject_valueToStringWithId_withInt_withInt_(value, indentFactor, indent);
}

+ (id)wrapWithId:(id)object {
  return OrgJsonJSONObject_wrapWithId_(object);
}

- (JavaIoWriter *)writeWithJavaIoWriter:(JavaIoWriter *)writer {
  @try {
    jboolean commanate = false;
    id<JavaUtilIterator> keys = [self keys];
    [((JavaIoWriter *) nil_chk(writer)) writeWithInt:'{'];
    while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
      if (commanate) {
        [writer writeWithInt:','];
      }
      id key = [keys next];
      [writer writeWithNSString:OrgJsonJSONObject_quoteWithNSString_([nil_chk(key) description])];
      [writer writeWithInt:':'];
      id value = [((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:key];
      if ([value isKindOfClass:[OrgJsonJSONObject class]]) {
        [((OrgJsonJSONObject *) nil_chk(((OrgJsonJSONObject *) cast_chk(value, [OrgJsonJSONObject class])))) writeWithJavaIoWriter:writer];
      }
      else if ([value isKindOfClass:[OrgJsonJSONArray class]]) {
        [((OrgJsonJSONArray *) nil_chk(((OrgJsonJSONArray *) cast_chk(value, [OrgJsonJSONArray class])))) writeWithJavaIoWriter:writer];
      }
      else {
        [writer writeWithNSString:OrgJsonJSONObject_valueToStringWithId_(value)];
      }
      commanate = true;
    }
    [writer writeWithInt:'}'];
    return writer;
  }
  @catch (JavaIoIOException *exception) {
    @throw create_OrgJsonJSONException_initWithNSException_(exception);
  }
}

- (NSString *)toReasonableString {
  @try {
    id<JavaUtilIterator> keys = [self keys];
    JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(@"{");
    while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
      if ([sb length] > 1) {
        [sb appendWithChar:','];
      }
      id o = [keys next];
      [sb appendWithNSString:OrgJsonJSONObject_quoteWithNSString_([nil_chk(o) description])];
      [sb appendWithChar:':'];
      [sb appendWithNSString:OrgJsonJSONObject_ellipsizeWithNSString_withInt_(OrgJsonJSONObject_valueToReasonableStringWithId_([((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:o]), OrgJsonJSONObject_reasonableFieldSize)];
    }
    [sb appendWithChar:'}'];
    return [sb description];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

+ (NSString *)valueToReasonableStringWithId:(id)value {
  return OrgJsonJSONObject_valueToReasonableStringWithId_(value);
}

+ (NSString *)ellipsizeWithNSString:(NSString *)text
                            withInt:(jint)max {
  return OrgJsonJSONObject_ellipsizeWithNSString_withInt_(text, max);
}

- (void)dealloc {
  RELEASE_(map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, 2, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 8, 9, 2, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 10, 9, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 6, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 6, 2, -1, -1, -1 },
    { NULL, "D", 0x1, 15, 6, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 6, 2, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 17, 6, 2, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 18, 6, 2, -1, -1, -1 },
    { NULL, "J", 0x1, 19, 6, 2, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 20, 4, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 22, 6, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 23, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 24, 6, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 26, 27, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 28, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 31, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 33, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 35, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 36, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 37, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 39, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 42, 30, 2, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 42, 43, 2, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 42, 32, 2, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 42, 34, 2, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 42, 38, 2, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 42, 44, 2, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 42, 9, 2, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 45, 9, 2, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 46, 9, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 47, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 48, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 49, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 50, 4, 2, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 51, 52, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 53, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 53, 54, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 53, 55, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 56, 4, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 56, 57, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 58, 4, -1, -1, -1, -1 },
    { NULL, "LJavaIoWriter;", 0x1, 59, 60, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 61, 4, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 62, 34, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgJsonJSONObject:withNSStringArray:);
  methods[2].selector = @selector(initWithOrgJsonJSONTokener:);
  methods[3].selector = @selector(initWithJavaUtilMap:);
  methods[4].selector = @selector(initWithId:);
  methods[5].selector = @selector(initWithId:withNSStringArray:);
  methods[6].selector = @selector(initWithNSString:);
  methods[7].selector = @selector(initWithNSString:withJavaUtilLocale:);
  methods[8].selector = @selector(accumulateWithNSString:withId:);
  methods[9].selector = @selector(appendWithNSString:withId:);
  methods[10].selector = @selector(doubleToStringWithDouble:);
  methods[11].selector = @selector(getWithNSString:);
  methods[12].selector = @selector(getBooleanWithNSString:);
  methods[13].selector = @selector(getDoubleWithNSString:);
  methods[14].selector = @selector(getIntWithNSString:);
  methods[15].selector = @selector(getJSONArrayWithNSString:);
  methods[16].selector = @selector(getJSONObjectWithNSString:);
  methods[17].selector = @selector(getLongWithNSString:);
  methods[18].selector = @selector(getNamesWithId:);
  methods[19].selector = @selector(getNamesWithOrgJsonJSONObject:);
  methods[20].selector = @selector(getStringWithNSString:);
  methods[21].selector = @selector(hasWithNSString:);
  methods[22].selector = @selector(incrementWithNSString:);
  methods[23].selector = @selector(isNullWithNSString:);
  methods[24].selector = @selector(keys);
  methods[25].selector = @selector(length);
  methods[26].selector = @selector(names);
  methods[27].selector = @selector(numberToStringWithNSNumber:);
  methods[28].selector = @selector(optWithNSString:);
  methods[29].selector = @selector(optBooleanWithNSString:);
  methods[30].selector = @selector(optBooleanWithNSString:withBoolean:);
  methods[31].selector = @selector(optDoubleWithNSString:);
  methods[32].selector = @selector(optDoubleWithNSString:withDouble:);
  methods[33].selector = @selector(optIntWithNSString:);
  methods[34].selector = @selector(optIntWithNSString:withInt:);
  methods[35].selector = @selector(optJSONArrayWithNSString:);
  methods[36].selector = @selector(optJSONObjectWithNSString:);
  methods[37].selector = @selector(optLongWithNSString:);
  methods[38].selector = @selector(optLongWithNSString:withLong:);
  methods[39].selector = @selector(optStringWithNSString:);
  methods[40].selector = @selector(optStringWithNSString:withNSString:);
  methods[41].selector = @selector(populateMapWithId:);
  methods[42].selector = @selector(putWithNSString:withBoolean:);
  methods[43].selector = @selector(putWithNSString:withJavaUtilCollection:);
  methods[44].selector = @selector(putWithNSString:withDouble:);
  methods[45].selector = @selector(putWithNSString:withInt:);
  methods[46].selector = @selector(putWithNSString:withLong:);
  methods[47].selector = @selector(putWithNSString:withJavaUtilMap:);
  methods[48].selector = @selector(putWithNSString:withId:);
  methods[49].selector = @selector(putOnceWithNSString:withId:);
  methods[50].selector = @selector(putOptWithNSString:withId:);
  methods[51].selector = @selector(quoteWithNSString:);
  methods[52].selector = @selector(removeWithNSString:);
  methods[53].selector = @selector(stringToValueWithNSString:);
  methods[54].selector = @selector(testValidityWithId:);
  methods[55].selector = @selector(toJSONArrayWithOrgJsonJSONArray:);
  methods[56].selector = @selector(description);
  methods[57].selector = @selector(toStringWithInt:);
  methods[58].selector = @selector(toStringWithInt:withInt:);
  methods[59].selector = @selector(valueToStringWithId:);
  methods[60].selector = @selector(valueToStringWithId:withInt:withInt:);
  methods[61].selector = @selector(wrapWithId:);
  methods[62].selector = @selector(writeWithJavaIoWriter:);
  methods[63].selector = @selector(toReasonableString);
  methods[64].selector = @selector(valueToReasonableStringWithId:);
  methods[65].selector = @selector(ellipsizeWithNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "NULL", "LNSObject;", .constantValue.asLong = 0, 0x19, -1, 63, -1, -1 },
    { "reasonableFieldSize", "I", .constantValue.asLong = 0, 0x9, -1, 64, -1, -1 },
    { "sampleExplanation", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 65, -1, -1 },
    { "explanationSize", "I", .constantValue.asLong = 0, 0xa, -1, 66, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJsonJSONObject;[LNSString;", "LOrgJsonJSONTokener;", "LOrgJsonJSONException;", "LJavaUtilMap;", "LNSObject;", "LNSObject;[LNSString;", "LNSString;", "LNSString;LJavaUtilLocale;", "accumulate", "LNSString;LNSObject;", "append", "doubleToString", "D", "get", "getBoolean", "getDouble", "getInt", "getJSONArray", "getJSONObject", "getLong", "getNames", "LOrgJsonJSONObject;", "getString", "has", "increment", "isNull", "numberToString", "LNSNumber;", "opt", "optBoolean", "LNSString;Z", "optDouble", "LNSString;D", "optInt", "LNSString;I", "optJSONArray", "optJSONObject", "optLong", "LNSString;J", "optString", "LNSString;LNSString;", "populateMap", "put", "LNSString;LJavaUtilCollection;", "LNSString;LJavaUtilMap;", "putOnce", "putOpt", "quote", "remove", "stringToValue", "testValidity", "toJSONArray", "LOrgJsonJSONArray;", "toString", "I", "II", "valueToString", "LNSObject;II", "wrap", "write", "LJavaIoWriter;", "valueToReasonableString", "ellipsize", &OrgJsonJSONObject_NULL, &OrgJsonJSONObject_reasonableFieldSize, &OrgJsonJSONObject_sampleExplanation, &OrgJsonJSONObject_explanationSize, "LOrgJsonJSONObject_Null;" };
  static const J2ObjcClassInfo _OrgJsonJSONObject = { "JSONObject", "org.json", ptrTable, methods, fields, 7, 0x1, 66, 5, -1, 67, -1, -1, -1 };
  return &_OrgJsonJSONObject;
}

+ (void)initialize {
  if (self == [OrgJsonJSONObject class]) {
    JreStrongAssignAndConsume(&OrgJsonJSONObject_NULL, new_OrgJsonJSONObject_Null_init());
    OrgJsonJSONObject_explanationSize = ((jint) [((NSString *) nil_chk(OrgJsonJSONObject_sampleExplanation)) length]);
    J2OBJC_SET_INITIALIZED(OrgJsonJSONObject)
  }
}

@end

void OrgJsonJSONObject_init(OrgJsonJSONObject *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->map_, new_JavaUtilHashMap_init());
}

OrgJsonJSONObject *new_OrgJsonJSONObject_init() {
  J2OBJC_NEW_IMPL(OrgJsonJSONObject, init)
}

OrgJsonJSONObject *create_OrgJsonJSONObject_init() {
  J2OBJC_CREATE_IMPL(OrgJsonJSONObject, init)
}

void OrgJsonJSONObject_initWithOrgJsonJSONObject_withNSStringArray_(OrgJsonJSONObject *self, OrgJsonJSONObject *jo, IOSObjectArray *names) {
  OrgJsonJSONObject_init(self);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(names))->size_; i += 1) {
    @try {
      [self putOnceWithNSString:IOSObjectArray_Get(names, i) withId:[((OrgJsonJSONObject *) nil_chk(jo)) optWithNSString:IOSObjectArray_Get(names, i)]];
    }
    @catch (JavaLangException *ignore) {
    }
  }
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithOrgJsonJSONObject_withNSStringArray_(OrgJsonJSONObject *jo, IOSObjectArray *names) {
  J2OBJC_NEW_IMPL(OrgJsonJSONObject, initWithOrgJsonJSONObject_withNSStringArray_, jo, names)
}

OrgJsonJSONObject *create_OrgJsonJSONObject_initWithOrgJsonJSONObject_withNSStringArray_(OrgJsonJSONObject *jo, IOSObjectArray *names) {
  J2OBJC_CREATE_IMPL(OrgJsonJSONObject, initWithOrgJsonJSONObject_withNSStringArray_, jo, names)
}

void OrgJsonJSONObject_initWithOrgJsonJSONTokener_(OrgJsonJSONObject *self, OrgJsonJSONTokener *x) {
  OrgJsonJSONObject_init(self);
  jchar c;
  NSString *key;
  if ([((OrgJsonJSONTokener *) nil_chk(x)) nextClean] != '{') {
    @throw [x syntaxErrorWithNSString:@"A JSONObject text must begin with '{'"];
  }
  for (; ; ) {
    c = [x nextClean];
    switch (c) {
      case 0:
      @throw [x syntaxErrorWithNSString:@"A JSONObject text must end with '}'"];
      case '}':
      return;
      default:
      [x back];
      key = [nil_chk([x nextValue]) description];
    }
    c = [x nextClean];
    if (c == '=') {
      if ([x next] != '>') {
        [x back];
      }
    }
    else if (c != ':') {
      @throw [x syntaxErrorWithNSString:@"Expected a ':' after a key"];
    }
    [self putOnceWithNSString:key withId:[x nextValue]];
    switch ([x nextClean]) {
      case ';':
      case ',':
      if ([x nextClean] == '}') {
        return;
      }
      [x back];
      break;
      case '}':
      return;
      default:
      @throw [x syntaxErrorWithNSString:@"Expected a ',' or '}'"];
    }
  }
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithOrgJsonJSONTokener_(OrgJsonJSONTokener *x) {
  J2OBJC_NEW_IMPL(OrgJsonJSONObject, initWithOrgJsonJSONTokener_, x)
}

OrgJsonJSONObject *create_OrgJsonJSONObject_initWithOrgJsonJSONTokener_(OrgJsonJSONTokener *x) {
  J2OBJC_CREATE_IMPL(OrgJsonJSONObject, initWithOrgJsonJSONTokener_, x)
}

void OrgJsonJSONObject_initWithJavaUtilMap_(OrgJsonJSONObject *self, id<JavaUtilMap> map) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->map_, new_JavaUtilHashMap_init());
  if (map != nil) {
    id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([map entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
      id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) cast_check([i next], JavaUtilMap_Entry_class_());
      id value = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
      if (value != nil) {
        [((id<JavaUtilMap>) nil_chk(self->map_)) putWithId:[e getKey] withId:OrgJsonJSONObject_wrapWithId_(value)];
      }
    }
  }
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  J2OBJC_NEW_IMPL(OrgJsonJSONObject, initWithJavaUtilMap_, map)
}

OrgJsonJSONObject *create_OrgJsonJSONObject_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  J2OBJC_CREATE_IMPL(OrgJsonJSONObject, initWithJavaUtilMap_, map)
}

void OrgJsonJSONObject_initWithId_(OrgJsonJSONObject *self, id bean) {
  OrgJsonJSONObject_init(self);
  OrgJsonJSONObject_populateMapWithId_(self, bean);
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithId_(id bean) {
  J2OBJC_NEW_IMPL(OrgJsonJSONObject, initWithId_, bean)
}

OrgJsonJSONObject *create_OrgJsonJSONObject_initWithId_(id bean) {
  J2OBJC_CREATE_IMPL(OrgJsonJSONObject, initWithId_, bean)
}

void OrgJsonJSONObject_initWithId_withNSStringArray_(OrgJsonJSONObject *self, id object, IOSObjectArray *names) {
  OrgJsonJSONObject_init(self);
  IOSClass *c = [nil_chk(object) java_getClass];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(names))->size_; i += 1) {
    NSString *name = IOSObjectArray_Get(names, i);
    @try {
      [self putOptWithNSString:name withId:[((JavaLangReflectField *) nil_chk([c getField:name])) getWithId:object]];
    }
    @catch (JavaLangException *ignore) {
    }
  }
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithId_withNSStringArray_(id object, IOSObjectArray *names) {
  J2OBJC_NEW_IMPL(OrgJsonJSONObject, initWithId_withNSStringArray_, object, names)
}

OrgJsonJSONObject *create_OrgJsonJSONObject_initWithId_withNSStringArray_(id object, IOSObjectArray *names) {
  J2OBJC_CREATE_IMPL(OrgJsonJSONObject, initWithId_withNSStringArray_, object, names)
}

void OrgJsonJSONObject_initWithNSString_(OrgJsonJSONObject *self, NSString *source) {
  OrgJsonJSONObject_initWithOrgJsonJSONTokener_(self, create_OrgJsonJSONTokener_initWithNSString_(source));
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithNSString_(NSString *source) {
  J2OBJC_NEW_IMPL(OrgJsonJSONObject, initWithNSString_, source)
}

OrgJsonJSONObject *create_OrgJsonJSONObject_initWithNSString_(NSString *source) {
  J2OBJC_CREATE_IMPL(OrgJsonJSONObject, initWithNSString_, source)
}

void OrgJsonJSONObject_initWithNSString_withJavaUtilLocale_(OrgJsonJSONObject *self, NSString *baseName, JavaUtilLocale *locale) {
  OrgJsonJSONObject_init(self);
  JavaUtilResourceBundle *bundle = JavaUtilResourceBundle_getBundleWithNSString_withJavaUtilLocale_withJavaLangClassLoader_(baseName, locale, [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader]);
  id<JavaUtilEnumeration> keys = [((JavaUtilResourceBundle *) nil_chk(bundle)) getKeys];
  while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
    id key = [keys nextElement];
    if ([key isKindOfClass:[NSString class]]) {
      IOSObjectArray *path = [((NSString *) nil_chk(((NSString *) cast_chk(key, [NSString class])))) java_split:@"\\."];
      jint last = ((IOSObjectArray *) nil_chk(path))->size_ - 1;
      OrgJsonJSONObject *target = self;
      for (jint i = 0; i < last; i += 1) {
        NSString *segment = IOSObjectArray_Get(path, i);
        OrgJsonJSONObject *nextTarget = [target optJSONObjectWithNSString:segment];
        if (nextTarget == nil) {
          nextTarget = create_OrgJsonJSONObject_init();
          [target putWithNSString:segment withId:nextTarget];
        }
        target = nextTarget;
      }
      [target putWithNSString:IOSObjectArray_Get(path, last) withId:[bundle getStringWithNSString:(NSString *) cast_chk(key, [NSString class])]];
    }
  }
}

OrgJsonJSONObject *new_OrgJsonJSONObject_initWithNSString_withJavaUtilLocale_(NSString *baseName, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgJsonJSONObject, initWithNSString_withJavaUtilLocale_, baseName, locale)
}

OrgJsonJSONObject *create_OrgJsonJSONObject_initWithNSString_withJavaUtilLocale_(NSString *baseName, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgJsonJSONObject, initWithNSString_withJavaUtilLocale_, baseName, locale)
}

NSString *OrgJsonJSONObject_doubleToStringWithDouble_(jdouble d) {
  OrgJsonJSONObject_initialize();
  if (JavaLangDouble_isInfiniteWithDouble_(d) || JavaLangDouble_isNaNWithDouble_(d)) {
    return @"null";
  }
  NSString *string = JavaLangDouble_toStringWithDouble_(d);
  if ([((NSString *) nil_chk(string)) java_indexOf:'.'] > 0 && [string java_indexOf:'e'] < 0 && [string java_indexOf:'E'] < 0) {
    while ([((NSString *) nil_chk(string)) hasSuffix:@"0"]) {
      string = [string java_substring:0 endIndex:((jint) [string length]) - 1];
    }
    if ([string hasSuffix:@"."]) {
      string = [string java_substring:0 endIndex:((jint) [string length]) - 1];
    }
  }
  return string;
}

IOSObjectArray *OrgJsonJSONObject_getNamesWithId_(id object) {
  OrgJsonJSONObject_initialize();
  if (object == nil) {
    return nil;
  }
  IOSClass *klass = [object java_getClass];
  IOSObjectArray *fields = [klass getFields];
  jint length = ((IOSObjectArray *) nil_chk(fields))->size_;
  if (length == 0) {
    return nil;
  }
  IOSObjectArray *names = [IOSObjectArray arrayWithLength:length type:NSString_class_()];
  for (jint i = 0; i < length; i += 1) {
    IOSObjectArray_Set(names, i, [((JavaLangReflectField *) nil_chk(IOSObjectArray_Get(fields, i))) getName]);
  }
  return names;
}

IOSObjectArray *OrgJsonJSONObject_getNamesWithOrgJsonJSONObject_(OrgJsonJSONObject *jo) {
  OrgJsonJSONObject_initialize();
  jint length = [((OrgJsonJSONObject *) nil_chk(jo)) length];
  if (length == 0) {
    return nil;
  }
  id<JavaUtilIterator> iterator = [jo keys];
  IOSObjectArray *names = [IOSObjectArray arrayWithLength:length type:NSString_class_()];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    IOSObjectArray_Set(names, i, (NSString *) cast_chk([iterator next], [NSString class]));
    i += 1;
  }
  return names;
}

NSString *OrgJsonJSONObject_numberToStringWithNSNumber_(NSNumber *number) {
  OrgJsonJSONObject_initialize();
  if (number == nil) {
    @throw create_OrgJsonJSONException_initWithNSString_(@"Null pointer");
  }
  OrgJsonJSONObject_testValidityWithId_(number);
  NSString *string = [number description];
  if ([((NSString *) nil_chk(string)) java_indexOf:'.'] > 0 && [string java_indexOf:'e'] < 0 && [string java_indexOf:'E'] < 0) {
    while ([((NSString *) nil_chk(string)) hasSuffix:@"0"]) {
      string = [string java_substring:0 endIndex:((jint) [string length]) - 1];
    }
    if ([string hasSuffix:@"."]) {
      string = [string java_substring:0 endIndex:((jint) [string length]) - 1];
    }
  }
  return string;
}

void OrgJsonJSONObject_populateMapWithId_(OrgJsonJSONObject *self, id bean) {
  IOSClass *klass = [nil_chk(bean) java_getClass];
  jboolean includeSuperClass = [klass getClassLoader] != nil;
  IOSObjectArray *methods = (includeSuperClass) ? [klass getMethods] : [klass getDeclaredMethods];
  for (jint i = 0; i < methods->size_; i += 1) {
    @try {
      JavaLangReflectMethod *method = IOSObjectArray_Get(methods, i);
      if (JavaLangReflectModifier_isPublicWithInt_([((JavaLangReflectMethod *) nil_chk(method)) getModifiers])) {
        NSString *name = [method getName];
        NSString *key = @"";
        if ([((NSString *) nil_chk(name)) hasPrefix:@"get"]) {
          if ([name isEqual:@"getClass"] || [name isEqual:@"getDeclaringClass"]) {
            key = @"";
          }
          else {
            key = [name java_substring:3];
          }
        }
        else if ([name hasPrefix:@"is"]) {
          key = [name java_substring:2];
        }
        if (((jint) [((NSString *) nil_chk(key)) length]) > 0 && JavaLangCharacter_isUpperCaseWithChar_([key charAtWithInt:0]) && ((IOSObjectArray *) nil_chk([method getParameterTypes]))->size_ == 0) {
          if (((jint) [key length]) == 1) {
            key = [key lowercaseString];
          }
          else if (!JavaLangCharacter_isUpperCaseWithChar_([key charAtWithInt:1])) {
            key = JreStrcat("$$", [((NSString *) nil_chk([key java_substring:0 endIndex:1])) lowercaseString], [key java_substring:1]);
          }
          id result = [method invokeWithId:bean withNSObjectArray:nil];
          if (result != nil) {
            [((id<JavaUtilMap>) nil_chk(self->map_)) putWithId:key withId:OrgJsonJSONObject_wrapWithId_(result)];
          }
        }
      }
    }
    @catch (JavaLangException *ignore) {
    }
  }
}

NSString *OrgJsonJSONObject_quoteWithNSString_(NSString *string) {
  OrgJsonJSONObject_initialize();
  if (string == nil || ((jint) [string length]) == 0) {
    return @"\"\"";
  }
  jchar b;
  jchar c = 0;
  NSString *hhhh;
  jint i;
  jint len = ((jint) [string length]);
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_(len + 4);
  [sb appendWithChar:'"'];
  for (i = 0; i < len; i += 1) {
    b = c;
    c = [string charAtWithInt:i];
    switch (c) {
      case '\\':
      case '"':
      [sb appendWithChar:'\\'];
      [sb appendWithChar:c];
      break;
      case '/':
      if (b == '<') {
        [sb appendWithChar:'\\'];
      }
      [sb appendWithChar:c];
      break;
      case 0x0008:
      [sb appendWithNSString:@"\\b"];
      break;
      case 0x0009:
      [sb appendWithNSString:@"\\t"];
      break;
      case 0x000a:
      [sb appendWithNSString:@"\\n"];
      break;
      case 0x000c:
      [sb appendWithNSString:@"\\f"];
      break;
      case 0x000d:
      [sb appendWithNSString:@"\\r"];
      break;
      default:
      if (c < ' ' || (c >= 0x0080 && c < 0x00a0) || (c >= 0x2000 && c < 0x2100)) {
        hhhh = JreStrcat("$$", @"000", JavaLangInteger_toHexStringWithInt_(c));
        [sb appendWithNSString:JreStrcat("$$", @"\\u", [hhhh java_substring:((jint) [hhhh length]) - 4])];
      }
      else {
        [sb appendWithChar:c];
      }
    }
  }
  [sb appendWithChar:'"'];
  return [sb description];
}

id OrgJsonJSONObject_stringToValueWithNSString_(NSString *string) {
  OrgJsonJSONObject_initialize();
  if ([((NSString *) nil_chk(string)) isEqual:@""]) {
    return string;
  }
  if ([string java_equalsIgnoreCase:@"true"]) {
    return JreLoadStatic(JavaLangBoolean, TRUE);
  }
  if ([string java_equalsIgnoreCase:@"false"]) {
    return JreLoadStatic(JavaLangBoolean, FALSE);
  }
  if ([string java_equalsIgnoreCase:@"null"]) {
    return OrgJsonJSONObject_NULL;
  }
  jchar b = [string charAtWithInt:0];
  if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {
    if (b == '0' && ((jint) [string length]) > 2 && ([string charAtWithInt:1] == 'x' || [string charAtWithInt:1] == 'X')) {
      @try {
        return create_JavaLangInteger_initWithInt_(JavaLangInteger_parseIntWithNSString_withInt_([string java_substring:2], 16));
      }
      @catch (JavaLangException *ignore) {
      }
    }
    @try {
      if ([string java_indexOf:'.'] > -1 || [string java_indexOf:'e'] > -1 || [string java_indexOf:'E'] > -1) {
        return JavaLangDouble_valueOfWithNSString_(string);
      }
      else {
        JavaLangLong *myLong = create_JavaLangLong_initWithNSString_(string);
        if ([myLong longLongValue] == [myLong intValue]) {
          return create_JavaLangInteger_initWithInt_([myLong intValue]);
        }
        else {
          return myLong;
        }
      }
    }
    @catch (JavaLangException *ignore) {
    }
  }
  return string;
}

void OrgJsonJSONObject_testValidityWithId_(id o) {
  OrgJsonJSONObject_initialize();
  if (o != nil) {
    if ([o isKindOfClass:[JavaLangDouble class]]) {
      if ([((JavaLangDouble *) cast_chk(o, [JavaLangDouble class])) isInfinite] || [((JavaLangDouble *) cast_chk(o, [JavaLangDouble class])) isNaN]) {
        @throw create_OrgJsonJSONException_initWithNSString_(@"JSON does not allow non-finite numbers.");
      }
    }
    else if ([o isKindOfClass:[JavaLangFloat class]]) {
      if ([((JavaLangFloat *) cast_chk(o, [JavaLangFloat class])) isInfinite] || [((JavaLangFloat *) cast_chk(o, [JavaLangFloat class])) isNaN]) {
        @throw create_OrgJsonJSONException_initWithNSString_(@"JSON does not allow non-finite numbers.");
      }
    }
  }
}

NSString *OrgJsonJSONObject_valueToStringWithId_(id value) {
  OrgJsonJSONObject_initialize();
  if (value == nil || [value isEqual:nil]) {
    return @"null";
  }
  if ([OrgJsonJSONString_class_() isInstance:value]) {
    id object;
    @try {
      object = [((id<OrgJsonJSONString>) cast_check(value, OrgJsonJSONString_class_())) toJSONString];
    }
    @catch (JavaLangException *e) {
      @throw create_OrgJsonJSONException_initWithNSException_(e);
    }
    if ([object isKindOfClass:[NSString class]]) {
      return (NSString *) cast_chk(object, [NSString class]);
    }
    @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$@", @"Bad value from toJSONString: ", object));
  }
  if ([value isKindOfClass:[NSNumber class]]) {
    return OrgJsonJSONObject_numberToStringWithNSNumber_((NSNumber *) cast_chk(value, [NSNumber class]));
  }
  if ([value isKindOfClass:[JavaLangBoolean class]] || [value isKindOfClass:[OrgJsonJSONObject class]] || [value isKindOfClass:[OrgJsonJSONArray class]]) {
    return [value description];
  }
  if ([JavaUtilMap_class_() isInstance:value]) {
    return [create_OrgJsonJSONObject_initWithJavaUtilMap_((id<JavaUtilMap>) cast_check(value, JavaUtilMap_class_())) description];
  }
  if ([JavaUtilCollection_class_() isInstance:value]) {
    return [create_OrgJsonJSONArray_initWithJavaUtilCollection_((id<JavaUtilCollection>) cast_check(value, JavaUtilCollection_class_())) description];
  }
  if ([[value java_getClass] isArray]) {
    return [create_OrgJsonJSONArray_initWithId_(value) description];
  }
  return OrgJsonJSONObject_quoteWithNSString_([value description]);
}

NSString *OrgJsonJSONObject_valueToStringWithId_withInt_withInt_(id value, jint indentFactor, jint indent) {
  OrgJsonJSONObject_initialize();
  if (value == nil || [value isEqual:nil]) {
    return @"null";
  }
  @try {
    if ([OrgJsonJSONString_class_() isInstance:value]) {
      id o = [((id<OrgJsonJSONString>) cast_check(value, OrgJsonJSONString_class_())) toJSONString];
      if ([o isKindOfClass:[NSString class]]) {
        return (NSString *) cast_chk(o, [NSString class]);
      }
    }
  }
  @catch (JavaLangException *ignore) {
  }
  if ([value isKindOfClass:[NSNumber class]]) {
    return OrgJsonJSONObject_numberToStringWithNSNumber_((NSNumber *) cast_chk(value, [NSNumber class]));
  }
  if ([value isKindOfClass:[JavaLangBoolean class]]) {
    return [value description];
  }
  if ([value isKindOfClass:[OrgJsonJSONObject class]]) {
    return [((OrgJsonJSONObject *) cast_chk(value, [OrgJsonJSONObject class])) toStringWithInt:indentFactor withInt:indent];
  }
  if ([value isKindOfClass:[OrgJsonJSONArray class]]) {
    return [((OrgJsonJSONArray *) cast_chk(value, [OrgJsonJSONArray class])) toStringWithInt:indentFactor withInt:indent];
  }
  if ([JavaUtilMap_class_() isInstance:value]) {
    return [create_OrgJsonJSONObject_initWithJavaUtilMap_((id<JavaUtilMap>) cast_check(value, JavaUtilMap_class_())) toStringWithInt:indentFactor withInt:indent];
  }
  if ([JavaUtilCollection_class_() isInstance:value]) {
    return [create_OrgJsonJSONArray_initWithJavaUtilCollection_((id<JavaUtilCollection>) cast_check(value, JavaUtilCollection_class_())) toStringWithInt:indentFactor withInt:indent];
  }
  if ([[value java_getClass] isArray]) {
    return [create_OrgJsonJSONArray_initWithId_(value) toStringWithInt:indentFactor withInt:indent];
  }
  return OrgJsonJSONObject_quoteWithNSString_([value description]);
}

id OrgJsonJSONObject_wrapWithId_(id object) {
  OrgJsonJSONObject_initialize();
  @try {
    if (object == nil) {
      return OrgJsonJSONObject_NULL;
    }
    if ([object isKindOfClass:[OrgJsonJSONObject class]] || [object isKindOfClass:[OrgJsonJSONArray class]] || [nil_chk(OrgJsonJSONObject_NULL) isEqual:object] || [OrgJsonJSONString_class_() isInstance:object] || [object isKindOfClass:[JavaLangByte class]] || [object isKindOfClass:[JavaLangCharacter class]] || [object isKindOfClass:[JavaLangShort class]] || [object isKindOfClass:[JavaLangInteger class]] || [object isKindOfClass:[JavaLangLong class]] || [object isKindOfClass:[JavaLangBoolean class]] || [object isKindOfClass:[JavaLangFloat class]] || [object isKindOfClass:[JavaLangDouble class]] || [object isKindOfClass:[NSString class]]) {
      return object;
    }
    if ([JavaUtilCollection_class_() isInstance:object]) {
      return create_OrgJsonJSONArray_initWithJavaUtilCollection_((id<JavaUtilCollection>) cast_check(object, JavaUtilCollection_class_()));
    }
    if ([[object java_getClass] isArray]) {
      return create_OrgJsonJSONArray_initWithId_(object);
    }
    if ([JavaUtilMap_class_() isInstance:object]) {
      return create_OrgJsonJSONObject_initWithJavaUtilMap_((id<JavaUtilMap>) cast_check(object, JavaUtilMap_class_()));
    }
    JavaLangPackage *objectPackage = [[object java_getClass] getPackage];
    NSString *objectPackageName = (objectPackage != nil ? [objectPackage getName] : @"");
    if ([objectPackageName hasPrefix:@"java."] || [objectPackageName hasPrefix:@"javax."] || [[object java_getClass] getClassLoader] == nil) {
      return [object description];
    }
    return create_OrgJsonJSONObject_initWithId_(object);
  }
  @catch (JavaLangException *exception) {
    return nil;
  }
}

NSString *OrgJsonJSONObject_valueToReasonableStringWithId_(id value) {
  OrgJsonJSONObject_initialize();
  if (value == nil || [value isEqual:nil]) {
    return @"null";
  }
  if ([OrgJsonJSONString_class_() isInstance:value]) {
    id object;
    @try {
      object = [((id<OrgJsonJSONString>) cast_check(value, OrgJsonJSONString_class_())) description];
    }
    @catch (JavaLangException *e) {
      @throw create_OrgJsonJSONException_initWithNSException_(e);
    }
    if ([object isKindOfClass:[NSString class]]) {
      return (NSString *) cast_chk(object, [NSString class]);
    }
    @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$@", @"Bad value from toJSONString: ", object));
  }
  if ([value isKindOfClass:[NSNumber class]]) {
    return OrgJsonJSONObject_numberToStringWithNSNumber_((NSNumber *) cast_chk(value, [NSNumber class]));
  }
  if ([value isKindOfClass:[JavaLangBoolean class]]) {
    return [value description];
  }
  if ([value isKindOfClass:[OrgJsonJSONObject class]]) {
    return [((OrgJsonJSONObject *) cast_chk(value, [OrgJsonJSONObject class])) toReasonableString];
  }
  if ([value isKindOfClass:[OrgJsonJSONArray class]]) {
    return [((OrgJsonJSONArray *) cast_chk(value, [OrgJsonJSONArray class])) toReasonableString];
  }
  if ([JavaUtilMap_class_() isInstance:value]) {
    return [create_OrgJsonJSONObject_initWithJavaUtilMap_((id<JavaUtilMap>) cast_check(value, JavaUtilMap_class_())) toReasonableString];
  }
  if ([JavaUtilCollection_class_() isInstance:value]) {
    return [create_OrgJsonJSONArray_initWithJavaUtilCollection_((id<JavaUtilCollection>) cast_check(value, JavaUtilCollection_class_())) toReasonableString];
  }
  if ([[value java_getClass] isArray]) {
    return [create_OrgJsonJSONArray_initWithId_(value) toReasonableString];
  }
  return OrgJsonJSONObject_quoteWithNSString_([value description]);
}

NSString *OrgJsonJSONObject_ellipsizeWithNSString_withInt_(NSString *text, jint max) {
  OrgJsonJSONObject_initialize();
  return JreStrcat("$$I$", [((NSString *) nil_chk(text)) java_substring:0 endIndex:max - OrgJsonJSONObject_explanationSize], @" [", (((jint) [text length]) - max), @" more chars] ...");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsonJSONObject)

@implementation OrgJsonJSONObject_Null

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsonJSONObject_Null_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)java_clone {
  return self;
}

- (jboolean)isEqual:(id)object {
  return object == nil || object == self;
}

- (NSString *)description {
  return @"null";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x14, 0, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(java_clone);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clone", "equals", "LNSObject;", "toString", "LOrgJsonJSONObject;" };
  static const J2ObjcClassInfo _OrgJsonJSONObject_Null = { "Null", "org.json", ptrTable, methods, NULL, 7, 0x1a, 4, 0, 4, -1, -1, -1, -1 };
  return &_OrgJsonJSONObject_Null;
}

@end

void OrgJsonJSONObject_Null_init(OrgJsonJSONObject_Null *self) {
  NSObject_init(self);
}

OrgJsonJSONObject_Null *new_OrgJsonJSONObject_Null_init() {
  J2OBJC_NEW_IMPL(OrgJsonJSONObject_Null, init)
}

OrgJsonJSONObject_Null *create_OrgJsonJSONObject_Null_init() {
  J2OBJC_CREATE_IMPL(OrgJsonJSONObject_Null, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsonJSONObject_Null)
