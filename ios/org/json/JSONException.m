//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../gig_ios/src/org/json/JSONException.java
//

#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "org/json/JSONException.h"

@interface OrgJsonJSONException () {
 @public
  NSException *cause_JSONException_;
}

@end

J2OBJC_FIELD_SETTER(OrgJsonJSONException, cause_JSONException_, NSException *)

inline jlong OrgJsonJSONException_get_serialVersionUID();
#define OrgJsonJSONException_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgJsonJSONException, serialVersionUID, jlong)

@implementation OrgJsonJSONException

- (instancetype)initWithNSString:(NSString *)message {
  OrgJsonJSONException_initWithNSString_(self, message);
  return self;
}

- (instancetype)initWithNSException:(NSException *)cause {
  OrgJsonJSONException_initWithNSException_(self, cause);
  return self;
}

- (NSException *)getCause {
  return self->cause_JSONException_;
}

- (void)dealloc {
  RELEASE_(cause_JSONException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSException;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSException:);
  methods[2].selector = @selector(getCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgJsonJSONException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "cause_JSONException_", "LNSException;", .constantValue.asLong = 0, 0x2, 2, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSException;", "cause" };
  static const J2ObjcClassInfo _OrgJsonJSONException = { "JSONException", "org.json", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgJsonJSONException;
}

@end

void OrgJsonJSONException_initWithNSString_(OrgJsonJSONException *self, NSString *message) {
  JavaLangException_initWithNSString_(self, message);
}

OrgJsonJSONException *new_OrgJsonJSONException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(OrgJsonJSONException, initWithNSString_, message)
}

OrgJsonJSONException *create_OrgJsonJSONException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(OrgJsonJSONException, initWithNSString_, message)
}

void OrgJsonJSONException_initWithNSException_(OrgJsonJSONException *self, NSException *cause) {
  JavaLangException_initWithNSString_(self, [((NSException *) nil_chk(cause)) getMessage]);
  JreStrongAssign(&self->cause_JSONException_, cause);
}

OrgJsonJSONException *new_OrgJsonJSONException_initWithNSException_(NSException *cause) {
  J2OBJC_NEW_IMPL(OrgJsonJSONException, initWithNSException_, cause)
}

OrgJsonJSONException *create_OrgJsonJSONException_initWithNSException_(NSException *cause) {
  J2OBJC_CREATE_IMPL(OrgJsonJSONException, initWithNSException_, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsonJSONException)
