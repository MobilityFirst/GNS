//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../gig_ios/src/org/json/JSONArray.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Array.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONException.h"
#include "org/json/JSONObject.h"
#include "org/json/JSONTokener.h"

@interface OrgJsonJSONArray () {
 @public
  JavaUtilArrayList *myArrayList_;
}

- (NSString *)joinReasonableWithNSString:(NSString *)separator;

@end

J2OBJC_FIELD_SETTER(OrgJsonJSONArray, myArrayList_, JavaUtilArrayList *)

__attribute__((unused)) static NSString *OrgJsonJSONArray_joinReasonableWithNSString_(OrgJsonJSONArray *self, NSString *separator);

@implementation OrgJsonJSONArray

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsonJSONArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgJsonJSONTokener:(OrgJsonJSONTokener *)x {
  OrgJsonJSONArray_initWithOrgJsonJSONTokener_(self, x);
  return self;
}

- (instancetype)initWithNSString:(NSString *)source {
  OrgJsonJSONArray_initWithNSString_(self, source);
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  OrgJsonJSONArray_initWithJavaUtilCollection_(self, collection);
  return self;
}

- (instancetype)initWithId:(id)array {
  OrgJsonJSONArray_initWithId_(self, array);
  return self;
}

- (id)getWithInt:(jint)index {
  id object = [self optWithInt:index];
  if (object == nil) {
    @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] not found."));
  }
  return object;
}

- (jboolean)getBooleanWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([nil_chk(object) isEqual:JreLoadStatic(JavaLangBoolean, FALSE)] || ([object isKindOfClass:[NSString class]] && [((NSString *) cast_chk(object, [NSString class])) java_equalsIgnoreCase:@"false"])) {
    return false;
  }
  else if ([object isEqual:JreLoadStatic(JavaLangBoolean, TRUE)] || ([object isKindOfClass:[NSString class]] && [((NSString *) cast_chk(object, [NSString class])) java_equalsIgnoreCase:@"true"])) {
    return true;
  }
  @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a boolean."));
}

- (jdouble)getDoubleWithInt:(jint)index {
  id object = [self getWithInt:index];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) cast_chk(object, [NSNumber class])))) doubleValue] : JavaLangDouble_parseDoubleWithNSString_((NSString *) cast_chk(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a number."));
  }
}

- (jint)getIntWithInt:(jint)index {
  id object = [self getWithInt:index];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) cast_chk(object, [NSNumber class])))) intValue] : JavaLangInteger_parseIntWithNSString_((NSString *) cast_chk(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a number."));
  }
}

- (OrgJsonJSONArray *)getJSONArrayWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([object isKindOfClass:[OrgJsonJSONArray class]]) {
    return (OrgJsonJSONArray *) cast_chk(object, [OrgJsonJSONArray class]);
  }
  @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a JSONArray."));
}

- (OrgJsonJSONObject *)getJSONObjectWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([object isKindOfClass:[OrgJsonJSONObject class]]) {
    return (OrgJsonJSONObject *) cast_chk(object, [OrgJsonJSONObject class]);
  }
  @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a JSONObject."));
}

- (jlong)getLongWithInt:(jint)index {
  id object = [self getWithInt:index];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) cast_chk(object, [NSNumber class])))) longLongValue] : JavaLangLong_parseLongWithNSString_((NSString *) cast_chk(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a number."));
  }
}

- (NSString *)getStringWithInt:(jint)index {
  id object = [self getWithInt:index];
  return object == JreLoadStatic(OrgJsonJSONObject, NULL) ? nil : [nil_chk(object) description];
}

- (jboolean)isNullWithInt:(jint)index {
  return [nil_chk(JreLoadStatic(OrgJsonJSONObject, NULL)) isEqual:[self optWithInt:index]];
}

- (NSString *)joinWithNSString:(NSString *)separator {
  jint len = [self length];
  JavaLangStringBuffer *sb = create_JavaLangStringBuffer_init();
  for (jint i = 0; i < len; i += 1) {
    if (i > 0) {
      [sb appendWithNSString:separator];
    }
    [sb appendWithNSString:OrgJsonJSONObject_valueToStringWithId_([((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:i])];
  }
  return [sb description];
}

- (NSString *)toReasonableString {
  @try {
    return JreStrcat("C$C", '[', OrgJsonJSONArray_joinReasonableWithNSString_(self, @","), ']');
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (NSString *)joinReasonableWithNSString:(NSString *)separator {
  return OrgJsonJSONArray_joinReasonableWithNSString_(self, separator);
}

- (jint)length {
  return [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) size];
}

- (id)optWithInt:(jint)index {
  return (index < 0 || index >= [self length]) ? nil : [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:index];
}

- (jboolean)optBooleanWithInt:(jint)index {
  return [self optBooleanWithInt:index withBoolean:false];
}

- (jboolean)optBooleanWithInt:(jint)index
                  withBoolean:(jboolean)defaultValue {
  @try {
    return [self getBooleanWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (jdouble)optDoubleWithInt:(jint)index {
  return [self optDoubleWithInt:index withDouble:JavaLangDouble_NaN];
}

- (jdouble)optDoubleWithInt:(jint)index
                 withDouble:(jdouble)defaultValue {
  @try {
    return [self getDoubleWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (jint)optIntWithInt:(jint)index {
  return [self optIntWithInt:index withInt:0];
}

- (jint)optIntWithInt:(jint)index
              withInt:(jint)defaultValue {
  @try {
    return [self getIntWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (OrgJsonJSONArray *)optJSONArrayWithInt:(jint)index {
  id o = [self optWithInt:index];
  return [o isKindOfClass:[OrgJsonJSONArray class]] ? (OrgJsonJSONArray *) cast_chk(o, [OrgJsonJSONArray class]) : nil;
}

- (OrgJsonJSONObject *)optJSONObjectWithInt:(jint)index {
  id o = [self optWithInt:index];
  return [o isKindOfClass:[OrgJsonJSONObject class]] ? (OrgJsonJSONObject *) cast_chk(o, [OrgJsonJSONObject class]) : nil;
}

- (jlong)optLongWithInt:(jint)index {
  return [self optLongWithInt:index withLong:0];
}

- (jlong)optLongWithInt:(jint)index
               withLong:(jlong)defaultValue {
  @try {
    return [self getLongWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (NSString *)optStringWithInt:(jint)index {
  return [self optStringWithInt:index withNSString:@""];
}

- (NSString *)optStringWithInt:(jint)index
                  withNSString:(NSString *)defaultValue {
  id object = [self optWithInt:index];
  return object != nil ? [object description] : defaultValue;
}

- (OrgJsonJSONArray *)putWithBoolean:(jboolean)value {
  [self putWithId:value ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
  return self;
}

- (OrgJsonJSONArray *)putWithJavaUtilCollection:(id<JavaUtilCollection>)value {
  [self putWithId:create_OrgJsonJSONArray_initWithJavaUtilCollection_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithDouble:(jdouble)value {
  JavaLangDouble *d = create_JavaLangDouble_initWithDouble_(value);
  OrgJsonJSONObject_testValidityWithId_(d);
  [self putWithId:d];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)value {
  [self putWithId:create_JavaLangInteger_initWithInt_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithLong:(jlong)value {
  [self putWithId:create_JavaLangLong_initWithLong_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithJavaUtilMap:(id<JavaUtilMap>)value {
  [self putWithId:create_OrgJsonJSONObject_initWithJavaUtilMap_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithId:(id)value {
  [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:value];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
                     withBoolean:(jboolean)value {
  [self putWithInt:index withId:value ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
          withJavaUtilCollection:(id<JavaUtilCollection>)value {
  [self putWithInt:index withId:create_OrgJsonJSONArray_initWithJavaUtilCollection_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
                      withDouble:(jdouble)value {
  [self putWithInt:index withId:create_JavaLangDouble_initWithDouble_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
                         withInt:(jint)value {
  [self putWithInt:index withId:create_JavaLangInteger_initWithInt_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
                        withLong:(jlong)value {
  [self putWithInt:index withId:create_JavaLangLong_initWithLong_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
                 withJavaUtilMap:(id<JavaUtilMap>)value {
  [self putWithInt:index withId:create_OrgJsonJSONObject_initWithJavaUtilMap_(value)];
  return self;
}

- (OrgJsonJSONArray *)putWithInt:(jint)index
                          withId:(id)value {
  OrgJsonJSONObject_testValidityWithId_(value);
  if (index < 0) {
    @throw create_OrgJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] not found."));
  }
  if (index < [self length]) {
    [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) setWithInt:index withId:value];
  }
  else {
    while (index != [self length]) {
      [self putWithId:JreLoadStatic(OrgJsonJSONObject, NULL)];
    }
    [self putWithId:value];
  }
  return self;
}

- (id)removeWithInt:(jint)index {
  id o = [self optWithInt:index];
  [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) removeWithInt:index];
  return o;
}

- (OrgJsonJSONObject *)toJSONObjectWithOrgJsonJSONArray:(OrgJsonJSONArray *)names {
  if (names == nil || [names length] == 0 || [self length] == 0) {
    return nil;
  }
  OrgJsonJSONObject *jo = create_OrgJsonJSONObject_init();
  for (jint i = 0; i < [names length]; i += 1) {
    [jo putWithNSString:[names getStringWithInt:i] withId:[self optWithInt:i]];
  }
  return jo;
}

- (NSString *)description {
  @try {
    return JreStrcat("C$C", '[', [self joinWithNSString:@","], ']');
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (NSString *)toStringWithInt:(jint)indentFactor {
  return [self toStringWithInt:indentFactor withInt:0];
}

- (NSString *)toStringWithInt:(jint)indentFactor
                      withInt:(jint)indent {
  jint len = [self length];
  if (len == 0) {
    return @"[]";
  }
  jint i;
  JavaLangStringBuffer *sb = create_JavaLangStringBuffer_initWithNSString_(@"[");
  if (len == 1) {
    [sb appendWithNSString:OrgJsonJSONObject_valueToStringWithId_withInt_withInt_([((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:0], indentFactor, indent)];
  }
  else {
    jint newindent = indent + indentFactor;
    [sb appendWithChar:0x000a];
    for (i = 0; i < len; i += 1) {
      if (i > 0) {
        [sb appendWithNSString:@",\n"];
      }
      for (jint j = 0; j < newindent; j += 1) {
        [sb appendWithChar:' '];
      }
      [sb appendWithNSString:OrgJsonJSONObject_valueToStringWithId_withInt_withInt_([((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:i], indentFactor, newindent)];
    }
    [sb appendWithChar:0x000a];
    for (i = 0; i < indent; i += 1) {
      [sb appendWithChar:' '];
    }
  }
  [sb appendWithChar:']'];
  return [sb description];
}

- (JavaIoWriter *)writeWithJavaIoWriter:(JavaIoWriter *)writer {
  @try {
    jboolean b = false;
    jint len = [self length];
    [((JavaIoWriter *) nil_chk(writer)) writeWithInt:'['];
    for (jint i = 0; i < len; i += 1) {
      if (b) {
        [writer writeWithInt:','];
      }
      id v = [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:i];
      if ([v isKindOfClass:[OrgJsonJSONObject class]]) {
        [((OrgJsonJSONObject *) nil_chk(((OrgJsonJSONObject *) cast_chk(v, [OrgJsonJSONObject class])))) writeWithJavaIoWriter:writer];
      }
      else if ([v isKindOfClass:[OrgJsonJSONArray class]]) {
        [((OrgJsonJSONArray *) nil_chk(((OrgJsonJSONArray *) cast_chk(v, [OrgJsonJSONArray class])))) writeWithJavaIoWriter:writer];
      }
      else {
        [writer writeWithNSString:OrgJsonJSONObject_valueToStringWithId_(v)];
      }
      b = true;
    }
    [writer writeWithInt:']'];
    return writer;
  }
  @catch (JavaIoIOException *e) {
    @throw create_OrgJsonJSONException_initWithNSException_(e);
  }
}

- (void)dealloc {
  RELEASE_(myArrayList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 6, 1, -1, -1, -1 },
    { NULL, "D", 0x1, 8, 6, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 6, 1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 10, 6, 1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 11, 6, 1, -1, -1, -1 },
    { NULL, "J", 0x1, 12, 6, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, 6, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, 2, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 16, 2, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 20, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 24, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 25, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 26, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 28, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 3, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 32, 1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 33, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 34, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 4, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 19, 1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 35, 1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 21, 1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 23, 1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 27, 1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 36, 1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x1, 30, 37, 1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 38, 6, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x1, 39, 40, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 41, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 41, 6, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 41, 23, 1, -1, -1, -1 },
    { NULL, "LJavaIoWriter;", 0x1, 42, 43, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgJsonJSONTokener:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithJavaUtilCollection:);
  methods[4].selector = @selector(initWithId:);
  methods[5].selector = @selector(getWithInt:);
  methods[6].selector = @selector(getBooleanWithInt:);
  methods[7].selector = @selector(getDoubleWithInt:);
  methods[8].selector = @selector(getIntWithInt:);
  methods[9].selector = @selector(getJSONArrayWithInt:);
  methods[10].selector = @selector(getJSONObjectWithInt:);
  methods[11].selector = @selector(getLongWithInt:);
  methods[12].selector = @selector(getStringWithInt:);
  methods[13].selector = @selector(isNullWithInt:);
  methods[14].selector = @selector(joinWithNSString:);
  methods[15].selector = @selector(toReasonableString);
  methods[16].selector = @selector(joinReasonableWithNSString:);
  methods[17].selector = @selector(length);
  methods[18].selector = @selector(optWithInt:);
  methods[19].selector = @selector(optBooleanWithInt:);
  methods[20].selector = @selector(optBooleanWithInt:withBoolean:);
  methods[21].selector = @selector(optDoubleWithInt:);
  methods[22].selector = @selector(optDoubleWithInt:withDouble:);
  methods[23].selector = @selector(optIntWithInt:);
  methods[24].selector = @selector(optIntWithInt:withInt:);
  methods[25].selector = @selector(optJSONArrayWithInt:);
  methods[26].selector = @selector(optJSONObjectWithInt:);
  methods[27].selector = @selector(optLongWithInt:);
  methods[28].selector = @selector(optLongWithInt:withLong:);
  methods[29].selector = @selector(optStringWithInt:);
  methods[30].selector = @selector(optStringWithInt:withNSString:);
  methods[31].selector = @selector(putWithBoolean:);
  methods[32].selector = @selector(putWithJavaUtilCollection:);
  methods[33].selector = @selector(putWithDouble:);
  methods[34].selector = @selector(putWithInt:);
  methods[35].selector = @selector(putWithLong:);
  methods[36].selector = @selector(putWithJavaUtilMap:);
  methods[37].selector = @selector(putWithId:);
  methods[38].selector = @selector(putWithInt:withBoolean:);
  methods[39].selector = @selector(putWithInt:withJavaUtilCollection:);
  methods[40].selector = @selector(putWithInt:withDouble:);
  methods[41].selector = @selector(putWithInt:withInt:);
  methods[42].selector = @selector(putWithInt:withLong:);
  methods[43].selector = @selector(putWithInt:withJavaUtilMap:);
  methods[44].selector = @selector(putWithInt:withId:);
  methods[45].selector = @selector(removeWithInt:);
  methods[46].selector = @selector(toJSONObjectWithOrgJsonJSONArray:);
  methods[47].selector = @selector(description);
  methods[48].selector = @selector(toStringWithInt:);
  methods[49].selector = @selector(toStringWithInt:withInt:);
  methods[50].selector = @selector(writeWithJavaIoWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "myArrayList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgJsonJSONTokener;", "LOrgJsonJSONException;", "LNSString;", "LJavaUtilCollection;", "LNSObject;", "get", "I", "getBoolean", "getDouble", "getInt", "getJSONArray", "getJSONObject", "getLong", "getString", "isNull", "join", "joinReasonable", "opt", "optBoolean", "IZ", "optDouble", "ID", "optInt", "II", "optJSONArray", "optJSONObject", "optLong", "IJ", "optString", "ILNSString;", "put", "Z", "D", "J", "LJavaUtilMap;", "ILJavaUtilCollection;", "ILJavaUtilMap;", "ILNSObject;", "remove", "toJSONObject", "LOrgJsonJSONArray;", "toString", "write", "LJavaIoWriter;" };
  static const J2ObjcClassInfo _OrgJsonJSONArray = { "JSONArray", "org.json", ptrTable, methods, fields, 7, 0x1, 51, 1, -1, -1, -1, -1, -1 };
  return &_OrgJsonJSONArray;
}

@end

void OrgJsonJSONArray_init(OrgJsonJSONArray *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->myArrayList_, new_JavaUtilArrayList_init());
}

OrgJsonJSONArray *new_OrgJsonJSONArray_init() {
  J2OBJC_NEW_IMPL(OrgJsonJSONArray, init)
}

OrgJsonJSONArray *create_OrgJsonJSONArray_init() {
  J2OBJC_CREATE_IMPL(OrgJsonJSONArray, init)
}

void OrgJsonJSONArray_initWithOrgJsonJSONTokener_(OrgJsonJSONArray *self, OrgJsonJSONTokener *x) {
  OrgJsonJSONArray_init(self);
  if ([((OrgJsonJSONTokener *) nil_chk(x)) nextClean] != '[') {
    @throw [x syntaxErrorWithNSString:@"A JSONArray text must start with '['"];
  }
  if ([x nextClean] != ']') {
    [x back];
    for (; ; ) {
      if ([x nextClean] == ',') {
        [x back];
        [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:JreLoadStatic(OrgJsonJSONObject, NULL)];
      }
      else {
        [x back];
        [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:[x nextValue]];
      }
      switch ([x nextClean]) {
        case ';':
        case ',':
        if ([x nextClean] == ']') {
          return;
        }
        [x back];
        break;
        case ']':
        return;
        default:
        @throw [x syntaxErrorWithNSString:@"Expected a ',' or ']'"];
      }
    }
  }
}

OrgJsonJSONArray *new_OrgJsonJSONArray_initWithOrgJsonJSONTokener_(OrgJsonJSONTokener *x) {
  J2OBJC_NEW_IMPL(OrgJsonJSONArray, initWithOrgJsonJSONTokener_, x)
}

OrgJsonJSONArray *create_OrgJsonJSONArray_initWithOrgJsonJSONTokener_(OrgJsonJSONTokener *x) {
  J2OBJC_CREATE_IMPL(OrgJsonJSONArray, initWithOrgJsonJSONTokener_, x)
}

void OrgJsonJSONArray_initWithNSString_(OrgJsonJSONArray *self, NSString *source) {
  OrgJsonJSONArray_initWithOrgJsonJSONTokener_(self, create_OrgJsonJSONTokener_initWithNSString_(source));
}

OrgJsonJSONArray *new_OrgJsonJSONArray_initWithNSString_(NSString *source) {
  J2OBJC_NEW_IMPL(OrgJsonJSONArray, initWithNSString_, source)
}

OrgJsonJSONArray *create_OrgJsonJSONArray_initWithNSString_(NSString *source) {
  J2OBJC_CREATE_IMPL(OrgJsonJSONArray, initWithNSString_, source)
}

void OrgJsonJSONArray_initWithJavaUtilCollection_(OrgJsonJSONArray *self, id<JavaUtilCollection> collection) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->myArrayList_, new_JavaUtilArrayList_init());
  if (collection != nil) {
    id<JavaUtilIterator> iter = [collection iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:OrgJsonJSONObject_wrapWithId_([iter next])];
    }
  }
}

OrgJsonJSONArray *new_OrgJsonJSONArray_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  J2OBJC_NEW_IMPL(OrgJsonJSONArray, initWithJavaUtilCollection_, collection)
}

OrgJsonJSONArray *create_OrgJsonJSONArray_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  J2OBJC_CREATE_IMPL(OrgJsonJSONArray, initWithJavaUtilCollection_, collection)
}

void OrgJsonJSONArray_initWithId_(OrgJsonJSONArray *self, id array) {
  OrgJsonJSONArray_init(self);
  if ([[nil_chk(array) java_getClass] isArray]) {
    jint length = JavaLangReflectArray_getLengthWithId_(array);
    for (jint i = 0; i < length; i += 1) {
      [self putWithId:OrgJsonJSONObject_wrapWithId_(JavaLangReflectArray_getWithId_withInt_(array, i))];
    }
  }
  else {
    @throw create_OrgJsonJSONException_initWithNSString_(@"JSONArray initial value should be a string or collection or array.");
  }
}

OrgJsonJSONArray *new_OrgJsonJSONArray_initWithId_(id array) {
  J2OBJC_NEW_IMPL(OrgJsonJSONArray, initWithId_, array)
}

OrgJsonJSONArray *create_OrgJsonJSONArray_initWithId_(id array) {
  J2OBJC_CREATE_IMPL(OrgJsonJSONArray, initWithId_, array)
}

NSString *OrgJsonJSONArray_joinReasonableWithNSString_(OrgJsonJSONArray *self, NSString *separator) {
  jint len = [self length];
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  for (jint i = 0; i < len; i += 1) {
    if (i > 100) {
      [sb appendWithNSString:JreStrcat("$I$", @" [", (len - i), @" more elements] ...")];
      return [sb description];
    }
    if (i > 0) {
      [sb appendWithNSString:separator];
    }
    [sb appendWithNSString:OrgJsonJSONObject_valueToReasonableStringWithId_([((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:i])];
  }
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsonJSONArray)
