//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../gig_ios/src/edu/umass/cs/gigapaxos/testing/TESTPaxosConfig.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/umass/cs/gigapaxos/PaxosConfig.h"
#include "edu/umass/cs/gigapaxos/testing/TESTPaxosConfig.h"
#include "edu/umass/cs/nio/interfaces/NodeConfig.h"
#include "edu/umass/cs/nio/nioutils/SampleNodeConfig.h"
#include "edu/umass/cs/utils/Config.h"
#include "edu/umass/cs/utils/Util.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/Inet4Address.h"
#include "java/net/InetAddress.h"
#include "java/net/NetworkInterface.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "java/util/logging/Level.h"
#include "org/json/JSONArray.h"

@interface EduUmassCsGigapaxosTestingTESTPaxosConfig ()

+ (void)configTestWithBoolean:(jboolean)distributed;

+ (void)setupGroups;

+ (void)loadServersFromFile;

@end

inline jint EduUmassCsGigapaxosTestingTESTPaxosConfig_get_MAX_TEST_REQS();
#define EduUmassCsGigapaxosTestingTESTPaxosConfig_MAX_TEST_REQS 1000000
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsGigapaxosTestingTESTPaxosConfig, MAX_TEST_REQS, jint)

inline jint EduUmassCsGigapaxosTestingTESTPaxosConfig_get_RANDOM_SEED();
#define EduUmassCsGigapaxosTestingTESTPaxosConfig_RANDOM_SEED 3142
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsGigapaxosTestingTESTPaxosConfig, RANDOM_SEED, jint)

inline jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_get_assertRSMInvariant();
inline jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_set_assertRSMInvariant(jboolean value);
inline jboolean *EduUmassCsGigapaxosTestingTESTPaxosConfig_getRef_assertRSMInvariant();
static jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_assertRSMInvariant = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduUmassCsGigapaxosTestingTESTPaxosConfig, assertRSMInvariant, jboolean)

inline EduUmassCsNioNioutilsSampleNodeConfig *EduUmassCsGigapaxosTestingTESTPaxosConfig_get_nodeConfig();
static EduUmassCsNioNioutilsSampleNodeConfig *EduUmassCsGigapaxosTestingTESTPaxosConfig_nodeConfig;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduUmassCsGigapaxosTestingTESTPaxosConfig, nodeConfig, EduUmassCsNioNioutilsSampleNodeConfig *)

inline JavaUtilHashMap *EduUmassCsGigapaxosTestingTESTPaxosConfig_get_groups();
static JavaUtilHashMap *EduUmassCsGigapaxosTestingTESTPaxosConfig_groups;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduUmassCsGigapaxosTestingTESTPaxosConfig, groups, JavaUtilHashMap *)

inline IOSIntArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_get_defaultGroup();
inline IOSIntArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_set_defaultGroup(IOSIntArray *value);
static IOSIntArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup;
J2OBJC_STATIC_FIELD_OBJ(EduUmassCsGigapaxosTestingTESTPaxosConfig, defaultGroup, IOSIntArray *)

inline jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_get_reply_to_client();
inline jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_set_reply_to_client(jboolean value);
inline jboolean *EduUmassCsGigapaxosTestingTESTPaxosConfig_getRef_reply_to_client();
static jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_reply_to_client = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduUmassCsGigapaxosTestingTESTPaxosConfig, reply_to_client, jboolean)

inline jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_get_clean_db();
inline jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_set_clean_db(jboolean value);
inline jboolean *EduUmassCsGigapaxosTestingTESTPaxosConfig_getRef_clean_db();
static jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_clean_db;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduUmassCsGigapaxosTestingTESTPaxosConfig, clean_db, jboolean)

inline JavaUtilArrayList *EduUmassCsGigapaxosTestingTESTPaxosConfig_get_failedNodes();
inline JavaUtilArrayList *EduUmassCsGigapaxosTestingTESTPaxosConfig_set_failedNodes(JavaUtilArrayList *value);
static JavaUtilArrayList *EduUmassCsGigapaxosTestingTESTPaxosConfig_failedNodes;
J2OBJC_STATIC_FIELD_OBJ(EduUmassCsGigapaxosTestingTESTPaxosConfig, failedNodes, JavaUtilArrayList *)

inline IOSBooleanArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_get_committed();
inline IOSBooleanArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_set_committed(IOSBooleanArray *value);
static IOSBooleanArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_committed;
J2OBJC_STATIC_FIELD_OBJ(EduUmassCsGigapaxosTestingTESTPaxosConfig, committed, IOSBooleanArray *)

inline IOSBooleanArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_get_executedAtAll();
inline IOSBooleanArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_set_executedAtAll(IOSBooleanArray *value);
static IOSBooleanArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_executedAtAll;
J2OBJC_STATIC_FIELD_OBJ(EduUmassCsGigapaxosTestingTESTPaxosConfig, executedAtAll, IOSBooleanArray *)

inline IOSBooleanArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_get_recovered();
inline IOSBooleanArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_set_recovered(IOSBooleanArray *value);
static IOSBooleanArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_recovered;
J2OBJC_STATIC_FIELD_OBJ(EduUmassCsGigapaxosTestingTESTPaxosConfig, recovered, IOSBooleanArray *)

__attribute__((unused)) static void EduUmassCsGigapaxosTestingTESTPaxosConfig_configTestWithBoolean_(jboolean distributed);

__attribute__((unused)) static void EduUmassCsGigapaxosTestingTESTPaxosConfig_setupGroups();

__attribute__((unused)) static void EduUmassCsGigapaxosTestingTESTPaxosConfig_loadServersFromFile();

__attribute__((unused)) static IOSObjectArray *EduUmassCsGigapaxosTestingTESTPaxosConfig__Annotations$0();

__attribute__((unused)) static IOSObjectArray *EduUmassCsGigapaxosTestingTESTPaxosConfig__Annotations$1();

__attribute__((unused)) static IOSObjectArray *EduUmassCsGigapaxosTestingTESTPaxosConfig__Annotations$2();

__attribute__((unused)) static IOSObjectArray *EduUmassCsGigapaxosTestingTESTPaxosConfig__Annotations$3();

__attribute__((unused)) static void EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC *self, id defaultValue, NSString *__name, jint __ordinal);

@interface EduUmassCsGigapaxosTestingTESTPaxosConfig_1 : NSObject < EduUmassCsNioInterfacesNodeConfig > {
 @public
  id<EduUmassCsNioInterfacesNodeConfig> val$defaultNC_;
  jboolean val$clientFacing_;
  jint clientPortOffset_;
}

- (instancetype)initWithEduUmassCsNioInterfacesNodeConfig:(id<EduUmassCsNioInterfacesNodeConfig>)capture$0
                                              withBoolean:(jboolean)capture$1;

- (JavaLangInteger *)valueOfWithNSString:(NSString *)strValue;

- (id<JavaUtilSet>)getValuesFromStringSetWithJavaUtilSet:(id<JavaUtilSet>)strNodes;

- (id<JavaUtilSet>)getValuesFromJSONArrayWithOrgJsonJSONArray:(OrgJsonJSONArray *)array;

- (jboolean)nodeExistsWithId:(JavaLangInteger *)id_;

- (JavaNetInetAddress *)getNodeAddressWithId:(JavaLangInteger *)id_;

- (JavaNetInetAddress *)getBindAddressWithId:(JavaLangInteger *)id_;

- (jint)getNodePortWithId:(JavaLangInteger *)id_;

- (id<JavaUtilSet>)getNodeIDs;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUmassCsGigapaxosTestingTESTPaxosConfig_1)

__attribute__((unused)) static void EduUmassCsGigapaxosTestingTESTPaxosConfig_1_initWithEduUmassCsNioInterfacesNodeConfig_withBoolean_(EduUmassCsGigapaxosTestingTESTPaxosConfig_1 *self, id<EduUmassCsNioInterfacesNodeConfig> capture$0, jboolean capture$1);

__attribute__((unused)) static EduUmassCsGigapaxosTestingTESTPaxosConfig_1 *new_EduUmassCsGigapaxosTestingTESTPaxosConfig_1_initWithEduUmassCsNioInterfacesNodeConfig_withBoolean_(id<EduUmassCsNioInterfacesNodeConfig> capture$0, jboolean capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsGigapaxosTestingTESTPaxosConfig_1 *create_EduUmassCsGigapaxosTestingTESTPaxosConfig_1_initWithEduUmassCsNioInterfacesNodeConfig_withBoolean_(id<EduUmassCsNioInterfacesNodeConfig> capture$0, jboolean capture$1);

J2OBJC_INITIALIZED_DEFN(EduUmassCsGigapaxosTestingTESTPaxosConfig)

NSString *EduUmassCsGigapaxosTestingTESTPaxosConfig_TESTING_CONFIG_FILE_KEY = @"testingConfig";
NSString *EduUmassCsGigapaxosTestingTESTPaxosConfig_DEFAULT_TESTING_CONFIG_FILE = @"testing.properties";

@implementation EduUmassCsGigapaxosTestingTESTPaxosConfig

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)load__ {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_load__();
}

+ (void)setSingleNodeTest {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setSingleNodeTest();
}

+ (void)setDistribtedTest {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setDistribtedTest();
}

+ (void)configTestWithBoolean:(jboolean)distributed {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_configTestWithBoolean_(distributed);
}

+ (jboolean)shouldAssertRSMInvariant {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_shouldAssertRSMInvariant();
}

+ (void)setAssertRSMInvariantWithBoolean:(jboolean)b {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setAssertRSMInvariantWithBoolean_(b);
}

+ (void)setupGroups {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setupGroups();
}

+ (void)setCleanDBWithBoolean:(jboolean)b {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setCleanDBWithBoolean_(b);
}

+ (jboolean)getCleanDB {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getCleanDB();
}

+ (id<JavaUtilSet>)getNodes {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getNodes();
}

+ (void)setSendReplyToClientWithBoolean:(jboolean)b {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setSendReplyToClientWithBoolean_(b);
}

+ (jboolean)getSendReplyToClient {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getSendReplyToClient();
}

+ (void)setDefaultGroupsWithInt:(jint)numGroups {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setDefaultGroupsWithInt_(numGroups);
}

+ (void)setRandomGroupsWithInt:(jint)numGroups {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setRandomGroupsWithInt_(numGroups);
}

+ (jboolean)shouldCleanDBWithNSStringArray:(IOSObjectArray *)args {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_shouldCleanDBWithNSStringArray_(args);
}

+ (NSString *)getConfDirArgWithNSStringArray:(IOSObjectArray *)args {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getConfDirArgWithNSStringArray_(args);
}

+ (void)setGroupWithNSString:(NSString *)groupID
             withJavaUtilSet:(id<JavaUtilSet>)members {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setGroupWithNSString_withJavaUtilSet_(groupID, members);
}

+ (void)setGroupWithNSString:(NSString *)groupID
                withIntArray:(IOSIntArray *)members {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setGroupWithNSString_withIntArray_(groupID, members);
}

+ (IOSIntArray *)getDefaultGroup {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getDefaultGroup();
}

+ (id<JavaUtilSet>)getDefaultGroupSet {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getDefaultGroupSet();
}

+ (IOSIntArray *)getGroupWithNSString:(NSString *)groupID {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getGroupWithNSString_(groupID);
}

+ (IOSIntArray *)getGroupWithInt:(jint)groupID {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getGroupWithInt_(groupID);
}

+ (NSString *)getGroupNameWithInt:(jint)groupID {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getGroupNameWithInt_(groupID);
}

+ (id<JavaUtilCollection>)getGroups {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getGroups();
}

+ (void)createGroupWithNSString:(NSString *)groupID
                   withIntArray:(IOSIntArray *)members {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_createGroupWithNSString_withIntArray_(groupID, members);
}

+ (EduUmassCsNioNioutilsSampleNodeConfig *)getNodeConfig {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getNodeConfig();
}

+ (void)crashWithInt:(jint)nodeID {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_crashWithInt_(nodeID);
}

+ (void)recoverWithInt:(jint)nodeID {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_recoverWithInt_(nodeID);
}

+ (jboolean)isCrashedWithId:(id)nodeID {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_isCrashedWithId_(nodeID);
}

+ (void)setRecoveredWithInt:(jint)id_
               withNSString:(NSString *)paxosID
                withBoolean:(jboolean)b {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setRecoveredWithInt_withNSString_withBoolean_(id_, paxosID, b);
}

+ (jboolean)getRecoveredWithInt:(jint)id_
                   withNSString:(NSString *)paxosID {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getRecoveredWithInt_withNSString_(id_, paxosID);
}

+ (jboolean)isCommittedWithLong:(jlong)reqnum {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_isCommittedWithLong_(reqnum);
}

+ (void)executeWithLong:(jlong)reqnum {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_executeWithLong_(reqnum);
}

+ (void)commitWithInt:(jint)reqnum {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_commitWithInt_(reqnum);
}

+ (jboolean)findMyIPWithJavaLangInteger:(JavaLangInteger *)myID {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_findMyIPWithJavaLangInteger_(myID);
}

+ (id<EduUmassCsNioInterfacesNodeConfig>)getFromPaxosConfig {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getFromPaxosConfig();
}

+ (id<EduUmassCsNioInterfacesNodeConfig>)getFromPaxosConfigWithBoolean:(jboolean)clientFacing {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getFromPaxosConfigWithBoolean_(clientFacing);
}

+ (void)loadServersFromFile {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_loadServersFromFile();
}

+ (void)setConsoleHandlerWithJavaUtilLoggingLevel:(JavaUtilLoggingLevel *)level {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setConsoleHandlerWithJavaUtilLoggingLevel_(level);
}

+ (void)setConsoleHandler {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setConsoleHandler();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 0, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1c, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1c, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x9, 6, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 9, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x9, 13, 16, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, -1, -1, -1, 5, -1, -1 },
    { NULL, "[I", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 17, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 19, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, -1, -1, -1, 20, -1, -1 },
    { NULL, "V", 0x9, 21, 16, -1, -1, -1, -1 },
    { NULL, "LEduUmassCsNioNioutilsSampleNodeConfig;", 0x9, -1, -1, -1, 22, -1, -1 },
    { NULL, "V", 0x29, 23, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x29, 24, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 27, 28, -1, -1, 29, -1 },
    { NULL, "Z", 0x29, 30, 31, -1, -1, 32, -1 },
    { NULL, "Z", 0x29, 33, 34, -1, -1, 35, -1 },
    { NULL, "V", 0x29, 36, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 37, 8, -1, -1, 38, -1 },
    { NULL, "Z", 0x9, 39, 40, 41, -1, -1, -1 },
    { NULL, "LEduUmassCsNioInterfacesNodeConfig;", 0xc, -1, -1, -1, 42, -1, -1 },
    { NULL, "LEduUmassCsNioInterfacesNodeConfig;", 0x9, 43, 2, -1, 44, -1, -1 },
    { NULL, "V", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0xc, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 47, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(load__);
  methods[2].selector = @selector(setSingleNodeTest);
  methods[3].selector = @selector(setDistribtedTest);
  methods[4].selector = @selector(configTestWithBoolean:);
  methods[5].selector = @selector(shouldAssertRSMInvariant);
  methods[6].selector = @selector(setAssertRSMInvariantWithBoolean:);
  methods[7].selector = @selector(setupGroups);
  methods[8].selector = @selector(setCleanDBWithBoolean:);
  methods[9].selector = @selector(getCleanDB);
  methods[10].selector = @selector(getNodes);
  methods[11].selector = @selector(setSendReplyToClientWithBoolean:);
  methods[12].selector = @selector(getSendReplyToClient);
  methods[13].selector = @selector(setDefaultGroupsWithInt:);
  methods[14].selector = @selector(setRandomGroupsWithInt:);
  methods[15].selector = @selector(shouldCleanDBWithNSStringArray:);
  methods[16].selector = @selector(getConfDirArgWithNSStringArray:);
  methods[17].selector = @selector(setGroupWithNSString:withJavaUtilSet:);
  methods[18].selector = @selector(setGroupWithNSString:withIntArray:);
  methods[19].selector = @selector(getDefaultGroup);
  methods[20].selector = @selector(getDefaultGroupSet);
  methods[21].selector = @selector(getGroupWithNSString:);
  methods[22].selector = @selector(getGroupWithInt:);
  methods[23].selector = @selector(getGroupNameWithInt:);
  methods[24].selector = @selector(getGroups);
  methods[25].selector = @selector(createGroupWithNSString:withIntArray:);
  methods[26].selector = @selector(getNodeConfig);
  methods[27].selector = @selector(crashWithInt:);
  methods[28].selector = @selector(recoverWithInt:);
  methods[29].selector = @selector(isCrashedWithId:);
  methods[30].selector = @selector(setRecoveredWithInt:withNSString:withBoolean:);
  methods[31].selector = @selector(getRecoveredWithInt:withNSString:);
  methods[32].selector = @selector(isCommittedWithLong:);
  methods[33].selector = @selector(executeWithLong:);
  methods[34].selector = @selector(commitWithInt:);
  methods[35].selector = @selector(findMyIPWithJavaLangInteger:);
  methods[36].selector = @selector(getFromPaxosConfig);
  methods[37].selector = @selector(getFromPaxosConfigWithBoolean:);
  methods[38].selector = @selector(loadServersFromFile);
  methods[39].selector = @selector(setConsoleHandlerWithJavaUtilLoggingLevel:);
  methods[40].selector = @selector(setConsoleHandler);
  methods[41].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TESTING_CONFIG_FILE_KEY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "DEFAULT_TESTING_CONFIG_FILE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 49, -1, -1 },
    { "MAX_TEST_REQS", "I", .constantValue.asInt = EduUmassCsGigapaxosTestingTESTPaxosConfig_MAX_TEST_REQS, 0x1a, -1, -1, -1, -1 },
    { "RANDOM_SEED", "I", .constantValue.asInt = EduUmassCsGigapaxosTestingTESTPaxosConfig_RANDOM_SEED, 0x1a, -1, -1, -1, -1 },
    { "MAX_NODE_ID", "I", .constantValue.asInt = EduUmassCsGigapaxosTestingTESTPaxosConfig_MAX_NODE_ID, 0x19, -1, -1, -1, -1 },
    { "assertRSMInvariant", "Z", .constantValue.asLong = 0, 0xa, -1, 50, -1, -1 },
    { "ENABLE_CLIENT_REQ_RTX", "Z", .constantValue.asBOOL = EduUmassCsGigapaxosTestingTESTPaxosConfig_ENABLE_CLIENT_REQ_RTX, 0x19, -1, -1, -1, -1 },
    { "CLIENT_REQ_RTX_TIMEOUT", "J", .constantValue.asLong = EduUmassCsGigapaxosTestingTESTPaxosConfig_CLIENT_REQ_RTX_TIMEOUT, 0x19, -1, -1, -1, -1 },
    { "nodeConfig", "LEduUmassCsNioNioutilsSampleNodeConfig;", .constantValue.asLong = 0, 0x1a, -1, 51, 52, -1 },
    { "groups", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 53, 54, -1 },
    { "defaultGroup", "[I", .constantValue.asLong = 0, 0xa, -1, 55, -1, -1 },
    { "reply_to_client", "Z", .constantValue.asLong = 0, 0xa, -1, 56, -1, -1 },
    { "clean_db", "Z", .constantValue.asLong = 0, 0xa, -1, 57, -1, -1 },
    { "failedNodes", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0xa, -1, 58, 59, -1 },
    { "committed", "[Z", .constantValue.asLong = 0, 0xa, -1, 60, -1, -1 },
    { "executedAtAll", "[Z", .constantValue.asLong = 0, 0xa, -1, 61, -1, -1 },
    { "recovered", "[Z", .constantValue.asLong = 0, 0xa, -1, 62, -1, -1 },
    { "PAXOS_MANAGER_UNIT_TEST", "Z", .constantValue.asBOOL = EduUmassCsGigapaxosTestingTESTPaxosConfig_PAXOS_MANAGER_UNIT_TEST, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "load", "configTest", "Z", "setAssertRSMInvariant", "setCleanDB", "()Ljava/util/Set<Ljava/lang/Integer;>;", "setSendReplyToClient", "setDefaultGroups", "I", "setRandomGroups", "shouldCleanDB", "[LNSString;", "getConfDirArg", "setGroup", "LNSString;LJavaUtilSet;", "(Ljava/lang/String;Ljava/util/Set<Ljava/lang/Integer;>;)V", "LNSString;[I", "getGroup", "LNSString;", "getGroupName", "()Ljava/util/Collection<Ljava/lang/String;>;", "createGroup", "()Ledu/umass/cs/nio/nioutils/SampleNodeConfig<Ljava/lang/Integer;>;", "crash", "recover", "isCrashed", "LNSObject;", "setRecovered", "ILNSString;Z", (void *)&EduUmassCsGigapaxosTestingTESTPaxosConfig__Annotations$0, "getRecovered", "ILNSString;", (void *)&EduUmassCsGigapaxosTestingTESTPaxosConfig__Annotations$1, "isCommitted", "J", (void *)&EduUmassCsGigapaxosTestingTESTPaxosConfig__Annotations$2, "execute", "commit", (void *)&EduUmassCsGigapaxosTestingTESTPaxosConfig__Annotations$3, "findMyIP", "LJavaLangInteger;", "LJavaNetSocketException;", "()Ledu/umass/cs/nio/interfaces/NodeConfig<Ljava/lang/Integer;>;", "getFromPaxosConfig", "(Z)Ledu/umass/cs/nio/interfaces/NodeConfig<Ljava/lang/Integer;>;", "setConsoleHandler", "LJavaUtilLoggingLevel;", "main", &EduUmassCsGigapaxosTestingTESTPaxosConfig_TESTING_CONFIG_FILE_KEY, &EduUmassCsGigapaxosTestingTESTPaxosConfig_DEFAULT_TESTING_CONFIG_FILE, &EduUmassCsGigapaxosTestingTESTPaxosConfig_assertRSMInvariant, &EduUmassCsGigapaxosTestingTESTPaxosConfig_nodeConfig, "Ledu/umass/cs/nio/nioutils/SampleNodeConfig<Ljava/lang/Integer;>;", &EduUmassCsGigapaxosTestingTESTPaxosConfig_groups, "Ljava/util/HashMap<Ljava/lang/String;[I>;", &EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup, &EduUmassCsGigapaxosTestingTESTPaxosConfig_reply_to_client, &EduUmassCsGigapaxosTestingTESTPaxosConfig_clean_db, &EduUmassCsGigapaxosTestingTESTPaxosConfig_failedNodes, "Ljava/util/ArrayList<Ljava/lang/Object;>;", &EduUmassCsGigapaxosTestingTESTPaxosConfig_committed, &EduUmassCsGigapaxosTestingTESTPaxosConfig_executedAtAll, &EduUmassCsGigapaxosTestingTESTPaxosConfig_recovered, "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;" };
  static const J2ObjcClassInfo _EduUmassCsGigapaxosTestingTESTPaxosConfig = { "TESTPaxosConfig", "edu.umass.cs.gigapaxos.testing", ptrTable, methods, fields, 7, 0x1, 42, 18, -1, 63, -1, -1, -1 };
  return &_EduUmassCsGigapaxosTestingTESTPaxosConfig;
}

+ (void)initialize {
  if (self == [EduUmassCsGigapaxosTestingTESTPaxosConfig class]) {
    {
      EduUmassCsGigapaxosTestingTESTPaxosConfig_load__();
    }
    JreStrongAssignAndConsume(&EduUmassCsGigapaxosTestingTESTPaxosConfig_nodeConfig, new_EduUmassCsNioNioutilsSampleNodeConfig_initWithInt_withInt_withInt_(EduUmassCsNioNioutilsSampleNodeConfig_DEFAULT_START_PORT, EduUmassCsUtilsConfig_getGlobalIntWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_START_NODE_ID)), EduUmassCsUtilsConfig_getGlobalIntWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_NODES))));
    JreStrongAssignAndConsume(&EduUmassCsGigapaxosTestingTESTPaxosConfig_groups, new_JavaUtilHashMap_init());
    JreStrongAssignAndConsume(&EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup, [IOSIntArray newArrayWithLength:EduUmassCsUtilsConfig_getGlobalIntWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_NODES))]);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_clean_db = (EduUmassCsUtilsConfig_getGlobalBooleanWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosPaxosConfig_PC, DISABLE_LOGGING)) && !EduUmassCsUtilsConfig_getGlobalBooleanWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosPaxosConfig_PC, ENABLE_JOURNALING)));
    JreStrongAssignAndConsume(&EduUmassCsGigapaxosTestingTESTPaxosConfig_failedNodes, new_JavaUtilArrayList_init());
    JreStrongAssignAndConsume(&EduUmassCsGigapaxosTestingTESTPaxosConfig_committed, [IOSBooleanArray newArrayWithLength:EduUmassCsGigapaxosTestingTESTPaxosConfig_MAX_TEST_REQS]);
    JreStrongAssignAndConsume(&EduUmassCsGigapaxosTestingTESTPaxosConfig_executedAtAll, [IOSBooleanArray newArrayWithLength:EduUmassCsGigapaxosTestingTESTPaxosConfig_MAX_TEST_REQS]);
    JreStrongAssignAndConsume(&EduUmassCsGigapaxosTestingTESTPaxosConfig_recovered, [IOSBooleanArray newArrayWithLength:EduUmassCsGigapaxosTestingTESTPaxosConfig_MAX_NODE_ID]);
    J2OBJC_SET_INITIALIZED(EduUmassCsGigapaxosTestingTESTPaxosConfig)
  }
}

@end

void EduUmassCsGigapaxosTestingTESTPaxosConfig_init(EduUmassCsGigapaxosTestingTESTPaxosConfig *self) {
  NSObject_init(self);
}

EduUmassCsGigapaxosTestingTESTPaxosConfig *new_EduUmassCsGigapaxosTestingTESTPaxosConfig_init() {
  J2OBJC_NEW_IMPL(EduUmassCsGigapaxosTestingTESTPaxosConfig, init)
}

EduUmassCsGigapaxosTestingTESTPaxosConfig *create_EduUmassCsGigapaxosTestingTESTPaxosConfig_init() {
  J2OBJC_CREATE_IMPL(EduUmassCsGigapaxosTestingTESTPaxosConfig, init)
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_load__() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  EduUmassCsGigapaxosPaxosConfig_load__();
  @try {
    EduUmassCsUtilsConfig_register__WithIOSClass_withNSString_withNSString_(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_class_(), EduUmassCsGigapaxosTestingTESTPaxosConfig_TESTING_CONFIG_FILE_KEY, EduUmassCsGigapaxosTestingTESTPaxosConfig_DEFAULT_TESTING_CONFIG_FILE);
  }
  @catch (JavaIoIOException *e) {
  }
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_setSingleNodeTest() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  EduUmassCsGigapaxosTestingTESTPaxosConfig_configTestWithBoolean_(false);
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_setDistribtedTest() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  EduUmassCsGigapaxosTestingTESTPaxosConfig_configTestWithBoolean_(true);
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_configTestWithBoolean_(jboolean distributed) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  if (distributed) EduUmassCsGigapaxosTestingTESTPaxosConfig_loadServersFromFile();
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setupGroups();
}

jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_shouldAssertRSMInvariant() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_assertRSMInvariant;
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_setAssertRSMInvariantWithBoolean_(jboolean b) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  EduUmassCsGigapaxosTestingTESTPaxosConfig_assertRSMInvariant = (b && !EduUmassCsUtilsConfig_getGlobalBooleanWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosPaxosConfig_PC, EXECUTE_UPON_ACCEPT)) && (!EduUmassCsUtilsConfig_getGlobalBooleanWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosPaxosConfig_PC, DISABLE_LOGGING)) || EduUmassCsUtilsConfig_getGlobalBooleanWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosPaxosConfig_PC, ENABLE_JOURNALING))));
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_setupGroups() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  JreStrongAssignAndConsume(&EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup, [IOSIntArray newArrayWithLength:JavaLangMath_minWithInt_withInt_(EduUmassCsUtilsConfig_getGlobalIntWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, GROUP_SIZE)), EduUmassCsUtilsConfig_getGlobalIntWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_NODES)))]);
  JreAssert(((EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup->size_ > 0)), (JavaLangInteger_valueOfWithInt_(EduUmassCsUtilsConfig_getGlobalIntWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_NODES)))));
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup))->size_; i++) *IOSIntArray_GetRef(EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup, i) = EduUmassCsUtilsConfig_getGlobalIntWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_START_NODE_ID)) + i;
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setDefaultGroupsWithInt_(EduUmassCsUtilsConfig_getGlobalIntWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PRE_CONFIGURED_GROUPS)));
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_setCleanDBWithBoolean_(jboolean b) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  EduUmassCsGigapaxosTestingTESTPaxosConfig_clean_db = b;
}

jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_getCleanDB() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_clean_db;
}

id<JavaUtilSet> EduUmassCsGigapaxosTestingTESTPaxosConfig_getNodes() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  return [((EduUmassCsNioNioutilsSampleNodeConfig *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_nodeConfig)) getNodes];
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_setSendReplyToClientWithBoolean_(jboolean b) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  EduUmassCsGigapaxosTestingTESTPaxosConfig_reply_to_client = b;
}

jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_getSendReplyToClient() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_reply_to_client;
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_setDefaultGroupsWithInt_(jint numGroups) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  [((JavaUtilHashMap *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_groups)) clear];
  for (jint i = 0; i < JavaLangMath_minWithInt_withInt_(EduUmassCsUtilsConfig_getGlobalIntWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PRE_CONFIGURED_GROUPS)), numGroups); i++) {
    [EduUmassCsGigapaxosTestingTESTPaxosConfig_groups putWithId:JreStrcat("$I", EduUmassCsUtilsConfig_getGlobalStringWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_GUID_PREFIX)), i) withId:EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup];
  }
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_setRandomGroupsWithInt_(jint numGroups) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  JavaUtilRandom *r = create_JavaUtilRandom_initWithLong_(EduUmassCsGigapaxosTestingTESTPaxosConfig_RANDOM_SEED);
  for (jint i = 0; i < JavaLangMath_minWithInt_withInt_(EduUmassCsUtilsConfig_getGlobalIntWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PRE_CONFIGURED_GROUPS)), numGroups); i++) {
    [((JavaUtilHashMap *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_groups)) putWithId:JreStrcat("$I", EduUmassCsUtilsConfig_getGlobalStringWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_GUID_PREFIX)), i) withId:EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup];
    if (i == 0) continue;
    JavaUtilTreeSet *members = create_JavaUtilTreeSet_init();
    for (JavaLangInteger *boxed__ in nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_getNodes())) {
      jint id_ = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      if ([r nextDouble] > EduUmassCsUtilsConfig_getGlobalDoubleWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NODE_INCLUSION_PROB))) {
        [members addWithId:JavaLangInteger_valueOfWithInt_(id_)];
      }
    }
    EduUmassCsGigapaxosTestingTESTPaxosConfig_setGroupWithNSString_withJavaUtilSet_(EduUmassCsGigapaxosTestingTESTPaxosConfig_getGroupNameWithInt_(i), members);
  }
}

jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_shouldCleanDBWithNSStringArray_(IOSObjectArray *args) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  {
    IOSObjectArray *a__ = args;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *arg = *b__++;
      if ([((NSString *) nil_chk([((NSString *) nil_chk(arg)) java_trim])) isEqual:@"-c"]) return true;
    }
  }
  return false;
}

NSString *EduUmassCsGigapaxosTestingTESTPaxosConfig_getConfDirArgWithNSStringArray_(IOSObjectArray *args) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  {
    IOSObjectArray *a__ = args;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *arg = *b__++;
      if ([((NSString *) nil_chk([((NSString *) nil_chk(arg)) java_trim])) hasPrefix:@"-T"]) return [arg java_replace:@"-T" withSequence:@""];
    }
  }
  return nil;
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_setGroupWithNSString_withJavaUtilSet_(NSString *groupID, id<JavaUtilSet> members) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  IOSIntArray *array = [IOSIntArray arrayWithLength:[((id<JavaUtilSet>) nil_chk(members)) size]];
  jint j = 0;
  for (JavaLangInteger *boxed__ in members) {
    jint id_ = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    *IOSIntArray_GetRef(array, j++) = id_;
  }
  [((JavaUtilHashMap *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_groups)) putWithId:groupID withId:array];
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_setGroupWithNSString_withIntArray_(NSString *groupID, IOSIntArray *members) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  [((JavaUtilHashMap *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_groups)) putWithId:groupID withId:members];
}

IOSIntArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_getDefaultGroup() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup;
}

id<JavaUtilSet> EduUmassCsGigapaxosTestingTESTPaxosConfig_getDefaultGroupSet() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  return EduUmassCsUtilsUtil_arrayToIntSetWithIntArray_(EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup);
}

IOSIntArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_getGroupWithNSString_(NSString *groupID) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  IOSIntArray *members = [((JavaUtilHashMap *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_groups)) getWithId:groupID];
  JreAssert(((((IOSIntArray *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup))->size_ > 0)), (@"edu/umass/cs/gigapaxos/testing/TESTPaxosConfig.java:355 condition failed: assert (defaultGroup.length > 0);"));
  return members != nil && members->size_ > 0 ? members : EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup;
}

IOSIntArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_getGroupWithInt_(jint groupID) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  IOSIntArray *members = [((JavaUtilHashMap *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_groups)) getWithId:JreStrcat("$I", EduUmassCsUtilsConfig_getGlobalStringWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_GUID_PREFIX)), groupID)];
  return members != nil ? members : EduUmassCsGigapaxosTestingTESTPaxosConfig_defaultGroup;
}

NSString *EduUmassCsGigapaxosTestingTESTPaxosConfig_getGroupNameWithInt_(jint groupID) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  return JreStrcat("$I", EduUmassCsUtilsConfig_getGlobalStringWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_GUID_PREFIX)), groupID);
}

id<JavaUtilCollection> EduUmassCsGigapaxosTestingTESTPaxosConfig_getGroups() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  return [((JavaUtilHashMap *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_groups)) keySet];
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_createGroupWithNSString_withIntArray_(NSString *groupID, IOSIntArray *members) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  if ([((JavaUtilHashMap *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_groups)) size] <= EduUmassCsUtilsConfig_getGlobalIntWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PRE_CONFIGURED_GROUPS))) [EduUmassCsGigapaxosTestingTESTPaxosConfig_groups putWithId:groupID withId:members];
}

EduUmassCsNioNioutilsSampleNodeConfig *EduUmassCsGigapaxosTestingTESTPaxosConfig_getNodeConfig() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_nodeConfig;
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_crashWithInt_(jint nodeID) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  @synchronized(EduUmassCsGigapaxosTestingTESTPaxosConfig_class_()) {
    [((JavaUtilArrayList *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_failedNodes)) addWithId:JavaLangInteger_valueOfWithInt_(nodeID)];
  }
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_recoverWithInt_(jint nodeID) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  @synchronized(EduUmassCsGigapaxosTestingTESTPaxosConfig_class_()) {
    [((JavaUtilArrayList *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_failedNodes)) removeWithId:create_JavaLangInteger_initWithInt_(nodeID)];
  }
}

jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_isCrashedWithId_(id nodeID) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  return [((JavaUtilArrayList *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_failedNodes)) containsWithId:nodeID];
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_setRecoveredWithInt_withNSString_withBoolean_(jint id_, NSString *paxosID, jboolean b) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  if ([((NSString *) nil_chk(paxosID)) isEqual:EduUmassCsUtilsConfig_getGlobalStringWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_GUID))]) {
    *IOSBooleanArray_GetRef(nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_recovered), id_) = b;
  }
}

jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_getRecoveredWithInt_withNSString_(jint id_, NSString *paxosID) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  @synchronized(EduUmassCsGigapaxosTestingTESTPaxosConfig_class_()) {
    JreAssert(((id_ < EduUmassCsGigapaxosTestingTESTPaxosConfig_MAX_NODE_ID)), (@"edu/umass/cs/gigapaxos/testing/TESTPaxosConfig.java:413 condition failed: assert (id < MAX_NODE_ID);"));
    if ([((NSString *) nil_chk(paxosID)) isEqual:EduUmassCsUtilsConfig_getGlobalStringWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_GUID))]) return IOSBooleanArray_Get(nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_recovered), id_);
    else return true;
  }
}

jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_isCommittedWithLong_(jlong reqnum) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  @synchronized(EduUmassCsGigapaxosTestingTESTPaxosConfig_class_()) {
    JreAssert(((reqnum < EduUmassCsGigapaxosTestingTESTPaxosConfig_MAX_TEST_REQS)), (@"edu/umass/cs/gigapaxos/testing/TESTPaxosConfig.java:423 condition failed: assert (reqnum < MAX_TEST_REQS);"));
    return IOSBooleanArray_Get(nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_committed), (jint) reqnum);
  }
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_executeWithLong_(jlong reqnum) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  @synchronized(EduUmassCsGigapaxosTestingTESTPaxosConfig_class_()) {
    JreAssert(((reqnum >= 0)), (@"edu/umass/cs/gigapaxos/testing/TESTPaxosConfig.java:429 condition failed: assert (reqnum >= 0);"));
    *IOSBooleanArray_GetRef(nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_executedAtAll), (jint) reqnum) = true;
  }
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_commitWithInt_(jint reqnum) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  if (reqnum >= 0 && reqnum < ((IOSBooleanArray *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_committed))->size_) *IOSBooleanArray_GetRef(nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_committed), reqnum) = true;
}

jboolean EduUmassCsGigapaxosTestingTESTPaxosConfig_findMyIPWithJavaLangInteger_(JavaLangInteger *myID) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  if (myID == nil) return false;
  id<JavaUtilEnumeration> netfaces = JavaNetNetworkInterface_getNetworkInterfaces();
  JavaUtilArrayList *myIPs = create_JavaUtilArrayList_init();
  while ([((id<JavaUtilEnumeration>) nil_chk(netfaces)) hasMoreElements]) {
    JavaNetNetworkInterface *iface = [netfaces nextElement];
    id<JavaUtilEnumeration> allIPs = [((JavaNetNetworkInterface *) nil_chk(iface)) getInetAddresses];
    while ([((id<JavaUtilEnumeration>) nil_chk(allIPs)) hasMoreElements]) {
      JavaNetInetAddress *addr = [allIPs nextElement];
      if (([addr isKindOfClass:[JavaNetInet4Address class]])) [myIPs addWithId:addr];
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:myIPs];
  jboolean found = false;
  if ([myIPs containsWithId:[((EduUmassCsNioNioutilsSampleNodeConfig *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_getNodeConfig())) getNodeAddressWithId:myID]]) {
    found = true;
  }
  if (found) [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Found my IP"];
  else {
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@$", @"\n\n****Could not locally find the IP ", [((EduUmassCsNioNioutilsSampleNodeConfig *) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_getNodeConfig())) getNodeAddressWithId:myID], @"; should change all addresses to localhost instead.****\n\n.")];
  }
  return found;
}

id<EduUmassCsNioInterfacesNodeConfig> EduUmassCsGigapaxosTestingTESTPaxosConfig_getFromPaxosConfig() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_getFromPaxosConfigWithBoolean_(false);
}

id<EduUmassCsNioInterfacesNodeConfig> EduUmassCsGigapaxosTestingTESTPaxosConfig_getFromPaxosConfigWithBoolean_(jboolean clientFacing) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  id<EduUmassCsNioInterfacesNodeConfig> defaultNC = EduUmassCsGigapaxosPaxosConfig_getDefaultNodeConfig();
  return create_EduUmassCsGigapaxosTestingTESTPaxosConfig_1_initWithEduUmassCsNioInterfacesNodeConfig_withBoolean_(defaultNC, clientFacing);
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_loadServersFromFile() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  [((EduUmassCsUtilsConfig *) nil_chk(EduUmassCsUtilsConfig_getConfigWithIOSClass_(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_class_()))) putWithId:JreLoadEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_NODES) withId:JavaLangInteger_valueOfWithInt_([((id<JavaUtilSet>) nil_chk([((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(EduUmassCsGigapaxosTestingTESTPaxosConfig_getFromPaxosConfig())) getNodeIDs])) size])];
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_setConsoleHandlerWithJavaUtilLoggingLevel_(JavaUtilLoggingLevel *level) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  if (JavaLangSystem_getPropertyWithNSString_(@"java.util.logging.config.file") == nil) EduUmassCsGigapaxosPaxosConfig_setConsoleHandlerWithJavaUtilLoggingLevel_(level);
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_setConsoleHandler() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  EduUmassCsGigapaxosTestingTESTPaxosConfig_setConsoleHandlerWithJavaUtilLoggingLevel_(JreLoadStatic(JavaUtilLoggingLevel, INFO));
}

void EduUmassCsGigapaxosTestingTESTPaxosConfig_mainWithNSStringArray_(IOSObjectArray *args) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[@"edu.umass.cs" java_replaceAll:@".*\\." withReplacement:@""]];
}

IOSObjectArray *EduUmassCsGigapaxosTestingTESTPaxosConfig__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *EduUmassCsGigapaxosTestingTESTPaxosConfig__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *EduUmassCsGigapaxosTestingTESTPaxosConfig__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *EduUmassCsGigapaxosTestingTESTPaxosConfig__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsGigapaxosTestingTESTPaxosConfig)

J2OBJC_INITIALIZED_DEFN(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC)

EduUmassCsGigapaxosTestingTESTPaxosConfig_TC *EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_values_[33];

@implementation EduUmassCsGigapaxosTestingTESTPaxosConfig_TC

- (id)getDefaultValue {
  return self->defaultValue_;
}

- (NSString *)getDefaultConfigFile {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_DEFAULT_TESTING_CONFIG_FILE;
}

- (NSString *)getConfigFileKey {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_TESTING_CONFIG_FILE_KEY;
}

+ (IOSObjectArray *)values {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_values();
}

+ (EduUmassCsGigapaxosTestingTESTPaxosConfig_TC *)valueOfWithNSString:(NSString *)name {
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getDefaultValue);
  methods[1].selector = @selector(getDefaultConfigFile);
  methods[2].selector = @selector(getConfigFileKey);
  methods[3].selector = @selector(values);
  methods[4].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NUM_NODES", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "TEST_GUID_PREFIX", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "TEST_GUID", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "NODE_INCLUSION_PROB", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "TEST_START_NODE_ID", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "TEST_CLIENT_ID", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "PRE_CONFIGURED_GROUPS", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "NUM_GROUPS", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "NUM_GROUPS_CLIENT", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "GROUP_SIZE", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "NUM_CLIENTS", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "WARMUP", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
    { "PIN_CLIENT", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 14, -1, -1 },
    { "NUM_REQUESTS", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 15, -1, -1 },
    { "TOTAL_LOAD", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 16, -1, -1 },
    { "REQUEST_BAGGAGE_SIZE", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 17, -1, -1 },
    { "COMPRESSIBLE_REQUEST", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 18, -1, -1 },
    { "OVERHEAD_TESTING", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 19, -1, -1 },
    { "MEMORY_TESTING", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 20, -1, -1 },
    { "ABSOLUTE_NOOP_APP", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 21, -1, -1 },
    { "TEST_APP_DELAY", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 22, -1, -1 },
    { "PROBE_CAPACITY", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 23, -1, -1 },
    { "PROBE_INIT_LOAD", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 24, -1, -1 },
    { "PROBE_RUN_DURATION", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 25, -1, -1 },
    { "PROBE_RESPONSE_THRESHOLD", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 26, -1, -1 },
    { "PROBE_LOAD_INCREASE_FACTOR", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 27, -1, -1 },
    { "PROBE_LATENCY_THRESHOLD", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 28, -1, -1 },
    { "PROBE_MAX_CONSECUTIVE_FAILURES", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 29, -1, -1 },
    { "PROBE_MAX_RUNS", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 30, -1, -1 },
    { "MAX_RESPONSE_WAIT_TIME", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 31, -1, -1 },
    { "WORKLOAD_SKEW", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 32, -1, -1 },
    { "BATCH_CREATION_SIZE", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 33, -1, -1 },
    { "BATCH_CREATION_ENABLED", "LEduUmassCsGigapaxosTestingTESTPaxosConfig_TC;", .constantValue.asLong = 0, 0x4019, -1, 34, -1, -1 },
    { "defaultValue_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_NODES), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_GUID_PREFIX), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_GUID), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NODE_INCLUSION_PROB), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_START_NODE_ID), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_CLIENT_ID), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PRE_CONFIGURED_GROUPS), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_GROUPS), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_GROUPS_CLIENT), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, GROUP_SIZE), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_CLIENTS), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, WARMUP), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PIN_CLIENT), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_REQUESTS), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TOTAL_LOAD), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, REQUEST_BAGGAGE_SIZE), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, COMPRESSIBLE_REQUEST), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, OVERHEAD_TESTING), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, MEMORY_TESTING), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, ABSOLUTE_NOOP_APP), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_APP_DELAY), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_CAPACITY), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_INIT_LOAD), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_RUN_DURATION), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_RESPONSE_THRESHOLD), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_LOAD_INCREASE_FACTOR), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_LATENCY_THRESHOLD), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_MAX_CONSECUTIVE_FAILURES), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_MAX_RUNS), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, MAX_RESPONSE_WAIT_TIME), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, WORKLOAD_SKEW), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, BATCH_CREATION_SIZE), &JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, BATCH_CREATION_ENABLED), "LEduUmassCsGigapaxosTestingTESTPaxosConfig;", "Ljava/lang/Enum<Ledu/umass/cs/gigapaxos/testing/TESTPaxosConfig$TC;>;Ledu/umass/cs/utils/Config$ConfigurableEnum;" };
  static const J2ObjcClassInfo _EduUmassCsGigapaxosTestingTESTPaxosConfig_TC = { "TC", "edu.umass.cs.gigapaxos.testing", ptrTable, methods, fields, 7, 0x4019, 5, 34, 35, -1, -1, 36, -1 };
  return &_EduUmassCsGigapaxosTestingTESTPaxosConfig_TC;
}

+ (void)initialize {
  if (self == [EduUmassCsGigapaxosTestingTESTPaxosConfig_TC class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 33 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_NODES) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(10), @"NUM_NODES", 0);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_GUID_PREFIX) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, [EduUmassCsUtilsConfig_getGlobalStringWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosPaxosConfig_PC, APPLICATION)) java_replaceAll:@".*\\." withReplacement:@""], @"TEST_GUID_PREFIX", 1);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_GUID) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JreStrcat("$C", [EduUmassCsUtilsConfig_getGlobalStringWithJavaLangEnum_(JreLoadEnum(EduUmassCsGigapaxosPaxosConfig_PC, APPLICATION)) java_replaceAll:@".*\\." withReplacement:@""], '0'), @"TEST_GUID", 2);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NODE_INCLUSION_PROB) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangDouble_valueOfWithDouble_(0.6), @"NODE_INCLUSION_PROB", 3);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_START_NODE_ID) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(100), @"TEST_START_NODE_ID", 4);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_CLIENT_ID) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(500), @"TEST_CLIENT_ID", 5);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PRE_CONFIGURED_GROUPS) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(5), @"PRE_CONFIGURED_GROUPS", 6);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_GROUPS) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(1000), @"NUM_GROUPS", 7);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_GROUPS_CLIENT) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(EduUmassCsUtilsConfig_getGlobalIntWithJavaLangEnum_(JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_GROUPS))), @"NUM_GROUPS_CLIENT", 8);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, GROUP_SIZE) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(3), @"GROUP_SIZE", 9);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_CLIENTS) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(9), @"NUM_CLIENTS", 10);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, WARMUP) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangBoolean_valueOfWithBoolean_(true), @"WARMUP", 11);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PIN_CLIENT) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangBoolean_valueOfWithBoolean_(true), @"PIN_CLIENT", 12);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, NUM_REQUESTS) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(2500), @"NUM_REQUESTS", 13);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TOTAL_LOAD) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(1000), @"TOTAL_LOAD", 14);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, REQUEST_BAGGAGE_SIZE) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(10), @"REQUEST_BAGGAGE_SIZE", 15);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, COMPRESSIBLE_REQUEST) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangBoolean_valueOfWithBoolean_(false), @"COMPRESSIBLE_REQUEST", 16);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, OVERHEAD_TESTING) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangBoolean_valueOfWithBoolean_(false), @"OVERHEAD_TESTING", 17);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, MEMORY_TESTING) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangBoolean_valueOfWithBoolean_(true), @"MEMORY_TESTING", 18);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, ABSOLUTE_NOOP_APP) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangBoolean_valueOfWithBoolean_(true), @"ABSOLUTE_NOOP_APP", 19);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, TEST_APP_DELAY) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(0), @"TEST_APP_DELAY", 20);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_CAPACITY) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangBoolean_valueOfWithBoolean_(true), @"PROBE_CAPACITY", 21);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_INIT_LOAD) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(50000), @"PROBE_INIT_LOAD", 22);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_RUN_DURATION) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(10), @"PROBE_RUN_DURATION", 23);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_RESPONSE_THRESHOLD) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangDouble_valueOfWithDouble_(0.9), @"PROBE_RESPONSE_THRESHOLD", 24);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_LOAD_INCREASE_FACTOR) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangDouble_valueOfWithDouble_(1.1), @"PROBE_LOAD_INCREASE_FACTOR", 25);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_LATENCY_THRESHOLD) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(1000), @"PROBE_LATENCY_THRESHOLD", 26);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_MAX_CONSECUTIVE_FAILURES) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(8), @"PROBE_MAX_CONSECUTIVE_FAILURES", 27);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, PROBE_MAX_RUNS) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(50), @"PROBE_MAX_RUNS", 28);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, MAX_RESPONSE_WAIT_TIME) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(60 * 1000), @"MAX_RESPONSE_WAIT_TIME", 29);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, WORKLOAD_SKEW) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(1), @"WORKLOAD_SKEW", 30);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, BATCH_CREATION_SIZE) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangInteger_valueOfWithInt_(1000), @"BATCH_CREATION_SIZE", 31);
    (JreEnum(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC, BATCH_CREATION_ENABLED) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(e, JavaLangBoolean_valueOfWithBoolean_(true), @"BATCH_CREATION_ENABLED", 32);
    J2OBJC_SET_INITIALIZED(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC)
  }
}

@end

void EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initWithId_withNSString_withInt_(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC *self, id defaultValue, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->defaultValue_, defaultValue);
}

IOSObjectArray *EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_values() {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initialize();
  return [IOSObjectArray arrayWithObjects:EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_values_ count:33 type:EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_class_()];
}

EduUmassCsGigapaxosTestingTESTPaxosConfig_TC *EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_valueOfWithNSString_(NSString *name) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initialize();
  for (int i = 0; i < 33; i++) {
    EduUmassCsGigapaxosTestingTESTPaxosConfig_TC *e = EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduUmassCsGigapaxosTestingTESTPaxosConfig_TC *EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_fromOrdinal(NSUInteger ordinal) {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_initialize();
  if (ordinal >= 33) {
    return nil;
  }
  return EduUmassCsGigapaxosTestingTESTPaxosConfig_TC_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsGigapaxosTestingTESTPaxosConfig_TC)

@implementation EduUmassCsGigapaxosTestingTESTPaxosConfig_1

- (instancetype)initWithEduUmassCsNioInterfacesNodeConfig:(id<EduUmassCsNioInterfacesNodeConfig>)capture$0
                                              withBoolean:(jboolean)capture$1 {
  EduUmassCsGigapaxosTestingTESTPaxosConfig_1_initWithEduUmassCsNioInterfacesNodeConfig_withBoolean_(self, capture$0, capture$1);
  return self;
}

- (JavaLangInteger *)valueOfWithNSString:(NSString *)strValue {
  return JavaLangInteger_valueOfWithNSString_(strValue);
}

- (id<JavaUtilSet>)getValuesFromStringSetWithJavaUtilSet:(id<JavaUtilSet>)strNodes {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Method not implemented");
}

- (id<JavaUtilSet>)getValuesFromJSONArrayWithOrgJsonJSONArray:(OrgJsonJSONArray *)array {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Method not implemented");
}

- (jboolean)nodeExistsWithId:(JavaLangInteger *)id_ {
  return [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(val$defaultNC_)) nodeExistsWithId:[((JavaLangInteger *) nil_chk(id_)) description]];
}

- (JavaNetInetAddress *)getNodeAddressWithId:(JavaLangInteger *)id_ {
  return [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(val$defaultNC_)) nodeExistsWithId:[((JavaLangInteger *) nil_chk(id_)) description]] ? [val$defaultNC_ getNodeAddressWithId:[id_ description]] : [((EduUmassCsNioNioutilsSampleNodeConfig *) nil_chk(JreLoadStatic(EduUmassCsGigapaxosTestingTESTPaxosConfig, nodeConfig))) getNodeAddressWithId:id_];
}

- (JavaNetInetAddress *)getBindAddressWithId:(JavaLangInteger *)id_ {
  return [self getNodeAddressWithId:id_];
}

- (jint)getNodePortWithId:(JavaLangInteger *)id_ {
  jint port = ([((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(val$defaultNC_)) nodeExistsWithId:[((JavaLangInteger *) nil_chk(id_)) description]] ? [val$defaultNC_ getNodePortWithId:[id_ description]] : [((EduUmassCsNioNioutilsSampleNodeConfig *) nil_chk(JreLoadStatic(EduUmassCsGigapaxosTestingTESTPaxosConfig, nodeConfig))) getNodePortWithId:id_]) + (val$clientFacing_ ? clientPortOffset_ : 0);
  return port;
}

- (id<JavaUtilSet>)getNodeIDs {
  id<JavaUtilSet> nodes = [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(val$defaultNC_)) getNodeIDs];
  id<JavaUtilSet> intIDs = create_JavaUtilHashSet_init();
  for (NSString * __strong s in nil_chk(nodes)) [intIDs addWithId:JavaLangInteger_valueOfWithNSString_(s)];
  for (JavaLangInteger *boxed__ in nil_chk([((EduUmassCsNioNioutilsSampleNodeConfig *) nil_chk(JreLoadStatic(EduUmassCsGigapaxosTestingTESTPaxosConfig, nodeConfig))) getNodeIDs])) {
    jint id_ = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    [intIDs addWithId:JavaLangInteger_valueOfWithInt_(id_)];
  }
  return intIDs;
}

- (NSString *)description {
  NSString *s = @"";
  for (JavaLangInteger * __strong id_ in nil_chk([self getNodeIDs])) {
    s = (JreStrcat("$@C@CIC", s, id_, ':', [self getNodeAddressWithId:id_], ':', [self getNodePortWithId:id_], ' '));
  }
  return s;
}

- (void)dealloc {
  RELEASE_(val$defaultNC_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 5, 6, 7, 8, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduUmassCsNioInterfacesNodeConfig:withBoolean:);
  methods[1].selector = @selector(valueOfWithNSString:);
  methods[2].selector = @selector(getValuesFromStringSetWithJavaUtilSet:);
  methods[3].selector = @selector(getValuesFromJSONArrayWithOrgJsonJSONArray:);
  methods[4].selector = @selector(nodeExistsWithId:);
  methods[5].selector = @selector(getNodeAddressWithId:);
  methods[6].selector = @selector(getBindAddressWithId:);
  methods[7].selector = @selector(getNodePortWithId:);
  methods[8].selector = @selector(getNodeIDs);
  methods[9].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$defaultNC_", "LEduUmassCsNioInterfacesNodeConfig;", .constantValue.asLong = 0, 0x1012, -1, -1, 16, -1 },
    { "val$clientFacing_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "clientPortOffset_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", "getValuesFromStringSet", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)Ljava/util/Set<Ljava/lang/Integer;>;", "getValuesFromJSONArray", "LOrgJsonJSONArray;", "LOrgJsonJSONException;", "(Lorg/json/JSONArray;)Ljava/util/Set<Ljava/lang/Integer;>;", "nodeExists", "LJavaLangInteger;", "getNodeAddress", "getBindAddress", "getNodePort", "()Ljava/util/Set<Ljava/lang/Integer;>;", "toString", "Ledu/umass/cs/nio/interfaces/NodeConfig<Ljava/lang/String;>;", "LEduUmassCsGigapaxosTestingTESTPaxosConfig;", "getFromPaxosConfigWithBoolean:", "Ljava/lang/Object;Ledu/umass/cs/nio/interfaces/NodeConfig<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _EduUmassCsGigapaxosTestingTESTPaxosConfig_1 = { "", "edu.umass.cs.gigapaxos.testing", ptrTable, methods, fields, 7, 0x8008, 10, 3, 17, -1, 18, 19, -1 };
  return &_EduUmassCsGigapaxosTestingTESTPaxosConfig_1;
}

@end

void EduUmassCsGigapaxosTestingTESTPaxosConfig_1_initWithEduUmassCsNioInterfacesNodeConfig_withBoolean_(EduUmassCsGigapaxosTestingTESTPaxosConfig_1 *self, id<EduUmassCsNioInterfacesNodeConfig> capture$0, jboolean capture$1) {
  JreStrongAssign(&self->val$defaultNC_, capture$0);
  self->val$clientFacing_ = capture$1;
  NSObject_init(self);
  self->clientPortOffset_ = EduUmassCsGigapaxosPaxosConfig_getClientPortOffset();
}

EduUmassCsGigapaxosTestingTESTPaxosConfig_1 *new_EduUmassCsGigapaxosTestingTESTPaxosConfig_1_initWithEduUmassCsNioInterfacesNodeConfig_withBoolean_(id<EduUmassCsNioInterfacesNodeConfig> capture$0, jboolean capture$1) {
  J2OBJC_NEW_IMPL(EduUmassCsGigapaxosTestingTESTPaxosConfig_1, initWithEduUmassCsNioInterfacesNodeConfig_withBoolean_, capture$0, capture$1)
}

EduUmassCsGigapaxosTestingTESTPaxosConfig_1 *create_EduUmassCsGigapaxosTestingTESTPaxosConfig_1_initWithEduUmassCsNioInterfacesNodeConfig_withBoolean_(id<EduUmassCsNioInterfacesNodeConfig> capture$0, jboolean capture$1) {
  J2OBJC_CREATE_IMPL(EduUmassCsGigapaxosTestingTESTPaxosConfig_1, initWithEduUmassCsNioInterfacesNodeConfig_withBoolean_, capture$0, capture$1)
}
