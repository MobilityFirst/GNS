//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../src/edu/umass/cs/gnsserver/nodeconfig/GNSNodeConfig.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/umass/cs/gigapaxos/PaxosConfig.h"
#include "edu/umass/cs/gnsserver/main/GNSConfig.h"
#include "edu/umass/cs/gnsserver/main/OldHackyConstants.h"
#include "edu/umass/cs/gnsserver/nodeconfig/GNSNodeConfig.h"
#include "edu/umass/cs/gnsserver/nodeconfig/NodeInfo.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileReader.h"
#include "java/io/IOException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/json/JSONArray.h"

@class EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass;

@interface EduUmassCsGnsserverNodeconfigGNSNodeConfig () {
 @public
  jlong version__;
  id nodeID_;
  jboolean isCPP_;
  id<JavaUtilConcurrentConcurrentMap> hostInfoMapping_;
  jboolean addSuffix_;
}

- (EduUmassCsGnsserverNodeconfigNodeInfo *)getActiveReplicaInfoWithId:(id)id_;

- (EduUmassCsGnsserverNodeconfigNodeInfo *)getReconfiguratorInfoWithId:(id)id_;

- (EduUmassCsGnsserverNodeconfigNodeInfo *)getNodeInfoForAnyNodeWithId:(id)id_;

- (EduUmassCsGnsserverNodeconfigNodeInfo *)getNodeInfoForTopLevelNodeWithId:(id)id_;

- (EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *)getNodeIDType;

- (void)addHostInfoWithJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap>)mapping
                                                withId:(id)id_
                                          withNSString:(NSString *)ipAddress
                                          withNSString:(NSString *)externalIP
                                               withInt:(jint)startingPort
                                              withLong:(jlong)pingLatency
                                            withDouble:(jdouble)latitude
                                            withDouble:(jdouble)longitude;

- (void)addHostInfoWithJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap>)mapping
                                                withId:(id)id_
                                          withNSString:(NSString *)ipAddress
                                          withNSString:(NSString *)externalIP
                                   withJavaLangInteger:(JavaLangInteger *)startingPort;

- (jboolean)isOldStyleFileWithNSString:(NSString *)file;

@end

J2OBJC_FIELD_SETTER(EduUmassCsGnsserverNodeconfigGNSNodeConfig, nodeID_, id)
J2OBJC_FIELD_SETTER(EduUmassCsGnsserverNodeconfigGNSNodeConfig, hostInfoMapping_, id<JavaUtilConcurrentConcurrentMap>)

__attribute__((unused)) static EduUmassCsGnsserverNodeconfigNodeInfo *EduUmassCsGnsserverNodeconfigGNSNodeConfig_getActiveReplicaInfoWithId_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, id id_);

__attribute__((unused)) static EduUmassCsGnsserverNodeconfigNodeInfo *EduUmassCsGnsserverNodeconfigGNSNodeConfig_getReconfiguratorInfoWithId_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, id id_);

__attribute__((unused)) static EduUmassCsGnsserverNodeconfigNodeInfo *EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForAnyNodeWithId_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, id id_);

__attribute__((unused)) static EduUmassCsGnsserverNodeconfigNodeInfo *EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForTopLevelNodeWithId_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, id id_);

__attribute__((unused)) static EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeIDType(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self);

__attribute__((unused)) static void EduUmassCsGnsserverNodeconfigGNSNodeConfig_addHostInfoWithJavaUtilConcurrentConcurrentMap_withId_withNSString_withNSString_withInt_withLong_withDouble_withDouble_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, id<JavaUtilConcurrentConcurrentMap> mapping, id id_, NSString *ipAddress, NSString *externalIP, jint startingPort, jlong pingLatency, jdouble latitude, jdouble longitude);

__attribute__((unused)) static void EduUmassCsGnsserverNodeconfigGNSNodeConfig_addHostInfoWithJavaUtilConcurrentConcurrentMap_withId_withNSString_withNSString_withJavaLangInteger_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, id<JavaUtilConcurrentConcurrentMap> mapping, id id_, NSString *ipAddress, NSString *externalIP, JavaLangInteger *startingPort);

__attribute__((unused)) static jboolean EduUmassCsGnsserverNodeconfigGNSNodeConfig_isOldStyleFileWithNSString_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, NSString *file);

__attribute__((unused)) static IOSObjectArray *EduUmassCsGnsserverNodeconfigGNSNodeConfig__Annotations$0();

typedef NS_ENUM(NSUInteger, EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_Enum) {
  EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_Enum_String = 0,
  EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_Enum_Integer = 1,
  EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_Enum_InetAddress = 2,
};

@interface EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;

+ (EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *)valueOfWithNSString:(NSString *)name;

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_values_[];

inline EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_get_String();
J2OBJC_ENUM_CONSTANT(EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass, String)

inline EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_get_Integer();
J2OBJC_ENUM_CONSTANT(EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass, Integer)

inline EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_get_InetAddress();
J2OBJC_ENUM_CONSTANT(EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass, InetAddress)

__attribute__((unused)) static void EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_initWithNSString_withInt_(EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_values();

__attribute__((unused)) static EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass)

@implementation EduUmassCsGnsserverNodeconfigGNSNodeConfig

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduUmassCsGnsserverNodeconfigGNSNodeConfig_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)hostsFile
                          withId:(id)nameServerID {
  EduUmassCsGnsserverNodeconfigGNSNodeConfig_initWithNSString_withId_(self, hostsFile, nameServerID);
  return self;
}

- (id<JavaUtilSet>)getNodeIDs {
  return [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(hostInfoMapping_)) keySet];
}

- (id<JavaUtilSet>)getActiveReplicas {
  id<JavaUtilSet> result = create_JavaUtilHashSet_init();
  for (EduUmassCsGnsserverNodeconfigNodeInfo * __strong hostInfo in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(hostInfoMapping_)) values])) {
    [result addWithId:[((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(hostInfo)) getActiveReplicaID]];
  }
  return result;
}

- (EduUmassCsGnsserverNodeconfigNodeInfo *)getActiveReplicaInfoWithId:(id)id_ {
  return EduUmassCsGnsserverNodeconfigGNSNodeConfig_getActiveReplicaInfoWithId_(self, id_);
}

- (jboolean)isActiveReplicaWithId:(id)id_ {
  return EduUmassCsGnsserverNodeconfigGNSNodeConfig_getActiveReplicaInfoWithId_(self, id_) != nil;
}

- (id<JavaUtilSet>)getReconfigurators {
  id<JavaUtilSet> result = create_JavaUtilHashSet_init();
  for (EduUmassCsGnsserverNodeconfigNodeInfo * __strong hostInfo in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(hostInfoMapping_)) values])) {
    [result addWithId:[((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(hostInfo)) getReconfiguratorID]];
  }
  return result;
}

- (EduUmassCsGnsserverNodeconfigNodeInfo *)getReconfiguratorInfoWithId:(id)id_ {
  return EduUmassCsGnsserverNodeconfigGNSNodeConfig_getReconfiguratorInfoWithId_(self, id_);
}

- (EduUmassCsGnsserverNodeconfigNodeInfo *)getNodeInfoForAnyNodeWithId:(id)id_ {
  return EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForAnyNodeWithId_(self, id_);
}

- (EduUmassCsGnsserverNodeconfigNodeInfo *)getNodeInfoForTopLevelNodeWithId:(id)id_ {
  return EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForTopLevelNodeWithId_(self, id_);
}

- (id)getReplicaNodeIdForTopLevelNodeWithId:(id)id_ {
  EduUmassCsGnsserverNodeconfigNodeInfo *nodeInfo;
  if ((nodeInfo = EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForTopLevelNodeWithId_(self, id_)) != nil) {
    return [((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(nodeInfo)) getActiveReplicaID];
  }
  return nil;
}

- (id)getReconfiguratorNodeIdForTopLevelNodeWithId:(id)id_ {
  EduUmassCsGnsserverNodeconfigNodeInfo *nodeInfo;
  if ((nodeInfo = EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForTopLevelNodeWithId_(self, id_)) != nil) {
    return [((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(nodeInfo)) getReconfiguratorID];
  }
  return nil;
}

- (jint)getNumberOfNodes {
  return [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(hostInfoMapping_)) size];
}

- (jint)getNodePortWithId:(id)id_ {
  if ([id_ isKindOfClass:[JavaNetInetSocketAddress class]]) {
    return [((JavaNetInetSocketAddress *) nil_chk(((JavaNetInetSocketAddress *) cast_chk(id_, [JavaNetInetSocketAddress class])))) getPort];
  }
  EduUmassCsGnsserverNodeconfigNodeInfo *nodeInfo = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(hostInfoMapping_)) getWithId:id_], *copy_ = nodeInfo;
  if ((nodeInfo = EduUmassCsGnsserverNodeconfigGNSNodeConfig_getActiveReplicaInfoWithId_(self, id_)) != nil) {
    return [((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(nodeInfo)) getStartingPortNumber] + [((EduUmassCsGnsserverMainOldHackyConstants_PortType *) nil_chk(JreLoadEnum(EduUmassCsGnsserverMainOldHackyConstants_PortType, ACTIVE_REPLICA_PORT))) getOffset];
  }
  else if ((nodeInfo = EduUmassCsGnsserverNodeconfigGNSNodeConfig_getReconfiguratorInfoWithId_(self, id_)) != nil) {
    return [((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(nodeInfo)) getStartingPortNumber] + [((EduUmassCsGnsserverMainOldHackyConstants_PortType *) nil_chk(JreLoadEnum(EduUmassCsGnsserverMainOldHackyConstants_PortType, RECONFIGURATOR_PORT))) getOffset];
  }
  else if ((nodeInfo = copy_) != nil) {
    return [((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(nodeInfo)) getStartingPortNumber] + [((EduUmassCsGnsserverMainOldHackyConstants_PortType *) nil_chk(JreLoadEnum(EduUmassCsGnsserverMainOldHackyConstants_PortType, NS_TCP_PORT))) getOffset];
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsGnsserverMainGNSConfig_getLogger())) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"NodeId {0} not a valid Id!" withId:[nil_chk(id_) description]];
    return EduUmassCsGnsserverNodeconfigGNSNodeConfig_INVALID_PORT;
  }
}

- (jint)getAdminPortWithId:(id)id_ {
  EduUmassCsGnsserverNodeconfigNodeInfo *nodeInfo = EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForAnyNodeWithId_(self, id_);
  return (nodeInfo == nil) ? EduUmassCsGnsserverNodeconfigGNSNodeConfig_INVALID_PORT : [((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(nodeInfo)) getStartingPortNumber] + [((EduUmassCsGnsserverMainOldHackyConstants_PortType *) nil_chk(JreLoadEnum(EduUmassCsGnsserverMainOldHackyConstants_PortType, NS_ADMIN_PORT))) getOffset];
}

- (jint)getCcpPortWithId:(id)id_ {
  EduUmassCsGnsserverNodeconfigNodeInfo *nodeInfo = EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForAnyNodeWithId_(self, id_);
  if (nodeInfo != nil) {
    return [nodeInfo getStartingPortNumber] + [((EduUmassCsGnsserverMainOldHackyConstants_PortType *) nil_chk(JreLoadEnum(EduUmassCsGnsserverMainOldHackyConstants_PortType, CCP_PORT))) getOffset];
  }
  else {
    return EduUmassCsGnsserverNodeconfigGNSNodeConfig_INVALID_PORT;
  }
}

- (jint)getCcpAdminPortWithId:(id)id_ {
  EduUmassCsGnsserverNodeconfigNodeInfo *nodeInfo = EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForAnyNodeWithId_(self, id_);
  if (nodeInfo != nil) {
    return [nodeInfo getStartingPortNumber] + [((EduUmassCsGnsserverMainOldHackyConstants_PortType *) nil_chk(JreLoadEnum(EduUmassCsGnsserverMainOldHackyConstants_PortType, CCP_ADMIN_PORT))) getOffset];
  }
  else {
    return EduUmassCsGnsserverNodeconfigGNSNodeConfig_INVALID_PORT;
  }
}

- (JavaNetInetAddress *)getNodeAddressWithId:(id)id_ {
  if ([id_ isKindOfClass:[JavaNetInetSocketAddress class]]) {
    return [((JavaNetInetSocketAddress *) nil_chk(((JavaNetInetSocketAddress *) cast_chk(id_, [JavaNetInetSocketAddress class])))) getAddress];
  }
  EduUmassCsGnsserverNodeconfigNodeInfo *nodeInfo = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(hostInfoMapping_)) getWithId:id_];
  if (nodeInfo != nil) {
    return [nodeInfo getExternalIPAddress];
  }
  else if ((nodeInfo = EduUmassCsGnsserverNodeconfigGNSNodeConfig_getActiveReplicaInfoWithId_(self, id_)) != nil) {
    return [((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(nodeInfo)) getExternalIPAddress];
  }
  else if ((nodeInfo = EduUmassCsGnsserverNodeconfigGNSNodeConfig_getReconfiguratorInfoWithId_(self, id_)) != nil) {
    return [((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(nodeInfo)) getExternalIPAddress];
  }
  else {
    return nil;
  }
}

- (JavaNetInetAddress *)getBindAddressWithId:(id)id_ {
  if ([id_ isKindOfClass:[JavaNetInetSocketAddress class]]) {
    return [((JavaNetInetSocketAddress *) nil_chk(((JavaNetInetSocketAddress *) cast_chk(id_, [JavaNetInetSocketAddress class])))) getAddress];
  }
  EduUmassCsGnsserverNodeconfigNodeInfo *nodeInfo = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(hostInfoMapping_)) getWithId:id_];
  if (nodeInfo != nil) {
    return [nodeInfo getIpAddress];
  }
  else if ((nodeInfo = EduUmassCsGnsserverNodeconfigGNSNodeConfig_getActiveReplicaInfoWithId_(self, id_)) != nil) {
    return [((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(nodeInfo)) getIpAddress];
  }
  else if ((nodeInfo = EduUmassCsGnsserverNodeconfigGNSNodeConfig_getReconfiguratorInfoWithId_(self, id_)) != nil) {
    return [((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(nodeInfo)) getIpAddress];
  }
  else {
    return nil;
  }
}

- (jlong)getPingLatencyWithId:(id)id_ {
  EduUmassCsGnsserverNodeconfigNodeInfo *nodeInfo = EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForAnyNodeWithId_(self, id_);
  return (nodeInfo == nil) ? EduUmassCsGnsserverNodeconfigGNSNodeConfig_INVALID_PING_LATENCY : [((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(nodeInfo)) getPingLatency];
}

- (void)updatePingLatencyWithId:(id)id_
                       withLong:(jlong)responseTime {
  EduUmassCsGnsserverNodeconfigNodeInfo *nodeInfo = EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForAnyNodeWithId_(self, id_);
  if (nodeInfo != nil) {
    [nodeInfo setPingLatencyWithLong:responseTime];
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsGnsserverMainGNSConfig_getLogger())) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"Can''t update latency for {0}." withId:[nil_chk(id_) description]];
  }
}

- (jboolean)nodeExistsWithId:(id)id_ {
  return EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForAnyNodeWithId_(self, id_) != nil;
}

- (jint)getPortForTopLevelNodeWithId:(id)nameServerId
withEduUmassCsGnsserverMainOldHackyConstants_PortType:(EduUmassCsGnsserverMainOldHackyConstants_PortType *)portType {
  switch ([portType ordinal]) {
    case EduUmassCsGnsserverMainOldHackyConstants_PortType_Enum_NS_TCP_PORT:
    return [self getNodePortWithId:nameServerId];
    case EduUmassCsGnsserverMainOldHackyConstants_PortType_Enum_NS_ADMIN_PORT:
    return [self getAdminPortWithId:nameServerId];
    case EduUmassCsGnsserverMainOldHackyConstants_PortType_Enum_CCP_PORT:
    return [self getCcpPortWithId:nameServerId];
    case EduUmassCsGnsserverMainOldHackyConstants_PortType_Enum_CCP_ADMIN_PORT:
    return [self getCcpAdminPortWithId:nameServerId];
  }
  return -1;
}

- (id)getClosestServer {
  return [self getClosestServerWithJavaUtilSet:[self getNodeIDs]];
}

- (id)getClosestServerWithJavaUtilSet:(id<JavaUtilSet>)servers {
  return [self getClosestServerWithJavaUtilSet:servers withJavaUtilSet:nil];
}

- (id)getClosestServerWithJavaUtilSet:(id<JavaUtilSet>)serverIds
                      withJavaUtilSet:(id<JavaUtilSet>)excludeServers {
  if (serverIds == nil || [serverIds isEmpty]) {
    return nil;
  }
  if (nodeID_ != nil && [serverIds containsWithId:nodeID_] && excludeServers != nil && ![excludeServers containsWithId:nodeID_]) {
    return nodeID_;
  }
  jlong lowestLatency = JavaLangLong_MAX_VALUE;
  id nameServerID = nil;
  for (id __strong serverId in serverIds) {
    if (excludeServers != nil && [excludeServers containsWithId:serverId]) {
      continue;
    }
    jlong pingLatency = [self getPingLatencyWithId:serverId];
    if (pingLatency != EduUmassCsGnsserverNodeconfigGNSNodeConfig_INVALID_PING_LATENCY && pingLatency < lowestLatency) {
      lowestLatency = pingLatency;
      nameServerID = serverId;
    }
  }
  if (nameServerID == nil) {
    for (id __strong serverId in serverIds) {
      if (excludeServers != nil && [excludeServers containsWithId:serverId]) {
        continue;
      }
      nameServerID = serverId;
      break;
    }
  }
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsGnsserverMainGNSConfig_getLogger())) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"Closest server is {0} exluded: {1}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ nameServerID, excludeServers } count:2 type:NSObject_class_()]];
  return nameServerID;
}

- (id)valueOfWithNSString:(NSString *)nodeAsString {
  switch ([EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeIDType(self) ordinal]) {
    case EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_Enum_String:
    return nodeAsString;
    case EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_Enum_Integer:
    return (JavaLangInteger_valueOfWithNSString_([((NSString *) nil_chk(nodeAsString)) java_trim]));
    case EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_Enum_InetAddress:
    @try {
      return (JavaNetInetAddress_getByNameWithNSString_([((NSString *) nil_chk(nodeAsString)) java_trim]));
    }
    @catch (JavaNetUnknownHostException *e) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot parse node as an InetAddress");
    }
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Bad NodeIDType");
  }
}

- (id<JavaUtilSet>)getValuesFromStringSetWithJavaUtilSet:(id<JavaUtilSet>)strNodes {
  id<JavaUtilSet> nodes = create_JavaUtilHashSet_init();
  for (NSString * __strong strNode in nil_chk(strNodes)) {
    [nodes addWithId:[self valueOfWithNSString:strNode]];
  }
  return nodes;
}

- (id<JavaUtilSet>)getValuesFromJSONArrayWithOrgJsonJSONArray:(OrgJsonJSONArray *)array {
  id<JavaUtilSet> nodes = create_JavaUtilHashSet_init();
  for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(array)) length]; i++) {
    [nodes addWithId:[self valueOfWithNSString:[array getStringWithInt:i]]];
  }
  return nodes;
}

- (EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *)getNodeIDType {
  return EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeIDType(self);
}

- (jlong)getVersion {
  return version__;
}

- (void)addHostInfoWithJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap>)mapping
                                                withId:(id)id_
                                          withNSString:(NSString *)ipAddress
                                          withNSString:(NSString *)externalIP
                                               withInt:(jint)startingPort
                                              withLong:(jlong)pingLatency
                                            withDouble:(jdouble)latitude
                                            withDouble:(jdouble)longitude {
  EduUmassCsGnsserverNodeconfigGNSNodeConfig_addHostInfoWithJavaUtilConcurrentConcurrentMap_withId_withNSString_withNSString_withInt_withLong_withDouble_withDouble_(self, mapping, id_, ipAddress, externalIP, startingPort, pingLatency, latitude, longitude);
}

- (void)addHostInfoWithJavaUtilConcurrentConcurrentMap:(id<JavaUtilConcurrentConcurrentMap>)mapping
                                                withId:(id)id_
                                          withNSString:(NSString *)ipAddress
                                          withNSString:(NSString *)externalIP
                                   withJavaLangInteger:(JavaLangInteger *)startingPort {
  EduUmassCsGnsserverNodeconfigGNSNodeConfig_addHostInfoWithJavaUtilConcurrentConcurrentMap_withId_withNSString_withNSString_withJavaLangInteger_(self, mapping, id_, ipAddress, externalIP, startingPort);
}

- (jboolean)isOldStyleFileWithNSString:(NSString *)file {
  return EduUmassCsGnsserverNodeconfigGNSNodeConfig_isOldStyleFileWithNSString_(self, file);
}

- (void)shutdown {
}

- (NSString *)description {
  return JreStrcat("$@$ZC", @"GNSNodeConfig{nodeID=", nodeID_, @", isLocalNameServer=", isCPP_, '}');
}

- (jlong)getEmulatedDelayWithId:(id)node2 {
  return [self getPingLatencyWithId:node2];
}

- (void)dealloc {
  RELEASE_(nodeID_);
  RELEASE_(hostInfoMapping_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 0, 2, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LEduUmassCsGnsserverNodeconfigNodeInfo;", 0x2, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, 7, 5, -1, 8, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LEduUmassCsGnsserverNodeconfigNodeInfo;", 0x2, 9, 5, -1, 6, -1, -1 },
    { NULL, "LEduUmassCsGnsserverNodeconfigNodeInfo;", 0x2, 10, 5, -1, 6, -1, -1 },
    { NULL, "LEduUmassCsGnsserverNodeconfigNodeInfo;", 0x2, 11, 5, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, 12, 5, -1, 13, -1, -1 },
    { NULL, "LNSObject;", 0x1, 14, 5, -1, 13, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 5, -1, 16, -1, -1 },
    { NULL, "I", 0x1, 17, 5, -1, 16, -1, -1 },
    { NULL, "I", 0x1, 18, 5, -1, 16, -1, -1 },
    { NULL, "I", 0x1, 19, 5, -1, 16, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, 20, 5, -1, 21, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, 22, 5, -1, 21, -1, -1 },
    { NULL, "J", 0x1, 23, 5, -1, 24, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, 27, -1, -1 },
    { NULL, "Z", 0x1, 28, 5, -1, 8, -1, -1 },
    { NULL, "I", 0x1, 29, 30, -1, 31, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 32, 33, -1 },
    { NULL, "LNSObject;", 0x1, 34, 35, -1, 36, -1, -1 },
    { NULL, "LNSObject;", 0x1, 34, 37, -1, 38, -1, -1 },
    { NULL, "LNSObject;", 0x1, 39, 40, 41, 42, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 43, 35, -1, 44, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 45, 46, 47, 48, -1, -1 },
    { NULL, "LEduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 50, -1, 51, -1, -1 },
    { NULL, "V", 0x2, 49, 52, -1, 53, -1, -1 },
    { NULL, "Z", 0x2, 54, 40, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 55, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 56, 5, -1, 24, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withId:);
  methods[2].selector = @selector(getNodeIDs);
  methods[3].selector = @selector(getActiveReplicas);
  methods[4].selector = @selector(getActiveReplicaInfoWithId:);
  methods[5].selector = @selector(isActiveReplicaWithId:);
  methods[6].selector = @selector(getReconfigurators);
  methods[7].selector = @selector(getReconfiguratorInfoWithId:);
  methods[8].selector = @selector(getNodeInfoForAnyNodeWithId:);
  methods[9].selector = @selector(getNodeInfoForTopLevelNodeWithId:);
  methods[10].selector = @selector(getReplicaNodeIdForTopLevelNodeWithId:);
  methods[11].selector = @selector(getReconfiguratorNodeIdForTopLevelNodeWithId:);
  methods[12].selector = @selector(getNumberOfNodes);
  methods[13].selector = @selector(getNodePortWithId:);
  methods[14].selector = @selector(getAdminPortWithId:);
  methods[15].selector = @selector(getCcpPortWithId:);
  methods[16].selector = @selector(getCcpAdminPortWithId:);
  methods[17].selector = @selector(getNodeAddressWithId:);
  methods[18].selector = @selector(getBindAddressWithId:);
  methods[19].selector = @selector(getPingLatencyWithId:);
  methods[20].selector = @selector(updatePingLatencyWithId:withLong:);
  methods[21].selector = @selector(nodeExistsWithId:);
  methods[22].selector = @selector(getPortForTopLevelNodeWithId:withEduUmassCsGnsserverMainOldHackyConstants_PortType:);
  methods[23].selector = @selector(getClosestServer);
  methods[24].selector = @selector(getClosestServerWithJavaUtilSet:);
  methods[25].selector = @selector(getClosestServerWithJavaUtilSet:withJavaUtilSet:);
  methods[26].selector = @selector(valueOfWithNSString:);
  methods[27].selector = @selector(getValuesFromStringSetWithJavaUtilSet:);
  methods[28].selector = @selector(getValuesFromJSONArrayWithOrgJsonJSONArray:);
  methods[29].selector = @selector(getNodeIDType);
  methods[30].selector = @selector(getVersion);
  methods[31].selector = @selector(addHostInfoWithJavaUtilConcurrentConcurrentMap:withId:withNSString:withNSString:withInt:withLong:withDouble:withDouble:);
  methods[32].selector = @selector(addHostInfoWithJavaUtilConcurrentConcurrentMap:withId:withNSString:withNSString:withJavaLangInteger:);
  methods[33].selector = @selector(isOldStyleFileWithNSString:);
  methods[34].selector = @selector(shutdown);
  methods[35].selector = @selector(description);
  methods[36].selector = @selector(getEmulatedDelayWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INVALID_PING_LATENCY", "J", .constantValue.asLong = EduUmassCsGnsserverNodeconfigGNSNodeConfig_INVALID_PING_LATENCY, 0x19, -1, -1, -1, -1 },
    { "INVALID_PORT", "I", .constantValue.asInt = EduUmassCsGnsserverNodeconfigGNSNodeConfig_INVALID_PORT, 0x19, -1, -1, -1, -1 },
    { "version__", "J", .constantValue.asLong = 0, 0x2, 57, -1, -1, -1 },
    { "nodeID_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 58, -1 },
    { "isCPP_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hostInfoMapping_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x2, -1, -1, 59, -1 },
    { "addSuffix_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "LNSString;LNSObject;", "(Ljava/lang/String;TNodeIDType;)V", "()Ljava/util/Set<TNodeIDType;>;", "getActiveReplicaInfo", "LNSObject;", "(TNodeIDType;)Ledu/umass/cs/gnsserver/nodeconfig/NodeInfo<TNodeIDType;>;", "isActiveReplica", "(TNodeIDType;)Z", "getReconfiguratorInfo", "getNodeInfoForAnyNode", "getNodeInfoForTopLevelNode", "getReplicaNodeIdForTopLevelNode", "(TNodeIDType;)TNodeIDType;", "getReconfiguratorNodeIdForTopLevelNode", "getNodePort", "(TNodeIDType;)I", "getAdminPort", "getCcpPort", "getCcpAdminPort", "getNodeAddress", "(TNodeIDType;)Ljava/net/InetAddress;", "getBindAddress", "getPingLatency", "(TNodeIDType;)J", "updatePingLatency", "LNSObject;J", "(TNodeIDType;J)V", "nodeExists", "getPortForTopLevelNode", "LNSObject;LEduUmassCsGnsserverMainOldHackyConstants_PortType;", "(TNodeIDType;Ledu/umass/cs/gnsserver/main/OldHackyConstants$PortType;)I", "()TNodeIDType;", (void *)&EduUmassCsGnsserverNodeconfigGNSNodeConfig__Annotations$0, "getClosestServer", "LJavaUtilSet;", "(Ljava/util/Set<TNodeIDType;>;)TNodeIDType;", "LJavaUtilSet;LJavaUtilSet;", "(Ljava/util/Set<TNodeIDType;>;Ljava/util/Set<TNodeIDType;>;)TNodeIDType;", "valueOf", "LNSString;", "LJavaLangIllegalArgumentException;", "(Ljava/lang/String;)TNodeIDType;", "getValuesFromStringSet", "(Ljava/util/Set<Ljava/lang/String;>;)Ljava/util/Set<TNodeIDType;>;", "getValuesFromJSONArray", "LOrgJsonJSONArray;", "LOrgJsonJSONException;", "(Lorg/json/JSONArray;)Ljava/util/Set<TNodeIDType;>;", "addHostInfo", "LJavaUtilConcurrentConcurrentMap;LNSObject;LNSString;LNSString;IJDD", "(Ljava/util/concurrent/ConcurrentMap<TNodeIDType;Ledu/umass/cs/gnsserver/nodeconfig/NodeInfo<TNodeIDType;>;>;TNodeIDType;Ljava/lang/String;Ljava/lang/String;IJDD)V", "LJavaUtilConcurrentConcurrentMap;LNSObject;LNSString;LNSString;LJavaLangInteger;", "(Ljava/util/concurrent/ConcurrentMap<TNodeIDType;Ledu/umass/cs/gnsserver/nodeconfig/NodeInfo<TNodeIDType;>;>;TNodeIDType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;)V", "isOldStyleFile", "toString", "getEmulatedDelay", "version", "TNodeIDType;", "Ljava/util/concurrent/ConcurrentMap<TNodeIDType;Ledu/umass/cs/gnsserver/nodeconfig/NodeInfo<TNodeIDType;>;>;", "LEduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass;", "<NodeIDType:Ljava/lang/Object;>Ljava/lang/Object;Ledu/umass/cs/gnsserver/nodeconfig/GNSInterfaceNodeConfig<TNodeIDType;>;Ledu/umass/cs/gnsserver/utils/GNSShutdownable;Ledu/umass/cs/nio/nioutils/InterfaceDelayEmulator<TNodeIDType;>;" };
  static const J2ObjcClassInfo _EduUmassCsGnsserverNodeconfigGNSNodeConfig = { "GNSNodeConfig", "edu.umass.cs.gnsserver.nodeconfig", ptrTable, methods, fields, 7, 0x1, 37, 7, -1, 60, -1, 61, -1 };
  return &_EduUmassCsGnsserverNodeconfigGNSNodeConfig;
}

@end

void EduUmassCsGnsserverNodeconfigGNSNodeConfig_init(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self) {
  NSObject_init(self);
  self->version__ = 0l;
  self->isCPP_ = false;
  self->addSuffix_ = false;
  id<JavaUtilMap> activeMap = EduUmassCsGigapaxosPaxosConfig_getActives();
  JreStrongAssignAndConsume(&self->hostInfoMapping_, new_JavaUtilConcurrentConcurrentHashMap_init());
  for (NSString * __strong active in nil_chk([((id<JavaUtilMap>) nil_chk(activeMap)) keySet])) {
    EduUmassCsGnsserverNodeconfigGNSNodeConfig_addHostInfoWithJavaUtilConcurrentConcurrentMap_withId_withNSString_withNSString_withJavaLangInteger_(self, self->hostInfoMapping_, [self valueOfWithNSString:active], [((JavaNetInetAddress *) nil_chk([((JavaNetInetSocketAddress *) nil_chk([activeMap getWithId:active])) getAddress])) description], [((JavaNetInetAddress *) nil_chk([((JavaNetInetSocketAddress *) nil_chk([activeMap getWithId:active])) getAddress])) description], JavaLangInteger_valueOfWithInt_([((JavaNetInetSocketAddress *) nil_chk([activeMap getWithId:active])) getPort] > 0 ? [((JavaNetInetSocketAddress *) nil_chk([activeMap getWithId:active])) getPort] : EduUmassCsGnsserverMainOldHackyConstants_DEFAULT_STARTING_PORT));
  }
}

EduUmassCsGnsserverNodeconfigGNSNodeConfig *new_EduUmassCsGnsserverNodeconfigGNSNodeConfig_init() {
  J2OBJC_NEW_IMPL(EduUmassCsGnsserverNodeconfigGNSNodeConfig, init)
}

EduUmassCsGnsserverNodeconfigGNSNodeConfig *create_EduUmassCsGnsserverNodeconfigGNSNodeConfig_init() {
  J2OBJC_CREATE_IMPL(EduUmassCsGnsserverNodeconfigGNSNodeConfig, init)
}

void EduUmassCsGnsserverNodeconfigGNSNodeConfig_initWithNSString_withId_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, NSString *hostsFile, id nameServerID) {
  NSObject_init(self);
  self->version__ = 0l;
  self->isCPP_ = false;
  self->addSuffix_ = false;
  if (nameServerID == nil) {
    self->isCPP_ = true;
  }
  JreStrongAssign(&self->nodeID_, nameServerID);
  if (EduUmassCsGnsserverNodeconfigGNSNodeConfig_isOldStyleFileWithNSString_(self, hostsFile)) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$", @"THE USE OF OLD STYLE NODE INFO FILES IS NOT LONGER SUPPORTED. FIX THIS FILE: ", hostsFile));
  }
  for (id<JavaUtilMap_Entry> __strong hostInfoEntry in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->hostInfoMapping_)) entrySet])) {
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsGnsserverMainGNSConfig_getLogger())) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:@"For {0} Id: {1} Host Name:{2} IP:{3} Start Port:{4}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ nameServerID == nil ? @"CPP" : [nameServerID description], [nil_chk([((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(hostInfoEntry)) getValue])) getId]) description], [((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk([hostInfoEntry getValue])) getIpAddress], [((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk([hostInfoEntry getValue])) getExternalIPAddress], JavaLangInteger_valueOfWithInt_([((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk([hostInfoEntry getValue])) getStartingPortNumber]) } count:5 type:NSObject_class_()]];
  }
}

EduUmassCsGnsserverNodeconfigGNSNodeConfig *new_EduUmassCsGnsserverNodeconfigGNSNodeConfig_initWithNSString_withId_(NSString *hostsFile, id nameServerID) {
  J2OBJC_NEW_IMPL(EduUmassCsGnsserverNodeconfigGNSNodeConfig, initWithNSString_withId_, hostsFile, nameServerID)
}

EduUmassCsGnsserverNodeconfigGNSNodeConfig *create_EduUmassCsGnsserverNodeconfigGNSNodeConfig_initWithNSString_withId_(NSString *hostsFile, id nameServerID) {
  J2OBJC_CREATE_IMPL(EduUmassCsGnsserverNodeconfigGNSNodeConfig, initWithNSString_withId_, hostsFile, nameServerID)
}

EduUmassCsGnsserverNodeconfigNodeInfo *EduUmassCsGnsserverNodeconfigGNSNodeConfig_getActiveReplicaInfoWithId_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, id id_) {
  for (EduUmassCsGnsserverNodeconfigNodeInfo * __strong hostInfo in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->hostInfoMapping_)) values])) {
    if ([nil_chk([((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(hostInfo)) getActiveReplicaID]) isEqual:id_]) {
      return hostInfo;
    }
  }
  return nil;
}

EduUmassCsGnsserverNodeconfigNodeInfo *EduUmassCsGnsserverNodeconfigGNSNodeConfig_getReconfiguratorInfoWithId_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, id id_) {
  for (EduUmassCsGnsserverNodeconfigNodeInfo * __strong hostInfo in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->hostInfoMapping_)) values])) {
    if ([nil_chk([((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(hostInfo)) getReconfiguratorID]) isEqual:id_]) {
      return hostInfo;
    }
  }
  return nil;
}

EduUmassCsGnsserverNodeconfigNodeInfo *EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForAnyNodeWithId_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, id id_) {
  for (EduUmassCsGnsserverNodeconfigNodeInfo * __strong hostInfo in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->hostInfoMapping_)) values])) {
    if ([nil_chk([((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(hostInfo)) getId]) isEqual:id_] || [nil_chk([hostInfo getActiveReplicaID]) isEqual:id_] || [nil_chk([hostInfo getReconfiguratorID]) isEqual:id_]) {
      return hostInfo;
    }
  }
  return nil;
}

EduUmassCsGnsserverNodeconfigNodeInfo *EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeInfoForTopLevelNodeWithId_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, id id_) {
  for (EduUmassCsGnsserverNodeconfigNodeInfo * __strong hostInfo in nil_chk([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->hostInfoMapping_)) values])) {
    if ([nil_chk([((EduUmassCsGnsserverNodeconfigNodeInfo *) nil_chk(hostInfo)) getId]) isEqual:id_]) {
      return hostInfo;
    }
  }
  return nil;
}

EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *EduUmassCsGnsserverNodeconfigGNSNodeConfig_getNodeIDType(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self) {
  return EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_valueOfWithNSString_([NSString_class_() getSimpleName]);
}

void EduUmassCsGnsserverNodeconfigGNSNodeConfig_addHostInfoWithJavaUtilConcurrentConcurrentMap_withId_withNSString_withNSString_withInt_withLong_withDouble_withDouble_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, id<JavaUtilConcurrentConcurrentMap> mapping, id id_, NSString *ipAddress, NSString *externalIP, jint startingPort, jlong pingLatency, jdouble latitude, jdouble longitude) {
  NSString *idString = [nil_chk(id_) description];
  id activeReplicaID = [self valueOfWithNSString:JreStrcat("$$", idString, (self->addSuffix_ ? @"_Repl" : @""))];
  id ReconfiguratorID = [self valueOfWithNSString:JreStrcat("$$", idString, (self->addSuffix_ ? @"_Recon" : @""))];
  EduUmassCsGnsserverNodeconfigNodeInfo *nodeInfo = create_EduUmassCsGnsserverNodeconfigNodeInfo_initWithId_withId_withId_withNSString_withNSString_withInt_withLong_withDouble_withDouble_(id_, activeReplicaID, ReconfiguratorID, ipAddress, externalIP, startingPort, pingLatency, latitude, longitude);
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsGnsserverMainGNSConfig_getLogger())) fineWithNSString:[nodeInfo description]];
  [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(mapping)) putWithId:id_ withId:nodeInfo];
}

void EduUmassCsGnsserverNodeconfigGNSNodeConfig_addHostInfoWithJavaUtilConcurrentConcurrentMap_withId_withNSString_withNSString_withJavaLangInteger_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, id<JavaUtilConcurrentConcurrentMap> mapping, id id_, NSString *ipAddress, NSString *externalIP, JavaLangInteger *startingPort) {
  EduUmassCsGnsserverNodeconfigGNSNodeConfig_addHostInfoWithJavaUtilConcurrentConcurrentMap_withId_withNSString_withNSString_withInt_withLong_withDouble_withDouble_(self, mapping, id_, ipAddress, externalIP, startingPort != nil ? [startingPort intValue] : EduUmassCsGnsserverMainOldHackyConstants_DEFAULT_STARTING_PORT, 0, 0, 0);
}

jboolean EduUmassCsGnsserverNodeconfigGNSNodeConfig_isOldStyleFileWithNSString_(EduUmassCsGnsserverNodeconfigGNSNodeConfig *self, NSString *file) {
  @try {
    JavaIoBufferedReader *reader = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoFileReader_initWithNSString_(file));
    if (![reader ready]) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Problem reading host config file ", file));
    }
    NSString *line = [reader readLine];
    if (line == nil) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Hosts file is empty", file));
    }
    return ((IOSObjectArray *) nil_chk([line java_split:@"\\s+"]))->size_ > 4;
  }
  @catch (JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsGnsserverMainGNSConfig_getLogger())) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Problem reading hosts file:{0}" withNSException:e];
    return false;
  }
}

IOSObjectArray *EduUmassCsGnsserverNodeconfigGNSNodeConfig__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsGnsserverNodeconfigGNSNodeConfig)

J2OBJC_INITIALIZED_DEFN(EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass)

EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_values_[3];

@implementation EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass

+ (IOSObjectArray *)values {
  return EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_values();
}

+ (EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *)valueOfWithNSString:(NSString *)name {
  return EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "String", "LEduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "Integer", "LEduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "InetAddress", "LEduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass, String), &JreEnum(EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass, Integer), &JreEnum(EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass, InetAddress), "LEduUmassCsGnsserverNodeconfigGNSNodeConfig;", "Ljava/lang/Enum<Ledu/umass/cs/gnsserver/nodeconfig/GNSNodeConfig$NodeIDClass;>;" };
  static const J2ObjcClassInfo _EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass = { "NodeIDClass", "edu.umass.cs.gnsserver.nodeconfig", ptrTable, methods, fields, 7, 0x401a, 2, 3, 5, -1, -1, 6, -1 };
  return &_EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass;
}

+ (void)initialize {
  if (self == [EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"String", @"Integer", @"InetAddress",
    };
    for (jint i = 0; i < 3; i++) {
      (EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass)
  }
}

@end

void EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_initWithNSString_withInt_(EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_values() {
  EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_initialize();
  return [IOSObjectArray arrayWithObjects:EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_values_ count:3 type:EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_class_()];
}

EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_valueOfWithNSString_(NSString *name) {
  EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_initialize();
  for (int i = 0; i < 3; i++) {
    EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *e = EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass *EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_fromOrdinal(NSUInteger ordinal) {
  EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsGnsserverNodeconfigGNSNodeConfig_NodeIDClass)
