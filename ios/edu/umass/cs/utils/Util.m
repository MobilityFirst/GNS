//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../gig_ios/src/edu/umass/cs/utils/Util.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/umass/cs/utils/Util.h"
#include "java/io/File.h"
#include "java/io/FileWriter.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Void.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/URL.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/text/DecimalFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "java/util/function/Consumer.h"
#include "java/util/logging/Logger.h"
#include "java/util/stream/Stream.h"
#include "net/minidev/json/JSONObject.h"
#include "net/minidev/json/JSONValue.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONObject.h"

@interface EduUmassCsUtilsUtil ()

+ (id<JavaUtilCollection>)truncateWithJavaUtilCollection:(id<JavaUtilCollection>)list
                                                 withInt:(jint)size;

+ (NSString *)sockAddrToEncodedStringWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_;

+ (JavaNetInetSocketAddress *)encodedStringToInetSocketAddressWithNSString:(NSString *)str;

+ (void)testGetInetSocketAddressFromString;

+ (void)testGetInetAddressFromString;

+ (void)testToBytesAndBack;

+ (id<JavaUtilSet>)getWrapperTypes;

@end

inline JavaUtilLoggingLogger *EduUmassCsUtilsUtil_get_log();
inline JavaUtilLoggingLogger *EduUmassCsUtilsUtil_set_log(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *EduUmassCsUtilsUtil_log;
J2OBJC_STATIC_FIELD_OBJ(EduUmassCsUtilsUtil, log, JavaUtilLoggingLogger *)

inline NSString *EduUmassCsUtilsUtil_get_CHARSET();
static NSString *EduUmassCsUtilsUtil_CHARSET = @"ISO-8859-1";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduUmassCsUtilsUtil, CHARSET, NSString *)

inline id<JavaUtilSet> EduUmassCsUtilsUtil_get_WRAPPER_TYPES();
static id<JavaUtilSet> EduUmassCsUtilsUtil_WRAPPER_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduUmassCsUtilsUtil, WRAPPER_TYPES, id<JavaUtilSet>)

__attribute__((unused)) static id<JavaUtilCollection> EduUmassCsUtilsUtil_truncateWithJavaUtilCollection_withInt_(id<JavaUtilCollection> list, jint size);

__attribute__((unused)) static NSString *EduUmassCsUtilsUtil_sockAddrToEncodedStringWithJavaNetInetSocketAddress_(JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static JavaNetInetSocketAddress *EduUmassCsUtilsUtil_encodedStringToInetSocketAddressWithNSString_(NSString *str);

__attribute__((unused)) static void EduUmassCsUtilsUtil_testGetInetSocketAddressFromString();

__attribute__((unused)) static void EduUmassCsUtilsUtil_testGetInetAddressFromString();

__attribute__((unused)) static void EduUmassCsUtilsUtil_testToBytesAndBack();

__attribute__((unused)) static id<JavaUtilSet> EduUmassCsUtilsUtil_getWrapperTypes();

@interface EduUmassCsUtilsUtil_1 : NSObject {
 @public
  id val$obj_;
  jint val$size_;
}

- (instancetype)initWithId:(id)capture$0
                   withInt:(jint)capture$1;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUmassCsUtilsUtil_1)

__attribute__((unused)) static void EduUmassCsUtilsUtil_1_initWithId_withInt_(EduUmassCsUtilsUtil_1 *self, id capture$0, jint capture$1);

__attribute__((unused)) static EduUmassCsUtilsUtil_1 *new_EduUmassCsUtilsUtil_1_initWithId_withInt_(id capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsUtilsUtil_1 *create_EduUmassCsUtilsUtil_1_initWithId_withInt_(id capture$0, jint capture$1);

@interface EduUmassCsUtilsUtil_2 : NSObject {
 @public
  id val$obj_;
  jint val$size_;
  jint val$prefixSize_;
  jint val$suffixSize_;
}

- (instancetype)initWithId:(id)capture$0
                   withInt:(jint)capture$1
                   withInt:(jint)capture$2
                   withInt:(jint)capture$3;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUmassCsUtilsUtil_2)

__attribute__((unused)) static void EduUmassCsUtilsUtil_2_initWithId_withInt_withInt_withInt_(EduUmassCsUtilsUtil_2 *self, id capture$0, jint capture$1, jint capture$2, jint capture$3);

__attribute__((unused)) static EduUmassCsUtilsUtil_2 *new_EduUmassCsUtilsUtil_2_initWithId_withInt_withInt_withInt_(id capture$0, jint capture$1, jint capture$2, jint capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsUtilsUtil_2 *create_EduUmassCsUtilsUtil_2_initWithId_withInt_withInt_withInt_(id capture$0, jint capture$1, jint capture$2, jint capture$3);

@interface EduUmassCsUtilsUtil_3 : NSObject {
 @public
  id<JavaUtilCollection> val$list_;
  jint val$size_;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)capture$0
                                   withInt:(jint)capture$1;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUmassCsUtilsUtil_3)

__attribute__((unused)) static void EduUmassCsUtilsUtil_3_initWithJavaUtilCollection_withInt_(EduUmassCsUtilsUtil_3 *self, id<JavaUtilCollection> capture$0, jint capture$1);

__attribute__((unused)) static EduUmassCsUtilsUtil_3 *new_EduUmassCsUtilsUtil_3_initWithJavaUtilCollection_withInt_(id<JavaUtilCollection> capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsUtilsUtil_3 *create_EduUmassCsUtilsUtil_3_initWithJavaUtilCollection_withInt_(id<JavaUtilCollection> capture$0, jint capture$1);

@interface EduUmassCsUtilsUtil_4 : NSObject {
 @public
  id<JavaUtilSet> val$set_;
  id val$exclude_;
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0
                             withId:(id)capture$1;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUmassCsUtilsUtil_4)

__attribute__((unused)) static void EduUmassCsUtilsUtil_4_initWithJavaUtilSet_withId_(EduUmassCsUtilsUtil_4 *self, id<JavaUtilSet> capture$0, id capture$1);

__attribute__((unused)) static EduUmassCsUtilsUtil_4 *new_EduUmassCsUtilsUtil_4_initWithJavaUtilSet_withId_(id<JavaUtilSet> capture$0, id capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsUtilsUtil_4 *create_EduUmassCsUtilsUtil_4_initWithJavaUtilSet_withId_(id<JavaUtilSet> capture$0, id capture$1);

@interface EduUmassCsUtilsUtil_5 : NSObject {
 @public
  JavaLangBoolean *val$log_;
}

- (instancetype)initWithJavaLangBoolean:(JavaLangBoolean *)capture$0;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUmassCsUtilsUtil_5)

__attribute__((unused)) static void EduUmassCsUtilsUtil_5_initWithJavaLangBoolean_(EduUmassCsUtilsUtil_5 *self, JavaLangBoolean *capture$0);

__attribute__((unused)) static EduUmassCsUtilsUtil_5 *new_EduUmassCsUtilsUtil_5_initWithJavaLangBoolean_(JavaLangBoolean *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsUtilsUtil_5 *create_EduUmassCsUtilsUtil_5_initWithJavaLangBoolean_(JavaLangBoolean *capture$0);

@interface EduUmassCsUtilsUtil_6 : NSObject < JavaUtilFunctionConsumer > {
 @public
  id<JavaUtilMap> val$result_;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)capture$0;

- (void)acceptWithId:(id<JavaUtilMap_Entry>)entry_;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUmassCsUtilsUtil_6)

__attribute__((unused)) static void EduUmassCsUtilsUtil_6_initWithJavaUtilMap_(EduUmassCsUtilsUtil_6 *self, id<JavaUtilMap> capture$0);

__attribute__((unused)) static EduUmassCsUtilsUtil_6 *new_EduUmassCsUtilsUtil_6_initWithJavaUtilMap_(id<JavaUtilMap> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsUtilsUtil_6 *create_EduUmassCsUtilsUtil_6_initWithJavaUtilMap_(id<JavaUtilMap> capture$0);

J2OBJC_INITIALIZED_DEFN(EduUmassCsUtilsUtil)

JavaTextDecimalFormat *EduUmassCsUtilsUtil_decimalFormat;

@implementation EduUmassCsUtilsUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduUmassCsUtilsUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)dfWithDouble:(jdouble)d {
  return EduUmassCsUtilsUtil_dfWithDouble_(d);
}

+ (NSString *)msWithDouble:(jdouble)d {
  return EduUmassCsUtilsUtil_msWithDouble_(d);
}

+ (NSString *)muWithDouble:(jdouble)d {
  return EduUmassCsUtilsUtil_muWithDouble_(d);
}

+ (NSString *)nmuWithDouble:(jdouble)d {
  return EduUmassCsUtilsUtil_nmuWithDouble_(d);
}

+ (jdouble)movingAverageWithDouble:(jdouble)sample
                        withDouble:(jdouble)historicalAverage
                        withDouble:(jdouble)alpha {
  return EduUmassCsUtilsUtil_movingAverageWithDouble_withDouble_withDouble_(sample, historicalAverage, alpha);
}

+ (jdouble)movingAverageWithDouble:(jdouble)sample
                        withDouble:(jdouble)historicalAverage {
  return EduUmassCsUtilsUtil_movingAverageWithDouble_withDouble_(sample, historicalAverage);
}

+ (jdouble)movingAverageWithLong:(jlong)sample
                      withDouble:(jdouble)historicalAverage {
  return EduUmassCsUtilsUtil_movingAverageWithLong_withDouble_(sample, historicalAverage);
}

+ (jdouble)movingAverageWithLong:(jlong)sample
                      withDouble:(jdouble)historicalAverage
                      withDouble:(jdouble)alpha {
  return EduUmassCsUtilsUtil_movingAverageWithLong_withDouble_withDouble_(sample, historicalAverage, alpha);
}

+ (jboolean)oneInWithInt:(jint)n {
  return EduUmassCsUtilsUtil_oneInWithInt_(n);
}

+ (jint)roundToIntWithDouble:(jdouble)d {
  return EduUmassCsUtilsUtil_roundToIntWithDouble_(d);
}

+ (void)assertAssertionsEnabled {
  EduUmassCsUtilsUtil_assertAssertionsEnabled();
}

+ (NSString *)prefixWithNSString:(NSString *)str
                         withInt:(jint)prefixLength {
  return EduUmassCsUtilsUtil_prefixWithNSString_withInt_(str, prefixLength);
}

+ (id<JavaUtilSet>)arrayToIntSetWithIntArray:(IOSIntArray *)array {
  return EduUmassCsUtilsUtil_arrayToIntSetWithIntArray_(array);
}

+ (IOSIntArray *)filterWithIntArray:(IOSIntArray *)array
                            withInt:(jint)member {
  return EduUmassCsUtilsUtil_filterWithIntArray_withInt_(array, member);
}

+ (id<JavaUtilSet>)setToStringSetWithJavaUtilSet:(id<JavaUtilSet>)set {
  return EduUmassCsUtilsUtil_setToStringSetWithJavaUtilSet_(set);
}

+ (id<JavaUtilSet>)stringSetToIntegerSetWithJavaUtilSet:(id<JavaUtilSet>)set {
  return EduUmassCsUtilsUtil_stringSetToIntegerSetWithJavaUtilSet_(set);
}

+ (IOSIntArray *)setToIntArrayWithJavaUtilSet:(id<JavaUtilSet>)set {
  return EduUmassCsUtilsUtil_setToIntArrayWithJavaUtilSet_(set);
}

+ (IOSObjectArray *)setToNodeIdArrayWithJavaUtilSet:(id<JavaUtilSet>)set {
  return EduUmassCsUtilsUtil_setToNodeIdArrayWithJavaUtilSet_(set);
}

+ (IOSObjectArray *)setToIntegerArrayWithJavaUtilSet:(id<JavaUtilSet>)set {
  return EduUmassCsUtilsUtil_setToIntegerArrayWithJavaUtilSet_(set);
}

+ (IOSIntArray *)stringToIntArrayWithNSString:(NSString *)string {
  return EduUmassCsUtilsUtil_stringToIntArrayWithNSString_(string);
}

+ (id<JavaUtilSet>)stringToStringSetWithNSString:(NSString *)string {
  return EduUmassCsUtilsUtil_stringToStringSetWithNSString_(string);
}

+ (OrgJsonJSONObject *)toJSONObjectWithNSString:(NSString *)s {
  return EduUmassCsUtilsUtil_toJSONObjectWithNSString_(s);
}

+ (IOSObjectArray *)intToIntegerArrayWithIntArray:(IOSIntArray *)array {
  return EduUmassCsUtilsUtil_intToIntegerArrayWithIntArray_(array);
}

+ (id<JavaUtilSet>)arrayOfIntToStringSetWithIntArray:(IOSIntArray *)array {
  return EduUmassCsUtilsUtil_arrayOfIntToStringSetWithIntArray_(array);
}

+ (NSString *)arrayOfIntToStringWithIntArray:(IOSIntArray *)array {
  return EduUmassCsUtilsUtil_arrayOfIntToStringWithIntArray_(array);
}

+ (jboolean)containsWithInt:(jint)member
               withIntArray:(IOSIntArray *)array {
  return EduUmassCsUtilsUtil_containsWithInt_withIntArray_(member, array);
}

+ (id<JavaUtilSet>)arrayOfObjectsToStringSetWithNSObjectArray:(IOSObjectArray *)array {
  return EduUmassCsUtilsUtil_arrayOfObjectsToStringSetWithNSObjectArray_(array);
}

+ (id)selectRandomWithJavaUtilCollection:(id<JavaUtilCollection>)set {
  return EduUmassCsUtilsUtil_selectRandomWithJavaUtilCollection_(set);
}

+ (JavaNetInetSocketAddress *)getInetSocketAddressFromStringWithNSString:(NSString *)s {
  return EduUmassCsUtilsUtil_getInetSocketAddressFromStringWithNSString_(s);
}

+ (JavaNetInetSocketAddress *)getInetSocketAddressFromStringStrictWithNSString:(NSString *)s {
  return EduUmassCsUtilsUtil_getInetSocketAddressFromStringStrictWithNSString_(s);
}

+ (JavaNetInetAddress *)getInetAddressFromStringWithNSString:(NSString *)s {
  return EduUmassCsUtilsUtil_getInetAddressFromStringWithNSString_(s);
}

+ (NSString *)toJSONStringWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return EduUmassCsUtilsUtil_toJSONStringWithJavaUtilCollection_(collection);
}

+ (IOSObjectArray *)jsonToStringArrayWithNSString:(NSString *)jsonString {
  return EduUmassCsUtilsUtil_jsonToStringArrayWithNSString_(jsonString);
}

+ (NSString *)toJSONStringWithIntArray:(IOSIntArray *)array {
  return EduUmassCsUtilsUtil_toJSONStringWithIntArray_(array);
}

+ (JavaUtilArrayList *)JSONArrayToArrayListIntegerWithOrgJsonJSONArray:(OrgJsonJSONArray *)jsonArray {
  return EduUmassCsUtilsUtil_JSONArrayToArrayListIntegerWithOrgJsonJSONArray_(jsonArray);
}

+ (IOSObjectArray *)getNamesWithOrgJsonJSONObject:(OrgJsonJSONObject *)jo {
  return EduUmassCsUtilsUtil_getNamesWithOrgJsonJSONObject_(jo);
}

- (void)assertEnabled {
  @try {
    JreAssert((false), (@"edu/umass/cs/utils/Util.java:339 condition failed: assert (false);"));
  }
  @catch (JavaLangException *e) {
    return;
  }
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Asserts not enabled; exiting");
}

+ (id)truncateWithId:(id)obj
             withInt:(jint)size {
  return EduUmassCsUtilsUtil_truncateWithId_withInt_(obj, size);
}

+ (id)truncateWithId:(id)obj
             withInt:(jint)prefixSize
             withInt:(jint)suffixSize {
  return EduUmassCsUtilsUtil_truncateWithId_withInt_withInt_(obj, prefixSize, suffixSize);
}

+ (IOSByteArray *)getAlphanumericAsBytes {
  return EduUmassCsUtilsUtil_getAlphanumericAsBytes();
}

+ (IOSByteArray *)getRandomAlphanumericBytes {
  return EduUmassCsUtilsUtil_getRandomAlphanumericBytes();
}

+ (IOSByteArray *)getRandomAlphanumericBytesWithInt:(jint)size {
  return EduUmassCsUtilsUtil_getRandomAlphanumericBytesWithInt_(size);
}

+ (id<JavaUtilCollection>)truncateWithJavaUtilCollection:(id<JavaUtilCollection>)list
                                                 withInt:(jint)size {
  return EduUmassCsUtilsUtil_truncateWithJavaUtilCollection_withInt_(list, size);
}

+ (id)truncatedLogWithJavaUtilCollection:(id<JavaUtilCollection>)list
                                 withInt:(jint)size {
  return EduUmassCsUtilsUtil_truncatedLogWithJavaUtilCollection_withInt_(list, size);
}

+ (id)suicideWithJavaUtilLoggingLogger:(JavaUtilLoggingLogger *)logger
                          withNSString:(NSString *)error {
  return EduUmassCsUtilsUtil_suicideWithJavaUtilLoggingLogger_withNSString_(logger, error);
}

+ (id)suicideWithNSString:(NSString *)error {
  return EduUmassCsUtilsUtil_suicideWithNSString_(error);
}

+ (JavaNioByteBuffer *)putWithJavaNioByteBuffer:(JavaNioByteBuffer *)dst
                          withJavaNioByteBuffer:(JavaNioByteBuffer *)src
                                        withInt:(jint)transferLimit {
  return EduUmassCsUtilsUtil_putWithJavaNioByteBuffer_withJavaNioByteBuffer_withInt_(dst, src, transferLimit);
}

+ (JavaNioByteBuffer *)putWithJavaNioByteBuffer:(JavaNioByteBuffer *)dst
                          withJavaNioByteBuffer:(JavaNioByteBuffer *)src {
  return EduUmassCsUtilsUtil_putWithJavaNioByteBuffer_withJavaNioByteBuffer_(dst, src);
}

+ (NSString *)sockAddrToEncodedStringWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  return EduUmassCsUtilsUtil_sockAddrToEncodedStringWithJavaNetInetSocketAddress_(isa_);
}

+ (JavaNetInetSocketAddress *)encodedStringToInetSocketAddressWithNSString:(NSString *)str {
  return EduUmassCsUtilsUtil_encodedStringToInetSocketAddressWithNSString_(str);
}

+ (IOSByteArray *)longToBytesWithLong:(jlong)value {
  return EduUmassCsUtilsUtil_longToBytesWithLong_(value);
}

+ (NSString *)longToEncodedStringWithLong:(jlong)value {
  return EduUmassCsUtilsUtil_longToEncodedStringWithLong_(value);
}

+ (jlong)bytesToLongWithByteArray:(IOSByteArray *)bytes {
  return EduUmassCsUtilsUtil_bytesToLongWithByteArray_(bytes);
}

+ (jlong)encodedStringToLongWithNSString:(NSString *)str {
  return EduUmassCsUtilsUtil_encodedStringToLongWithNSString_(str);
}

+ (jlong)toLongWithId:(id)obj {
  return EduUmassCsUtilsUtil_toLongWithId_(obj);
}

+ (id<JavaUtilSet>)toIntSetWithInt:(jint)i {
  return EduUmassCsUtilsUtil_toIntSetWithInt_(i);
}

+ (void)testGetInetSocketAddressFromString {
  EduUmassCsUtilsUtil_testGetInetSocketAddressFromString();
}

+ (void)testGetInetAddressFromString {
  EduUmassCsUtilsUtil_testGetInetAddressFromString();
}

+ (void)testToBytesAndBack {
  EduUmassCsUtilsUtil_testToBytesAndBack();
}

+ (id)getRandomOtherThanWithJavaUtilSet:(id<JavaUtilSet>)all
                        withJavaUtilSet:(id<JavaUtilSet>)exclude {
  return EduUmassCsUtilsUtil_getRandomOtherThanWithJavaUtilSet_withJavaUtilSet_(all, exclude);
}

+ (id)getRandomOtherThanWithJavaUtilSet:(id<JavaUtilSet>)all
                                 withId:(id)exclude {
  return EduUmassCsUtilsUtil_getRandomOtherThanWithJavaUtilSet_withId_(all, exclude);
}

+ (id<JavaUtilSet>)getOtherThanWithJavaUtilSet:(id<JavaUtilSet>)set
                                        withId:(id)exclude {
  return EduUmassCsUtilsUtil_getOtherThanWithJavaUtilSet_withId_(set, exclude);
}

+ (id)getOtherThanStringWithJavaUtilSet:(id<JavaUtilSet>)set
                                 withId:(id)exclude {
  return EduUmassCsUtilsUtil_getOtherThanStringWithJavaUtilSet_withId_(set, exclude);
}

+ (jboolean)isWrapperTypeWithIOSClass:(IOSClass *)clazz {
  return EduUmassCsUtilsUtil_isWrapperTypeWithIOSClass_(clazz);
}

+ (id<JavaUtilSet>)getWrapperTypes {
  return EduUmassCsUtilsUtil_getWrapperTypes();
}

+ (OrgJsonJSONObject *)viaJSONSmartWithNetMinidevJsonJSONObject:(NetMinidevJsonJSONObject *)jsonS {
  return EduUmassCsUtilsUtil_viaJSONSmartWithNetMinidevJsonJSONObject_(jsonS);
}

+ (JavaNetInetSocketAddress *)offsetPortWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                                                             withInt:(jint)offset {
  return EduUmassCsUtilsUtil_offsetPortWithJavaNetInetSocketAddress_withInt_(isa_, offset);
}

+ (id<JavaUtilSet>)removeFromSetCopyWithJavaUtilSet:(id<JavaUtilSet>)set
                                             withId:(id)element {
  return EduUmassCsUtilsUtil_removeFromSetCopyWithJavaUtilSet_withId_(set, element);
}

+ (id<JavaUtilSet>)removeFromSetWithJavaUtilSet:(id<JavaUtilSet>)set
                                         withId:(id)element {
  return EduUmassCsUtilsUtil_removeFromSetWithJavaUtilSet_withId_(set, element);
}

+ (id<JavaUtilSet>)diffWithJavaUtilSet:(id<JavaUtilSet>)s1
                       withJavaUtilSet:(id<JavaUtilSet>)s2 {
  return EduUmassCsUtilsUtil_diffWithJavaUtilSet_withJavaUtilSet_(s1, s2);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduUmassCsUtilsUtil_mainWithNSStringArray_(args);
}

+ (jboolean)recursiveRemoveWithJavaIoFile:(JavaIoFile *)file {
  return EduUmassCsUtilsUtil_recursiveRemoveWithJavaIoFile_(file);
}

+ (IOSObjectArray *)getMatchingFilesWithNSString:(NSString *)dir
                               withNSStringArray:(IOSObjectArray *)match {
  return EduUmassCsUtilsUtil_getMatchingFilesWithNSString_withNSStringArray_(dir, match);
}

+ (jboolean)recursiveRemoveWithNSString:(NSString *)dir
                      withNSStringArray:(IOSObjectArray *)match {
  return EduUmassCsUtilsUtil_recursiveRemoveWithNSString_withNSStringArray_(dir, match);
}

+ (JavaUtilArrayList *)recursiveFindWithNSString:(NSString *)dir
                                    withNSString:(NSString *)regex {
  return EduUmassCsUtilsUtil_recursiveFindWithNSString_withNSString_(dir, regex);
}

+ (void)wipeoutFileWithNSString:(NSString *)filename {
  EduUmassCsUtilsUtil_wipeoutFileWithNSString_(filename);
}

+ (id<JavaUtilSet>)socketAddressesToInetAddressesWithJavaNetInetSocketAddressArray:(IOSObjectArray *)sockAddrs {
  return EduUmassCsUtilsUtil_socketAddressesToInetAddressesWithJavaNetInetSocketAddressArray_(sockAddrs);
}

+ (id)printThisLine {
  return EduUmassCsUtilsUtil_printThisLine();
}

+ (id)printThisLineWithJavaLangBoolean:(JavaLangBoolean *)log {
  return EduUmassCsUtilsUtil_printThisLineWithJavaLangBoolean_(log);
}

+ (id<JavaUtilMap>)sortByValueWithJavaUtilMap:(id<JavaUtilMap>)map {
  return EduUmassCsUtilsUtil_sortByValueWithJavaUtilMap_(map);
}

+ (id<JavaUtilSet>)getSocketAddressesWithOrgJsonJSONArray:(OrgJsonJSONArray *)jarray {
  return EduUmassCsUtilsUtil_getSocketAddressesWithOrgJsonJSONArray_(jarray);
}

+ (OrgJsonJSONArray *)getJSONArrayWithJavaUtilSet:(id<JavaUtilSet>)addresses {
  return EduUmassCsUtilsUtil_getJSONArrayWithJavaUtilSet_(addresses);
}

+ (NSString *)toStringWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)entryServer {
  return EduUmassCsUtilsUtil_toStringWithJavaNetInetSocketAddress_(entryServer);
}

+ (id<JavaUtilList>)JSONArrayToListWithOrgJsonJSONArray:(OrgJsonJSONArray *)jsonArray {
  return EduUmassCsUtilsUtil_JSONArrayToListWithOrgJsonJSONArray_(jsonArray);
}

+ (id<JavaUtilMap>)JSONObjectToMapWithOrgJsonJSONObject:(OrgJsonJSONObject *)json {
  return EduUmassCsUtilsUtil_JSONObjectToMapWithOrgJsonJSONObject_(json);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 3, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 4, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x19, 5, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x19, 5, 7, -1, -1, -1, -1 },
    { NULL, "D", 0x19, 5, 8, -1, -1, -1, -1 },
    { NULL, "D", 0x19, 5, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 15, 16, -1, 17, -1, -1 },
    { NULL, "[I", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 20, 21, -1, 22, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 23, 21, -1, 24, -1, -1 },
    { NULL, "[I", 0x9, 25, 21, -1, 26, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 27, 21, -1, 28, -1, -1 },
    { NULL, "[LJavaLangInteger;", 0x9, 29, 21, -1, 30, -1, -1 },
    { NULL, "[I", 0x9, 31, 32, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 33, 32, 34, 35, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x9, 36, 32, 34, -1, -1, -1 },
    { NULL, "[LJavaLangInteger;", 0x9, 37, 16, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 38, 16, -1, 39, -1, -1 },
    { NULL, "LNSString;", 0x9, 40, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 41, 42, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 43, 44, -1, 45, -1, -1 },
    { NULL, "LNSObject;", 0x9, 46, 47, -1, 48, -1, -1 },
    { NULL, "LJavaNetInetSocketAddress;", 0x9, 49, 32, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetSocketAddress;", 0x9, 50, 32, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x9, 51, 32, 52, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 53, 47, -1, 54, -1, -1 },
    { NULL, "[LNSString;", 0x9, 55, 32, 34, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 53, 16, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x9, 56, 57, 34, 58, -1, -1 },
    { NULL, "[LNSString;", 0x9, 59, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 61, 62, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 61, 63, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 64, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0xa, 61, 65, -1, 66, -1, -1 },
    { NULL, "LNSObject;", 0x9, 67, 65, -1, 68, -1, -1 },
    { NULL, "LNSObject;", 0x9, 69, 70, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 69, 32, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x9, 71, 72, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x9, 71, 73, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 74, 75, 76, -1, -1, -1 },
    { NULL, "LJavaNetInetSocketAddress;", 0xa, 77, 32, 78, -1, -1, -1 },
    { NULL, "[B", 0x9, 79, 80, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 81, 80, 76, -1, -1, -1 },
    { NULL, "J", 0x9, 82, 83, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 84, 32, 76, -1, -1, -1 },
    { NULL, "J", 0x9, 85, 86, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 87, 11, -1, 88, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, 52, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, 78, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 89, 90, -1, 91, -1, -1 },
    { NULL, "LNSObject;", 0x9, 89, 92, -1, 93, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 94, 92, -1, 95, -1, -1 },
    { NULL, "LNSObject;", 0x9, 96, 92, -1, 93, -1, -1 },
    { NULL, "Z", 0x9, 97, 98, -1, 99, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xa, -1, -1, -1, 100, -1, -1 },
    { NULL, "LOrgJsonJSONObject;", 0x9, 101, 102, 34, -1, -1, -1 },
    { NULL, "LJavaNetInetSocketAddress;", 0x9, 103, 104, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 105, 92, -1, 95, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 106, 92, -1, 95, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 107, 90, -1, 108, -1, -1 },
    { NULL, "V", 0x9, 109, 110, 111, -1, -1, -1 },
    { NULL, "Z", 0x9, 112, 113, -1, -1, -1, -1 },
    { NULL, "[LJavaIoFile;", 0x89, 114, 115, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 112, 115, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x9, 116, 117, -1, 118, -1, -1 },
    { NULL, "V", 0x9, 119, 32, 120, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 121, 122, -1, 123, -1, -1 },
    { NULL, "LNSObject;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 124, 125, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 126, 127, -1, 128, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 129, 57, 34, 130, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x9, 131, 21, 34, 132, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 75, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 134, 57, 34, 135, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 136, 60, 34, 137, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(dfWithDouble:);
  methods[2].selector = @selector(msWithDouble:);
  methods[3].selector = @selector(muWithDouble:);
  methods[4].selector = @selector(nmuWithDouble:);
  methods[5].selector = @selector(movingAverageWithDouble:withDouble:withDouble:);
  methods[6].selector = @selector(movingAverageWithDouble:withDouble:);
  methods[7].selector = @selector(movingAverageWithLong:withDouble:);
  methods[8].selector = @selector(movingAverageWithLong:withDouble:withDouble:);
  methods[9].selector = @selector(oneInWithInt:);
  methods[10].selector = @selector(roundToIntWithDouble:);
  methods[11].selector = @selector(assertAssertionsEnabled);
  methods[12].selector = @selector(prefixWithNSString:withInt:);
  methods[13].selector = @selector(arrayToIntSetWithIntArray:);
  methods[14].selector = @selector(filterWithIntArray:withInt:);
  methods[15].selector = @selector(setToStringSetWithJavaUtilSet:);
  methods[16].selector = @selector(stringSetToIntegerSetWithJavaUtilSet:);
  methods[17].selector = @selector(setToIntArrayWithJavaUtilSet:);
  methods[18].selector = @selector(setToNodeIdArrayWithJavaUtilSet:);
  methods[19].selector = @selector(setToIntegerArrayWithJavaUtilSet:);
  methods[20].selector = @selector(stringToIntArrayWithNSString:);
  methods[21].selector = @selector(stringToStringSetWithNSString:);
  methods[22].selector = @selector(toJSONObjectWithNSString:);
  methods[23].selector = @selector(intToIntegerArrayWithIntArray:);
  methods[24].selector = @selector(arrayOfIntToStringSetWithIntArray:);
  methods[25].selector = @selector(arrayOfIntToStringWithIntArray:);
  methods[26].selector = @selector(containsWithInt:withIntArray:);
  methods[27].selector = @selector(arrayOfObjectsToStringSetWithNSObjectArray:);
  methods[28].selector = @selector(selectRandomWithJavaUtilCollection:);
  methods[29].selector = @selector(getInetSocketAddressFromStringWithNSString:);
  methods[30].selector = @selector(getInetSocketAddressFromStringStrictWithNSString:);
  methods[31].selector = @selector(getInetAddressFromStringWithNSString:);
  methods[32].selector = @selector(toJSONStringWithJavaUtilCollection:);
  methods[33].selector = @selector(jsonToStringArrayWithNSString:);
  methods[34].selector = @selector(toJSONStringWithIntArray:);
  methods[35].selector = @selector(JSONArrayToArrayListIntegerWithOrgJsonJSONArray:);
  methods[36].selector = @selector(getNamesWithOrgJsonJSONObject:);
  methods[37].selector = @selector(assertEnabled);
  methods[38].selector = @selector(truncateWithId:withInt:);
  methods[39].selector = @selector(truncateWithId:withInt:withInt:);
  methods[40].selector = @selector(getAlphanumericAsBytes);
  methods[41].selector = @selector(getRandomAlphanumericBytes);
  methods[42].selector = @selector(getRandomAlphanumericBytesWithInt:);
  methods[43].selector = @selector(truncateWithJavaUtilCollection:withInt:);
  methods[44].selector = @selector(truncatedLogWithJavaUtilCollection:withInt:);
  methods[45].selector = @selector(suicideWithJavaUtilLoggingLogger:withNSString:);
  methods[46].selector = @selector(suicideWithNSString:);
  methods[47].selector = @selector(putWithJavaNioByteBuffer:withJavaNioByteBuffer:withInt:);
  methods[48].selector = @selector(putWithJavaNioByteBuffer:withJavaNioByteBuffer:);
  methods[49].selector = @selector(sockAddrToEncodedStringWithJavaNetInetSocketAddress:);
  methods[50].selector = @selector(encodedStringToInetSocketAddressWithNSString:);
  methods[51].selector = @selector(longToBytesWithLong:);
  methods[52].selector = @selector(longToEncodedStringWithLong:);
  methods[53].selector = @selector(bytesToLongWithByteArray:);
  methods[54].selector = @selector(encodedStringToLongWithNSString:);
  methods[55].selector = @selector(toLongWithId:);
  methods[56].selector = @selector(toIntSetWithInt:);
  methods[57].selector = @selector(testGetInetSocketAddressFromString);
  methods[58].selector = @selector(testGetInetAddressFromString);
  methods[59].selector = @selector(testToBytesAndBack);
  methods[60].selector = @selector(getRandomOtherThanWithJavaUtilSet:withJavaUtilSet:);
  methods[61].selector = @selector(getRandomOtherThanWithJavaUtilSet:withId:);
  methods[62].selector = @selector(getOtherThanWithJavaUtilSet:withId:);
  methods[63].selector = @selector(getOtherThanStringWithJavaUtilSet:withId:);
  methods[64].selector = @selector(isWrapperTypeWithIOSClass:);
  methods[65].selector = @selector(getWrapperTypes);
  methods[66].selector = @selector(viaJSONSmartWithNetMinidevJsonJSONObject:);
  methods[67].selector = @selector(offsetPortWithJavaNetInetSocketAddress:withInt:);
  methods[68].selector = @selector(removeFromSetCopyWithJavaUtilSet:withId:);
  methods[69].selector = @selector(removeFromSetWithJavaUtilSet:withId:);
  methods[70].selector = @selector(diffWithJavaUtilSet:withJavaUtilSet:);
  methods[71].selector = @selector(mainWithNSStringArray:);
  methods[72].selector = @selector(recursiveRemoveWithJavaIoFile:);
  methods[73].selector = @selector(getMatchingFilesWithNSString:withNSStringArray:);
  methods[74].selector = @selector(recursiveRemoveWithNSString:withNSStringArray:);
  methods[75].selector = @selector(recursiveFindWithNSString:withNSString:);
  methods[76].selector = @selector(wipeoutFileWithNSString:);
  methods[77].selector = @selector(socketAddressesToInetAddressesWithJavaNetInetSocketAddressArray:);
  methods[78].selector = @selector(printThisLine);
  methods[79].selector = @selector(printThisLineWithJavaLangBoolean:);
  methods[80].selector = @selector(sortByValueWithJavaUtilMap:);
  methods[81].selector = @selector(getSocketAddressesWithOrgJsonJSONArray:);
  methods[82].selector = @selector(getJSONArrayWithJavaUtilSet:);
  methods[83].selector = @selector(toStringWithJavaNetInetSocketAddress:);
  methods[84].selector = @selector(JSONArrayToListWithOrgJsonJSONArray:);
  methods[85].selector = @selector(JSONObjectToMapWithOrgJsonJSONObject:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "log", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0xa, -1, 138, -1, -1 },
    { "decimalFormat", "LJavaTextDecimalFormat;", .constantValue.asLong = 0, 0x19, -1, 139, -1, -1 },
    { "ALPHA", "D", .constantValue.asDouble = EduUmassCsUtilsUtil_ALPHA, 0x19, -1, -1, -1, -1 },
    { "CHARSET", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 140, -1, -1 },
    { "WRAPPER_TYPES", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 141, 142, -1 },
  };
  static const void *ptrTable[] = { "df", "D", "ms", "mu", "nmu", "movingAverage", "DDD", "DD", "JD", "JDD", "oneIn", "I", "roundToInt", "prefix", "LNSString;I", "arrayToIntSet", "[I", "([I)Ljava/util/Set<Ljava/lang/Integer;>;", "filter", "[II", "setToStringSet", "LJavaUtilSet;", "(Ljava/util/Set<*>;)Ljava/util/Set<Ljava/lang/String;>;", "stringSetToIntegerSet", "(Ljava/util/Set<Ljava/lang/String;>;)Ljava/util/Set<Ljava/lang/Integer;>;", "setToIntArray", "(Ljava/util/Set<Ljava/lang/Integer;>;)[I", "setToNodeIdArray", "(Ljava/util/Set<*>;)[Ljava/lang/Object;", "setToIntegerArray", "(Ljava/util/Set<Ljava/lang/Integer;>;)[Ljava/lang/Integer;", "stringToIntArray", "LNSString;", "stringToStringSet", "LOrgJsonJSONException;", "(Ljava/lang/String;)Ljava/util/Set<Ljava/lang/String;>;", "toJSONObject", "intToIntegerArray", "arrayOfIntToStringSet", "([I)Ljava/util/Set<Ljava/lang/String;>;", "arrayOfIntToString", "contains", "I[I", "arrayOfObjectsToStringSet", "[LNSObject;", "([Ljava/lang/Object;)Ljava/util/Set<Ljava/lang/String;>;", "selectRandom", "LJavaUtilCollection;", "(Ljava/util/Collection<*>;)Ljava/lang/Object;", "getInetSocketAddressFromString", "getInetSocketAddressFromStringStrict", "getInetAddressFromString", "LJavaNetUnknownHostException;", "toJSONString", "(Ljava/util/Collection<*>;)Ljava/lang/String;", "jsonToStringArray", "JSONArrayToArrayListInteger", "LOrgJsonJSONArray;", "(Lorg/json/JSONArray;)Ljava/util/ArrayList<Ljava/lang/Integer;>;", "getNames", "LOrgJsonJSONObject;", "truncate", "LNSObject;I", "LNSObject;II", "getRandomAlphanumericBytes", "LJavaUtilCollection;I", "(Ljava/util/Collection<*>;I)Ljava/util/Collection<*>;", "truncatedLog", "(Ljava/util/Collection<*>;I)Ljava/lang/Object;", "suicide", "LJavaUtilLoggingLogger;LNSString;", "put", "LJavaNioByteBuffer;LJavaNioByteBuffer;I", "LJavaNioByteBuffer;LJavaNioByteBuffer;", "sockAddrToEncodedString", "LJavaNetInetSocketAddress;", "LJavaIoUnsupportedEncodingException;", "encodedStringToInetSocketAddress", "LJavaNetUnknownHostException;LJavaIoUnsupportedEncodingException;", "longToBytes", "J", "longToEncodedString", "bytesToLong", "[B", "encodedStringToLong", "toLong", "LNSObject;", "toIntSet", "(I)Ljava/util/Set<Ljava/lang/Integer;>;", "getRandomOtherThan", "LJavaUtilSet;LJavaUtilSet;", "(Ljava/util/Set<*>;Ljava/util/Set<*>;)Ljava/lang/Object;", "LJavaUtilSet;LNSObject;", "(Ljava/util/Set<*>;Ljava/lang/Object;)Ljava/lang/Object;", "getOtherThan", "(Ljava/util/Set<*>;Ljava/lang/Object;)Ljava/util/Set<*>;", "getOtherThanString", "isWrapperType", "LIOSClass;", "(Ljava/lang/Class<*>;)Z", "()Ljava/util/Set<Ljava/lang/Class<*>;>;", "viaJSONSmart", "LNetMinidevJsonJSONObject;", "offsetPort", "LJavaNetInetSocketAddress;I", "removeFromSetCopy", "removeFromSet", "diff", "(Ljava/util/Set<*>;Ljava/util/Set<*>;)Ljava/util/Set<Ljava/lang/Object;>;", "main", "[LNSString;", "LJavaIoUnsupportedEncodingException;LJavaNetUnknownHostException;", "recursiveRemove", "LJavaIoFile;", "getMatchingFiles", "LNSString;[LNSString;", "recursiveFind", "LNSString;LNSString;", "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/ArrayList<Ljava/lang/String;>;", "wipeoutFile", "LJavaIoIOException;", "socketAddressesToInetAddresses", "[LJavaNetInetSocketAddress;", "([Ljava/net/InetSocketAddress;)Ljava/util/Set<Ljava/net/InetAddress;>;", "printThisLine", "LJavaLangBoolean;", "sortByValue", "LJavaUtilMap;", "<K:Ljava/lang/Object;V::Ljava/lang/Comparable<-TV;>;>(Ljava/util/Map<TK;TV;>;)Ljava/util/Map<TK;TV;>;", "getSocketAddresses", "(Lorg/json/JSONArray;)Ljava/util/Set<Ljava/net/InetSocketAddress;>;", "getJSONArray", "(Ljava/util/Set<Ljava/net/InetSocketAddress;>;)Lorg/json/JSONArray;", "toString", "JSONArrayToList", "(Lorg/json/JSONArray;)Ljava/util/List<*>;", "JSONObjectToMap", "(Lorg/json/JSONObject;)Ljava/util/Map<Ljava/lang/String;*>;", &EduUmassCsUtilsUtil_log, &EduUmassCsUtilsUtil_decimalFormat, &EduUmassCsUtilsUtil_CHARSET, &EduUmassCsUtilsUtil_WRAPPER_TYPES, "Ljava/util/Set<Ljava/lang/Class<*>;>;" };
  static const J2ObjcClassInfo _EduUmassCsUtilsUtil = { "Util", "edu.umass.cs.utils", ptrTable, methods, fields, 7, 0x1, 86, 5, -1, -1, -1, -1, -1 };
  return &_EduUmassCsUtilsUtil;
}

+ (void)initialize {
  if (self == [EduUmassCsUtilsUtil class]) {
    JreStrongAssign(&EduUmassCsUtilsUtil_log, JavaUtilLoggingLogger_getLoggerWithNSString_([EduUmassCsUtilsUtil_class_() getName]));
    JreStrongAssignAndConsume(&EduUmassCsUtilsUtil_decimalFormat, new_JavaTextDecimalFormat_initWithNSString_(@"#.#"));
    JreStrongAssign(&EduUmassCsUtilsUtil_WRAPPER_TYPES, EduUmassCsUtilsUtil_getWrapperTypes());
    J2OBJC_SET_INITIALIZED(EduUmassCsUtilsUtil)
  }
}

@end

void EduUmassCsUtilsUtil_init(EduUmassCsUtilsUtil *self) {
  NSObject_init(self);
}

EduUmassCsUtilsUtil *new_EduUmassCsUtilsUtil_init() {
  J2OBJC_NEW_IMPL(EduUmassCsUtilsUtil, init)
}

EduUmassCsUtilsUtil *create_EduUmassCsUtilsUtil_init() {
  J2OBJC_CREATE_IMPL(EduUmassCsUtilsUtil, init)
}

NSString *EduUmassCsUtilsUtil_dfWithDouble_(jdouble d) {
  EduUmassCsUtilsUtil_initialize();
  return [((JavaTextDecimalFormat *) nil_chk(EduUmassCsUtilsUtil_decimalFormat)) formatWithDouble:d];
}

NSString *EduUmassCsUtilsUtil_msWithDouble_(jdouble d) {
  EduUmassCsUtilsUtil_initialize();
  return JreStrcat("$$", [((JavaTextDecimalFormat *) nil_chk(EduUmassCsUtilsUtil_decimalFormat)) formatWithDouble:d], @"ms");
}

NSString *EduUmassCsUtilsUtil_muWithDouble_(jdouble d) {
  EduUmassCsUtilsUtil_initialize();
  return JreStrcat("$$", [((JavaTextDecimalFormat *) nil_chk(EduUmassCsUtilsUtil_decimalFormat)) formatWithDouble:d * 1000], @"us");
}

NSString *EduUmassCsUtilsUtil_nmuWithDouble_(jdouble d) {
  EduUmassCsUtilsUtil_initialize();
  return JreStrcat("$$", [((JavaTextDecimalFormat *) nil_chk(EduUmassCsUtilsUtil_decimalFormat)) formatWithDouble:d / 1000.0], @"us");
}

jdouble EduUmassCsUtilsUtil_movingAverageWithDouble_withDouble_withDouble_(jdouble sample, jdouble historicalAverage, jdouble alpha) {
  EduUmassCsUtilsUtil_initialize();
  return (1 - alpha) * ((jdouble) historicalAverage) + alpha * ((jdouble) sample);
}

jdouble EduUmassCsUtilsUtil_movingAverageWithDouble_withDouble_(jdouble sample, jdouble historicalAverage) {
  EduUmassCsUtilsUtil_initialize();
  return EduUmassCsUtilsUtil_movingAverageWithDouble_withDouble_withDouble_(sample, historicalAverage, EduUmassCsUtilsUtil_ALPHA);
}

jdouble EduUmassCsUtilsUtil_movingAverageWithLong_withDouble_(jlong sample, jdouble historicalAverage) {
  EduUmassCsUtilsUtil_initialize();
  return EduUmassCsUtilsUtil_movingAverageWithDouble_withDouble_((jdouble) sample, historicalAverage);
}

jdouble EduUmassCsUtilsUtil_movingAverageWithLong_withDouble_withDouble_(jlong sample, jdouble historicalAverage, jdouble alpha) {
  EduUmassCsUtilsUtil_initialize();
  return EduUmassCsUtilsUtil_movingAverageWithDouble_withDouble_withDouble_((jdouble) sample, historicalAverage, alpha);
}

jboolean EduUmassCsUtilsUtil_oneInWithInt_(jint n) {
  EduUmassCsUtilsUtil_initialize();
  return JavaLangMath_random() < 1.0 / JavaLangMath_maxWithInt_withInt_(1, n) ? true : false;
}

jint EduUmassCsUtilsUtil_roundToIntWithDouble_(jdouble d) {
  EduUmassCsUtilsUtil_initialize();
  return (jint) JavaLangMath_roundWithDouble_(d);
}

void EduUmassCsUtilsUtil_assertAssertionsEnabled() {
  EduUmassCsUtilsUtil_initialize();
  jboolean assertOn = false;
  JreAssert((assertOn = true), (@"edu/umass/cs/utils/Util.java:91 condition failed: assert assertOn = true;"));
  if (!assertOn) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Asserts not enabled; enable assertions using the '-ea' JVM option");
  }
}

NSString *EduUmassCsUtilsUtil_prefixWithNSString_withInt_(NSString *str, jint prefixLength) {
  EduUmassCsUtilsUtil_initialize();
  if (str == nil || ((jint) [str length]) <= prefixLength) {
    return str;
  }
  return [str java_substring:0 endIndex:prefixLength];
}

id<JavaUtilSet> EduUmassCsUtilsUtil_arrayToIntSetWithIntArray_(IOSIntArray *array) {
  EduUmassCsUtilsUtil_initialize();
  JavaUtilTreeSet *set = create_JavaUtilTreeSet_init();
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(array))->size_; i++) {
    [set addWithId:JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(array, i))];
  }
  return set;
}

IOSIntArray *EduUmassCsUtilsUtil_filterWithIntArray_withInt_(IOSIntArray *array, jint member) {
  EduUmassCsUtilsUtil_initialize();
  {
    IOSIntArray *a__ = array;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint a = *b__++;
      if (a == member) {
        IOSIntArray *filtered = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(array))->size_ - 1];
        jint j = 0;
        {
          IOSIntArray *a__ = array;
          jint const *b__ = a__->buffer_;
          jint const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            jint b = *b__++;
            if (b != member) *IOSIntArray_GetRef(filtered, j++) = b;
          }
        }
        return filtered;
      }
    }
  }
  return array;
}

id<JavaUtilSet> EduUmassCsUtilsUtil_setToStringSetWithJavaUtilSet_(id<JavaUtilSet> set) {
  EduUmassCsUtilsUtil_initialize();
  id<JavaUtilSet> result = create_JavaUtilHashSet_init();
  for (id __strong id_ in nil_chk(set)) {
    [result addWithId:[nil_chk(id_) description]];
  }
  return result;
}

id<JavaUtilSet> EduUmassCsUtilsUtil_stringSetToIntegerSetWithJavaUtilSet_(id<JavaUtilSet> set) {
  EduUmassCsUtilsUtil_initialize();
  id<JavaUtilSet> intIDs = create_JavaUtilHashSet_init();
  for (NSString * __strong s in nil_chk(set)) [intIDs addWithId:JavaLangInteger_valueOfWithNSString_(s)];
  return intIDs;
}

IOSIntArray *EduUmassCsUtilsUtil_setToIntArrayWithJavaUtilSet_(id<JavaUtilSet> set) {
  EduUmassCsUtilsUtil_initialize();
  IOSIntArray *array = [IOSIntArray arrayWithLength:[((id<JavaUtilSet>) nil_chk(set)) size]];
  jint i = 0;
  for (JavaLangInteger *boxed__ in set) {
    jint id_ = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    *IOSIntArray_GetRef(array, i++) = id_;
  }
  return array;
}

IOSObjectArray *EduUmassCsUtilsUtil_setToNodeIdArrayWithJavaUtilSet_(id<JavaUtilSet> set) {
  EduUmassCsUtilsUtil_initialize();
  IOSObjectArray *array = [IOSObjectArray arrayWithLength:[((id<JavaUtilSet>) nil_chk(set)) size] type:NSObject_class_()];
  jint i = 0;
  for (id __strong id_ in set) {
    IOSObjectArray_Set(array, i++, id_);
  }
  return array;
}

IOSObjectArray *EduUmassCsUtilsUtil_setToIntegerArrayWithJavaUtilSet_(id<JavaUtilSet> set) {
  EduUmassCsUtilsUtil_initialize();
  IOSObjectArray *array = [IOSObjectArray arrayWithLength:[((id<JavaUtilSet>) nil_chk(set)) size] type:JavaLangInteger_class_()];
  jint i = 0;
  for (JavaLangInteger * __strong id_ in set) {
    IOSObjectArray_Set(array, i++, id_);
  }
  return array;
}

IOSIntArray *EduUmassCsUtilsUtil_stringToIntArrayWithNSString_(NSString *string) {
  EduUmassCsUtilsUtil_initialize();
  string = [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(string)) java_replaceAll:@"\\[" withReplacement:@""])) java_replaceAll:@"\\]" withReplacement:@""])) java_replaceAll:@"\\s" withReplacement:@""];
  IOSObjectArray *tokens = [((NSString *) nil_chk(string)) java_split:@","];
  IOSIntArray *array = [IOSIntArray arrayWithLength:((IOSObjectArray *) nil_chk(tokens))->size_];
  for (jint i = 0; i < array->size_; i++) {
    *IOSIntArray_GetRef(array, i) = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(tokens, i));
  }
  return array;
}

id<JavaUtilSet> EduUmassCsUtilsUtil_stringToStringSetWithNSString_(NSString *string) {
  EduUmassCsUtilsUtil_initialize();
  OrgJsonJSONArray *jsonArray = create_OrgJsonJSONArray_initWithNSString_(string);
  id<JavaUtilSet> set = create_JavaUtilHashSet_init();
  for (jint i = 0; i < [jsonArray length]; i++) [set addWithId:[jsonArray getStringWithInt:i]];
  return set;
}

OrgJsonJSONObject *EduUmassCsUtilsUtil_toJSONObjectWithNSString_(NSString *s) {
  EduUmassCsUtilsUtil_initialize();
  NetMinidevJsonJSONObject *sjson = (NetMinidevJsonJSONObject *) cast_chk(NetMinidevJsonJSONValue_parseWithNSString_(s), [NetMinidevJsonJSONObject class]);
  OrgJsonJSONObject *json = create_OrgJsonJSONObject_init();
  for (NSString * __strong key in nil_chk([((NetMinidevJsonJSONObject *) nil_chk(sjson)) keySet])) {
    id obj = [sjson getWithId:key];
    if ([JavaUtilCollection_class_() isInstance:obj]) [json putWithNSString:key withId:create_OrgJsonJSONArray_initWithNSString_([nil_chk(obj) description])];
    else [json putWithNSString:key withId:obj];
  }
  return json;
}

IOSObjectArray *EduUmassCsUtilsUtil_intToIntegerArrayWithIntArray_(IOSIntArray *array) {
  EduUmassCsUtilsUtil_initialize();
  if (array == nil) {
    return nil;
  }
  else if (array->size_ == 0) {
    return [IOSObjectArray arrayWithLength:0 type:JavaLangInteger_class_()];
  }
  IOSObjectArray *retarray = [IOSObjectArray arrayWithLength:array->size_ type:JavaLangInteger_class_()];
  jint i = 0;
  {
    IOSIntArray *a__ = array;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint member = *b__++;
      IOSObjectArray_Set(retarray, i++, JavaLangInteger_valueOfWithInt_(member));
    }
  }
  return retarray;
}

id<JavaUtilSet> EduUmassCsUtilsUtil_arrayOfIntToStringSetWithIntArray_(IOSIntArray *array) {
  EduUmassCsUtilsUtil_initialize();
  id<JavaUtilSet> set = create_JavaUtilHashSet_init();
  {
    IOSIntArray *a__ = array;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangInteger *member = JavaLangInteger_valueOfWithInt_(*b__++);
      [set addWithId:[member description]];
    }
  }
  return set;
}

NSString *EduUmassCsUtilsUtil_arrayOfIntToStringWithIntArray_(IOSIntArray *array) {
  EduUmassCsUtilsUtil_initialize();
  NSString *s = @"";
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(array))->size_; i++) {
    JreStrAppend(&s, "I", IOSIntArray_Get(array, i));
    JreStrAppend(&s, "$", (i < array->size_ - 1 ? @"," : @""));
  }
  return JreStrcat("C$C", '[', s, ']');
}

jboolean EduUmassCsUtilsUtil_containsWithInt_withIntArray_(jint member, IOSIntArray *array) {
  EduUmassCsUtilsUtil_initialize();
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(array))->size_; i++) {
    if (IOSIntArray_Get(array, i) == member) {
      return true;
    }
  }
  return false;
}

id<JavaUtilSet> EduUmassCsUtilsUtil_arrayOfObjectsToStringSetWithNSObjectArray_(IOSObjectArray *array) {
  EduUmassCsUtilsUtil_initialize();
  id<JavaUtilSet> set = create_JavaUtilHashSet_init();
  {
    IOSObjectArray *a__ = array;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id member = *b__++;
      [set addWithId:[nil_chk(member) description]];
    }
  }
  return set;
}

id EduUmassCsUtilsUtil_selectRandomWithJavaUtilCollection_(id<JavaUtilCollection> set) {
  EduUmassCsUtilsUtil_initialize();
  jint random = JreFpToInt((JavaLangMath_random() * [((id<JavaUtilCollection>) nil_chk(set)) size]));
  id<JavaUtilIterator> iterator = [set iterator];
  id randomNode = nil;
  for (jint i = 0; i <= random && [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; i++) {
    randomNode = [((id<JavaUtilIterator>) nil_chk(iterator)) next];
  }
  return randomNode;
}

JavaNetInetSocketAddress *EduUmassCsUtilsUtil_getInetSocketAddressFromStringWithNSString_(NSString *s) {
  EduUmassCsUtilsUtil_initialize();
  s = [((NSString *) nil_chk(s)) java_replaceAll:@".*/" withReplacement:@""];
  IOSObjectArray *tokens = [((NSString *) nil_chk(s)) java_split:@":"];
  if (((IOSObjectArray *) nil_chk(tokens))->size_ < 2) {
    return nil;
  }
  return create_JavaNetInetSocketAddress_initWithNSString_withInt_(IOSObjectArray_Get(tokens, 0), [((JavaLangInteger *) nil_chk(JavaLangInteger_valueOfWithNSString_(IOSObjectArray_Get(tokens, 1)))) intValue]);
}

JavaNetInetSocketAddress *EduUmassCsUtilsUtil_getInetSocketAddressFromStringStrictWithNSString_(NSString *s) {
  EduUmassCsUtilsUtil_initialize();
  IOSObjectArray *tokens = [((NSString *) nil_chk(s)) java_split:@":"];
  if (((IOSObjectArray *) nil_chk(tokens))->size_ < 2) {
    return nil;
  }
  return create_JavaNetInetSocketAddress_initWithNSString_withInt_(IOSObjectArray_Get(tokens, 0), [((JavaLangInteger *) nil_chk(JavaLangInteger_valueOfWithNSString_(IOSObjectArray_Get(tokens, 1)))) intValue]);
}

JavaNetInetAddress *EduUmassCsUtilsUtil_getInetAddressFromStringWithNSString_(NSString *s) {
  EduUmassCsUtilsUtil_initialize();
  return JavaNetInetAddress_getByNameWithNSString_([((NSString *) nil_chk(s)) java_replaceFirst:@".*/" withReplacement:@""]);
}

NSString *EduUmassCsUtilsUtil_toJSONStringWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  EduUmassCsUtilsUtil_initialize();
  OrgJsonJSONArray *jsonArray = create_OrgJsonJSONArray_initWithJavaUtilCollection_(collection);
  return [jsonArray description];
}

IOSObjectArray *EduUmassCsUtilsUtil_jsonToStringArrayWithNSString_(NSString *jsonString) {
  EduUmassCsUtilsUtil_initialize();
  OrgJsonJSONArray *jsonArray = create_OrgJsonJSONArray_initWithNSString_(jsonString);
  IOSObjectArray *stringArray = [IOSObjectArray arrayWithLength:[jsonArray length] type:NSString_class_()];
  for (jint i = 0; i < [jsonArray length]; i++) {
    IOSObjectArray_Set(stringArray, i, [jsonArray getStringWithInt:i]);
  }
  return stringArray;
}

NSString *EduUmassCsUtilsUtil_toJSONStringWithIntArray_(IOSIntArray *array) {
  EduUmassCsUtilsUtil_initialize();
  return EduUmassCsUtilsUtil_toJSONStringWithJavaUtilCollection_(EduUmassCsUtilsUtil_arrayOfIntToStringSetWithIntArray_(array));
}

JavaUtilArrayList *EduUmassCsUtilsUtil_JSONArrayToArrayListIntegerWithOrgJsonJSONArray_(OrgJsonJSONArray *jsonArray) {
  EduUmassCsUtilsUtil_initialize();
  JavaUtilArrayList *list = create_JavaUtilArrayList_init();
  for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(jsonArray)) length]; i++) {
    [list addWithId:JavaLangInteger_valueOfWithInt_([jsonArray getIntWithInt:i])];
  }
  return list;
}

IOSObjectArray *EduUmassCsUtilsUtil_getNamesWithOrgJsonJSONObject_(OrgJsonJSONObject *jo) {
  EduUmassCsUtilsUtil_initialize();
  jint length = [((OrgJsonJSONObject *) nil_chk(jo)) length];
  if (length == 0) {
    return nil;
  }
  id<JavaUtilIterator> iterator = [jo keys];
  IOSObjectArray *names = [IOSObjectArray arrayWithLength:length type:NSString_class_()];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    IOSObjectArray_Set(names, i, (NSString *) cast_chk([iterator next], [NSString class]));
    i += 1;
  }
  return names;
}

id EduUmassCsUtilsUtil_truncateWithId_withInt_(id obj, jint size) {
  EduUmassCsUtilsUtil_initialize();
  return create_EduUmassCsUtilsUtil_1_initWithId_withInt_(obj, size);
}

id EduUmassCsUtilsUtil_truncateWithId_withInt_withInt_(id obj, jint prefixSize, jint suffixSize) {
  EduUmassCsUtilsUtil_initialize();
  if (obj == nil) return nil;
  jint size = prefixSize + suffixSize;
  return create_EduUmassCsUtilsUtil_2_initWithId_withInt_withInt_withInt_(obj, size, prefixSize, suffixSize);
}

IOSByteArray *EduUmassCsUtilsUtil_getAlphanumericAsBytes() {
  EduUmassCsUtilsUtil_initialize();
  jint low = '0', high = 'z';
  IOSByteArray *bytes = [IOSByteArray arrayWithLength:high - low + 1];
  for (jint i = 0; i < bytes->size_; i++) *IOSByteArray_GetRef(bytes, i) = (jbyte) (low + i);
  return bytes;
}

IOSByteArray *EduUmassCsUtilsUtil_getRandomAlphanumericBytes() {
  EduUmassCsUtilsUtil_initialize();
  return EduUmassCsUtilsUtil_getRandomAlphanumericBytesWithInt_(1024);
}

IOSByteArray *EduUmassCsUtilsUtil_getRandomAlphanumericBytesWithInt_(jint size) {
  EduUmassCsUtilsUtil_initialize();
  IOSByteArray *an = EduUmassCsUtilsUtil_getAlphanumericAsBytes();
  IOSByteArray *msg = [IOSByteArray arrayWithLength:size];
  for (jint i = 0; i < msg->size_; i++) *IOSByteArray_GetRef(msg, i) = IOSByteArray_Get(an, JreFpToInt((JavaLangMath_random() * ((IOSByteArray *) nil_chk(an))->size_)));
  return msg;
}

id<JavaUtilCollection> EduUmassCsUtilsUtil_truncateWithJavaUtilCollection_withInt_(id<JavaUtilCollection> list, jint size) {
  EduUmassCsUtilsUtil_initialize();
  if ([((id<JavaUtilCollection>) nil_chk(list)) size] <= size) return list;
  JavaUtilArrayList *truncated = create_JavaUtilArrayList_init();
  jint i = 0;
  for (id __strong o in list) if (i++ < size) [truncated addWithId:o];
  else break;
  return truncated;
}

id EduUmassCsUtilsUtil_truncatedLogWithJavaUtilCollection_withInt_(id<JavaUtilCollection> list, jint size) {
  EduUmassCsUtilsUtil_initialize();
  return create_EduUmassCsUtilsUtil_3_initWithJavaUtilCollection_withInt_(list, size);
}

id EduUmassCsUtilsUtil_suicideWithJavaUtilLoggingLogger_withNSString_(JavaUtilLoggingLogger *logger, NSString *error) {
  EduUmassCsUtilsUtil_initialize();
  [((JavaUtilLoggingLogger *) nil_chk(logger)) severeWithNSString:error];
  [create_JavaLangRuntimeException_initWithNSString_(error) printStackTrace];
  JavaLangSystem_exitWithInt_(1);
  return nil;
}

id EduUmassCsUtilsUtil_suicideWithNSString_(NSString *error) {
  EduUmassCsUtilsUtil_initialize();
  return EduUmassCsUtilsUtil_suicideWithJavaUtilLoggingLogger_withNSString_(EduUmassCsUtilsUtil_log, error);
}

JavaNioByteBuffer *EduUmassCsUtilsUtil_putWithJavaNioByteBuffer_withJavaNioByteBuffer_withInt_(JavaNioByteBuffer *dst, JavaNioByteBuffer *src, jint transferLimit) {
  EduUmassCsUtilsUtil_initialize();
  if ([((JavaNioByteBuffer *) nil_chk(src)) remaining] <= [((JavaNioByteBuffer *) nil_chk(dst)) remaining] && transferLimit >= [dst remaining]) return [dst putWithJavaNioByteBuffer:src];
  jint oldLimit = [src limit];
  [src limitWithInt:[src position] + JavaLangMath_minWithInt_withInt_([dst remaining], transferLimit)];
  [dst putWithJavaNioByteBuffer:src];
  [src limitWithInt:oldLimit];
  return dst;
}

JavaNioByteBuffer *EduUmassCsUtilsUtil_putWithJavaNioByteBuffer_withJavaNioByteBuffer_(JavaNioByteBuffer *dst, JavaNioByteBuffer *src) {
  EduUmassCsUtilsUtil_initialize();
  return EduUmassCsUtilsUtil_putWithJavaNioByteBuffer_withJavaNioByteBuffer_withInt_(dst, src, [((JavaNioByteBuffer *) nil_chk(dst)) remaining]);
}

NSString *EduUmassCsUtilsUtil_sockAddrToEncodedStringWithJavaNetInetSocketAddress_(JavaNetInetSocketAddress *isa_) {
  EduUmassCsUtilsUtil_initialize();
  IOSByteArray *address = [((JavaNetInetAddress *) nil_chk([((JavaNetInetSocketAddress *) nil_chk(isa_)) getAddress])) getAddress];
  IOSByteArray *buf = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(address))->size_ + 2];
  for (jint i = 0; i < address->size_; i++) *IOSByteArray_GetRef(buf, i) = IOSByteArray_Get(address, i);
  *IOSByteArray_GetRef(buf, address->size_) = (jbyte) (JreRShift32([isa_ getPort], 8));
  *IOSByteArray_GetRef(buf, address->size_ + 1) = (jbyte) ([isa_ getPort] & 255);
  return [NSString java_stringWithBytes:buf charsetName:EduUmassCsUtilsUtil_CHARSET];
}

JavaNetInetSocketAddress *EduUmassCsUtilsUtil_encodedStringToInetSocketAddressWithNSString_(NSString *str) {
  EduUmassCsUtilsUtil_initialize();
  IOSByteArray *buf = [((NSString *) nil_chk(str)) java_getBytesWithCharsetName:EduUmassCsUtilsUtil_CHARSET];
  jint port = (jint) (JreLShift32(IOSByteArray_Get(buf, ((IOSByteArray *) nil_chk(buf))->size_ - 2), 8)) + (IOSByteArray_Get(buf, buf->size_ - 1) & 255);
  return create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(JavaNetInetAddress_getByAddressWithByteArray_(JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(buf, 0, 4)), port);
}

IOSByteArray *EduUmassCsUtilsUtil_longToBytesWithLong_(jlong value) {
  EduUmassCsUtilsUtil_initialize();
  jint size = JavaLangLong_SIZE / 8;
  IOSByteArray *buf = [IOSByteArray arrayWithLength:size];
  for (jint i = 0; i < size; i++) *IOSByteArray_GetRef(buf, i) = (jbyte) ((JreRShift64(value, ((size - i - 1) * 8))) & 255);
  return buf;
}

NSString *EduUmassCsUtilsUtil_longToEncodedStringWithLong_(jlong value) {
  EduUmassCsUtilsUtil_initialize();
  return [NSString java_stringWithBytes:EduUmassCsUtilsUtil_longToBytesWithLong_(value) charsetName:EduUmassCsUtilsUtil_CHARSET];
}

jlong EduUmassCsUtilsUtil_bytesToLongWithByteArray_(IOSByteArray *bytes) {
  EduUmassCsUtilsUtil_initialize();
  jlong value = 0;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(bytes))->size_; i++) value += (JreLShift64((jlong) (IOSByteArray_Get(bytes, i) & 255), ((bytes->size_ - i - 1) * 8)));
  return value;
}

jlong EduUmassCsUtilsUtil_encodedStringToLongWithNSString_(NSString *str) {
  EduUmassCsUtilsUtil_initialize();
  return EduUmassCsUtilsUtil_bytesToLongWithByteArray_([((NSString *) nil_chk(str)) java_getBytesWithCharsetName:EduUmassCsUtilsUtil_CHARSET]);
}

jlong EduUmassCsUtilsUtil_toLongWithId_(id obj) {
  EduUmassCsUtilsUtil_initialize();
  if ([obj isKindOfClass:[JavaLangLong class]]) return [((JavaLangLong *) nil_chk((JavaLangLong *) cast_chk(obj, [JavaLangLong class]))) longLongValue];
  return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(obj, [JavaLangInteger class]))) intValue];
}

id<JavaUtilSet> EduUmassCsUtilsUtil_toIntSetWithInt_(jint i) {
  EduUmassCsUtilsUtil_initialize();
  id<JavaUtilSet> set = create_JavaUtilHashSet_init();
  [set addWithId:JavaLangInteger_valueOfWithInt_(i)];
  return set;
}

void EduUmassCsUtilsUtil_testGetInetSocketAddressFromString() {
  EduUmassCsUtilsUtil_initialize();
  JreAssert((([((JavaNetInetSocketAddress *) nil_chk(EduUmassCsUtilsUtil_getInetSocketAddressFromStringWithNSString_(@"10.0.1.50/10.0.1.50:24404"))) isEqual:create_JavaNetInetSocketAddress_initWithNSString_withInt_(@"10.0.1.50", 24404)])), (@"edu/umass/cs/utils/Util.java:510 condition failed: assert (getInetSocketAddressFromString(\"10.0.1.50/10.0.1.50:24404\")\n\t\t\t\t.equals(new InetSocketAddress(\"10.0.1.50\", 24404)));"));
}

void EduUmassCsUtilsUtil_testGetInetAddressFromString() {
  EduUmassCsUtilsUtil_initialize();
  JreAssert((([((JavaNetInetAddress *) nil_chk(EduUmassCsUtilsUtil_getInetAddressFromStringWithNSString_(@"10.0.1.50/10.0.1.50:24404"))) isEqual:JavaNetInetAddress_getByNameWithNSString_(@"10.0.1.50")])), (@"edu/umass/cs/utils/Util.java:516 condition failed: assert (getInetAddressFromString(\"10.0.1.50/10.0.1.50:24404\")\n\t\t\t\t.equals(InetAddress.getByName(\"10.0.1.50\")));"));
}

void EduUmassCsUtilsUtil_testToBytesAndBack() {
  EduUmassCsUtilsUtil_initialize();
  JavaNetInetSocketAddress *isa_ = create_JavaNetInetSocketAddress_initWithNSString_withInt_(@"128.119.235.43", 23451);
  JreAssert((([((JavaNetInetSocketAddress *) nil_chk(EduUmassCsUtilsUtil_encodedStringToInetSocketAddressWithNSString_(EduUmassCsUtilsUtil_sockAddrToEncodedStringWithJavaNetInetSocketAddress_(isa_)))) isEqual:isa_])), (@"edu/umass/cs/utils/Util.java:523 condition failed: assert (Util.encodedStringToInetSocketAddress(Util\n\t\t\t\t.sockAddrToEncodedString(isa)).equals(isa));"));
  jint n = 10000;
  for (jint i = 0; i < n; i++) {
    jlong t = JreFpToLong((JavaLangMath_random() * JavaLangLong_MAX_VALUE));
    IOSByteArray *buf = (EduUmassCsUtilsUtil_longToBytesWithLong_(t));
    JreAssert((t == EduUmassCsUtilsUtil_bytesToLongWithByteArray_(buf)), (@"edu/umass/cs/utils/Util.java:529 condition failed: assert (t == Util.bytesToLong(buf));"));
  }
  for (jint i = 0; i < n; i++) {
    jlong value = JreFpToLong((JavaLangMath_random() * JavaLangLong_MAX_VALUE));
    JreAssert((value == EduUmassCsUtilsUtil_encodedStringToLongWithNSString_(EduUmassCsUtilsUtil_longToEncodedStringWithLong_(value))), (@"edu/umass/cs/utils/Util.java:533 condition failed: assert (value == Util.encodedStringToLong(Util\n\t\t\t\t\t.longToEncodedString(value)));"));
  }
  for (jint i = 0; i < n; i++) {
    IOSByteArray *address = [IOSByteArray arrayWithLength:4];
    for (jint j = 0; j < 4; j++) *IOSByteArray_GetRef(address, j) = (jbyte) JreFpToInt((JavaLangMath_random() * JavaLangByte_MAX_VALUE));
    JavaNetInetSocketAddress *sockAddr = create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(JavaNetInetAddress_getByAddressWithByteArray_(address), JreFpToInt((JavaLangMath_random() * JavaLangShort_MAX_VALUE)));
    JreAssert((([((JavaNetInetSocketAddress *) nil_chk(EduUmassCsUtilsUtil_encodedStringToInetSocketAddressWithNSString_(EduUmassCsUtilsUtil_sockAddrToEncodedStringWithJavaNetInetSocketAddress_(sockAddr)))) isEqual:sockAddr])), (@"edu/umass/cs/utils/Util.java:543 condition failed: assert (Util.encodedStringToInetSocketAddress(Util\n\t\t\t\t\t.sockAddrToEncodedString(sockAddr)).equals(sockAddr));"));
  }
}

id EduUmassCsUtilsUtil_getRandomOtherThanWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> all, id<JavaUtilSet> exclude) {
  EduUmassCsUtilsUtil_initialize();
  IOSObjectArray *allArray = [((id<JavaUtilSet>) nil_chk(all)) toArray];
  jint index = -1;
  if ([((id<JavaUtilSet>) nil_chk(exclude)) containsAllWithJavaUtilCollection:all]) return nil;
  while ([exclude containsWithId:IOSObjectArray_Get(allArray, index = JreFpToInt((JavaLangMath_random() * ((IOSObjectArray *) nil_chk(allArray))->size_)))]) ;
  return IOSObjectArray_Get(allArray, index);
}

id EduUmassCsUtilsUtil_getRandomOtherThanWithJavaUtilSet_withId_(id<JavaUtilSet> all, id exclude) {
  EduUmassCsUtilsUtil_initialize();
  for (id __strong obj in nil_chk(all)) if (![nil_chk(obj) isEqual:exclude]) return obj;
  return nil;
}

id<JavaUtilSet> EduUmassCsUtilsUtil_getOtherThanWithJavaUtilSet_withId_(id<JavaUtilSet> set, id exclude) {
  EduUmassCsUtilsUtil_initialize();
  id<JavaUtilSet> copy_ = create_JavaUtilHashSet_initWithJavaUtilCollection_(set);
  [copy_ removeWithId:exclude];
  return copy_;
}

id EduUmassCsUtilsUtil_getOtherThanStringWithJavaUtilSet_withId_(id<JavaUtilSet> set, id exclude) {
  EduUmassCsUtilsUtil_initialize();
  return create_EduUmassCsUtilsUtil_4_initWithJavaUtilSet_withId_(set, exclude);
}

jboolean EduUmassCsUtilsUtil_isWrapperTypeWithIOSClass_(IOSClass *clazz) {
  EduUmassCsUtilsUtil_initialize();
  return [((id<JavaUtilSet>) nil_chk(EduUmassCsUtilsUtil_WRAPPER_TYPES)) containsWithId:clazz];
}

id<JavaUtilSet> EduUmassCsUtilsUtil_getWrapperTypes() {
  EduUmassCsUtilsUtil_initialize();
  id<JavaUtilSet> ret = create_JavaUtilHashSet_init();
  [ret addWithId:JavaLangBoolean_class_()];
  [ret addWithId:JavaLangCharacter_class_()];
  [ret addWithId:JavaLangByte_class_()];
  [ret addWithId:JavaLangShort_class_()];
  [ret addWithId:JavaLangInteger_class_()];
  [ret addWithId:JavaLangLong_class_()];
  [ret addWithId:JavaLangFloat_class_()];
  [ret addWithId:JavaLangDouble_class_()];
  [ret addWithId:JavaLangVoid_class_()];
  return ret;
}

OrgJsonJSONObject *EduUmassCsUtilsUtil_viaJSONSmartWithNetMinidevJsonJSONObject_(NetMinidevJsonJSONObject *jsonS) {
  EduUmassCsUtilsUtil_initialize();
  OrgJsonJSONObject *json = create_OrgJsonJSONObject_init();
  for (NSString * __strong key in nil_chk([((NetMinidevJsonJSONObject *) nil_chk(jsonS)) keySet])) {
    if ([jsonS getWithId:key] != nil) {
      [json putWithNSString:key withId:[jsonS getWithId:key]];
    }
  }
  return json;
}

JavaNetInetSocketAddress *EduUmassCsUtilsUtil_offsetPortWithJavaNetInetSocketAddress_withInt_(JavaNetInetSocketAddress *isa_, jint offset) {
  EduUmassCsUtilsUtil_initialize();
  return create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_([((JavaNetInetSocketAddress *) nil_chk(isa_)) getAddress], [isa_ getPort] + offset);
}

id<JavaUtilSet> EduUmassCsUtilsUtil_removeFromSetCopyWithJavaUtilSet_withId_(id<JavaUtilSet> set, id element) {
  EduUmassCsUtilsUtil_initialize();
  if (set != nil && element != nil) {
    id<JavaUtilSet> copy_ = create_JavaUtilHashSet_initWithJavaUtilCollection_(set);
    [copy_ removeWithId:element];
    return copy_;
  }
  return set;
}

id<JavaUtilSet> EduUmassCsUtilsUtil_removeFromSetWithJavaUtilSet_withId_(id<JavaUtilSet> set, id element) {
  EduUmassCsUtilsUtil_initialize();
  if (set != nil && element != nil) [set removeWithId:element];
  return set;
}

id<JavaUtilSet> EduUmassCsUtilsUtil_diffWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> s1, id<JavaUtilSet> s2) {
  EduUmassCsUtilsUtil_initialize();
  id<JavaUtilSet> diff = create_JavaUtilHashSet_init();
  for (id __strong node in nil_chk(s1)) if (![((id<JavaUtilSet>) nil_chk(s2)) containsWithId:node]) [diff addWithId:node];
  return diff;
}

void EduUmassCsUtilsUtil_mainWithNSStringArray_(IOSObjectArray *args) {
  EduUmassCsUtilsUtil_initialize();
  EduUmassCsUtilsUtil_assertAssertionsEnabled();
  EduUmassCsUtilsUtil_testGetInetSocketAddressFromString();
  EduUmassCsUtilsUtil_testGetInetAddressFromString();
  EduUmassCsUtilsUtil_testToBytesAndBack();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:EduUmassCsUtilsUtil_recursiveFindWithNSString_withNSString_(@"/Users/arun/gigapaxos/src/", @".*paxosutil")];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"SUCCESS!"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:[((NSString *) nil_chk([((JavaNetURL *) nil_chk([((JavaLangClassLoader *) nil_chk([EduUmassCsUtilsUtil_class_() getClassLoader])) getResourceWithNSString:@"."])) description])) java_replace:@"file:" withSequence:@""]];
}

jboolean EduUmassCsUtilsUtil_recursiveRemoveWithJavaIoFile_(JavaIoFile *file) {
  EduUmassCsUtilsUtil_initialize();
  jboolean deleted = true;
  if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
    IOSObjectArray *a__ = [file listFiles];
    JavaIoFile * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *f = *b__++;
      if ([((JavaIoFile *) nil_chk(f)) isFile]) deleted = (deleted && [f delete__]);
      else EduUmassCsUtilsUtil_recursiveRemoveWithJavaIoFile_(f);
    }
  }
  return deleted && [file delete__];
}

IOSObjectArray *EduUmassCsUtilsUtil_getMatchingFilesWithNSString_withNSStringArray_(NSString *dir, IOSObjectArray *match) {
  EduUmassCsUtilsUtil_initialize();
  JavaIoFile *dirFile = create_JavaIoFile_initWithNSString_(dir);
  id<JavaUtilSet> matchFiles = create_JavaUtilHashSet_init();
  {
    IOSObjectArray *a__ = match;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *m = *b__++;
      if ([((NSString *) nil_chk([((NSString *) nil_chk([dirFile getPath])) description])) hasPrefix:[((NSString *) nil_chk(m)) java_replaceAll:@"/$" withReplacement:@""]]) [matchFiles addWithId:dirFile];
    }
  }
  if ([dirFile isDirectory]) {
    {
      IOSObjectArray *a__ = [dirFile listFiles];
      JavaIoFile * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaIoFile * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaIoFile *f = *b__++;
        [matchFiles addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(EduUmassCsUtilsUtil_getMatchingFilesWithNSString_withNSStringArray_([((JavaIoFile *) nil_chk(f)) getPath], match))];
      }
    }
  }
  return [matchFiles toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:JavaIoFile_class_()]];
}

jboolean EduUmassCsUtilsUtil_recursiveRemoveWithNSString_withNSStringArray_(NSString *dir, IOSObjectArray *match) {
  EduUmassCsUtilsUtil_initialize();
  jboolean deleted = true;
  {
    IOSObjectArray *a__ = EduUmassCsUtilsUtil_getMatchingFilesWithNSString_withNSStringArray_(dir, match);
    JavaIoFile * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *f = *b__++;
      deleted = (EduUmassCsUtilsUtil_recursiveRemoveWithJavaIoFile_(f) && deleted);
    }
  }
  return deleted;
}

JavaUtilArrayList *EduUmassCsUtilsUtil_recursiveFindWithNSString_withNSString_(NSString *dir, NSString *regex) {
  EduUmassCsUtilsUtil_initialize();
  JavaUtilArrayList *matches = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = [create_JavaIoFile_initWithNSString_(dir) listFiles];
    JavaIoFile * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *f = *b__++;
      if ([((NSString *) nil_chk([((JavaIoFile *) nil_chk(f)) description])) java_matches:regex]) [matches addWithId:[f description]];
      if ([f isDirectory]) [matches addAllWithJavaUtilCollection:EduUmassCsUtilsUtil_recursiveFindWithNSString_withNSString_([f description], regex)];
    }
  }
  return matches;
}

void EduUmassCsUtilsUtil_wipeoutFileWithNSString_(NSString *filename) {
  EduUmassCsUtilsUtil_initialize();
  JavaIoFileWriter *writer = nil;
  @try {
    [(writer = create_JavaIoFileWriter_initWithNSString_withBoolean_(filename, false)) close];
  }
  @finally {
    [((JavaIoFileWriter *) nil_chk(writer)) close];
  }
}

id<JavaUtilSet> EduUmassCsUtilsUtil_socketAddressesToInetAddressesWithJavaNetInetSocketAddressArray_(IOSObjectArray *sockAddrs) {
  EduUmassCsUtilsUtil_initialize();
  IOSObjectArray *IPs = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(sockAddrs))->size_ type:JavaNetInetAddress_class_()];
  for (jint i = 0; i < sockAddrs->size_; i++) IOSObjectArray_Set(IPs, i, [((JavaNetInetSocketAddress *) nil_chk(IOSObjectArray_Get(sockAddrs, i))) getAddress]);
  return create_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(IPs));
}

id EduUmassCsUtilsUtil_printThisLine() {
  EduUmassCsUtilsUtil_initialize();
  return EduUmassCsUtilsUtil_printThisLineWithJavaLangBoolean_(JavaLangBoolean_valueOfWithBoolean_(true));
}

id EduUmassCsUtilsUtil_printThisLineWithJavaLangBoolean_(JavaLangBoolean *log) {
  EduUmassCsUtilsUtil_initialize();
  return [((JavaLangBoolean *) nil_chk(log)) booleanValue] ? create_EduUmassCsUtilsUtil_5_initWithJavaLangBoolean_(log) : nil;
}

id<JavaUtilMap> EduUmassCsUtilsUtil_sortByValueWithJavaUtilMap_(id<JavaUtilMap> map) {
  EduUmassCsUtilsUtil_initialize();
  id<JavaUtilMap> result = create_JavaUtilLinkedHashMap_init();
  id<JavaUtilStreamStream> st = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) stream];
  [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk(st)) sortedWithJavaUtilComparator:JavaUtilMap_Entry_comparingByValue()])) forEachOrderedWithJavaUtilFunctionConsumer:create_EduUmassCsUtilsUtil_6_initWithJavaUtilMap_(result)];
  return result;
}

id<JavaUtilSet> EduUmassCsUtilsUtil_getSocketAddressesWithOrgJsonJSONArray_(OrgJsonJSONArray *jarray) {
  EduUmassCsUtilsUtil_initialize();
  id<JavaUtilSet> addresses = create_JavaUtilHashSet_init();
  if (jarray != nil) for (jint i = 0; i < [jarray length]; i++) [addresses addWithId:EduUmassCsUtilsUtil_getInetSocketAddressFromStringWithNSString_([jarray getStringWithInt:i])];
  return addresses;
}

OrgJsonJSONArray *EduUmassCsUtilsUtil_getJSONArrayWithJavaUtilSet_(id<JavaUtilSet> addresses) {
  EduUmassCsUtilsUtil_initialize();
  OrgJsonJSONArray *jarray = create_OrgJsonJSONArray_init();
  for (JavaNetInetSocketAddress * __strong isa_ in nil_chk(addresses)) [jarray putWithId:JreStrcat("$CI", [((JavaNetInetAddress *) nil_chk([((JavaNetInetSocketAddress *) nil_chk(isa_)) getAddress])) getHostAddress], ':', [isa_ getPort])];
  return jarray;
}

NSString *EduUmassCsUtilsUtil_toStringWithJavaNetInetSocketAddress_(JavaNetInetSocketAddress *entryServer) {
  EduUmassCsUtilsUtil_initialize();
  return JreStrcat("$CI", [((JavaNetInetAddress *) nil_chk([((JavaNetInetSocketAddress *) nil_chk(entryServer)) getAddress])) getHostAddress], ':', [entryServer getPort]);
}

id<JavaUtilList> EduUmassCsUtilsUtil_JSONArrayToListWithOrgJsonJSONArray_(OrgJsonJSONArray *jsonArray) {
  EduUmassCsUtilsUtil_initialize();
  if (jsonArray == nil) return nil;
  JavaUtilArrayList *list = create_JavaUtilArrayList_init();
  id val = nil;
  if ([jsonArray length] > 0) for (jint i = 0; i < [jsonArray length]; i++) if ([(val = [jsonArray getWithInt:i]) isKindOfClass:[OrgJsonJSONObject class]]) [list addWithId:EduUmassCsUtilsUtil_JSONObjectToMapWithOrgJsonJSONObject_((OrgJsonJSONObject *) cast_chk(val, [OrgJsonJSONObject class]))];
  else if ([val isKindOfClass:[OrgJsonJSONArray class]]) [list addWithId:EduUmassCsUtilsUtil_JSONArrayToListWithOrgJsonJSONArray_((OrgJsonJSONArray *) cast_chk(val, [OrgJsonJSONArray class]))];
  else [list addWithId:val];
  return list;
}

id<JavaUtilMap> EduUmassCsUtilsUtil_JSONObjectToMapWithOrgJsonJSONObject_(OrgJsonJSONObject *json) {
  EduUmassCsUtilsUtil_initialize();
  if (json == nil) return nil;
  IOSObjectArray *keys = EduUmassCsUtilsUtil_getNamesWithOrgJsonJSONObject_(json);
  if (keys != nil) {
    id<JavaUtilMap> map = create_JavaUtilHashMap_init();
    {
      IOSObjectArray *a__ = keys;
      NSString * const *b__ = a__->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *key = *b__++;
        if ([[json getWithNSString:key] isKindOfClass:[OrgJsonJSONObject class]]) [map putWithId:key withId:EduUmassCsUtilsUtil_JSONObjectToMapWithOrgJsonJSONObject_([json getJSONObjectWithNSString:key])];
        else if ([[json getWithNSString:key] isKindOfClass:[OrgJsonJSONArray class]]) [map putWithId:key withId:EduUmassCsUtilsUtil_JSONArrayToListWithOrgJsonJSONArray_([json getJSONArrayWithNSString:key])];
        else [map putWithId:key withId:[json getWithNSString:key]];
      }
    }
    return map;
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsUtilsUtil)

@implementation EduUmassCsUtilsUtil_1

- (instancetype)initWithId:(id)capture$0
                   withInt:(jint)capture$1 {
  EduUmassCsUtilsUtil_1_initWithId_withInt_(self, capture$0, capture$1);
  return self;
}

- (NSString *)description {
  NSString *str = [nil_chk(val$obj_) description];
  return str == nil || ((jint) [str length]) <= val$size_ ? str : str != nil ? JreStrcat("$$", [str java_substring:0 endIndex:val$size_], @"[..truncated]") : nil;
}

- (void)dealloc {
  RELEASE_(val$obj_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withInt:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$obj_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$size_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "LEduUmassCsUtilsUtil;", "truncateWithId:withInt:" };
  static const J2ObjcClassInfo _EduUmassCsUtilsUtil_1 = { "", "edu.umass.cs.utils", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_EduUmassCsUtilsUtil_1;
}

@end

void EduUmassCsUtilsUtil_1_initWithId_withInt_(EduUmassCsUtilsUtil_1 *self, id capture$0, jint capture$1) {
  JreStrongAssign(&self->val$obj_, capture$0);
  self->val$size_ = capture$1;
  NSObject_init(self);
}

EduUmassCsUtilsUtil_1 *new_EduUmassCsUtilsUtil_1_initWithId_withInt_(id capture$0, jint capture$1) {
  J2OBJC_NEW_IMPL(EduUmassCsUtilsUtil_1, initWithId_withInt_, capture$0, capture$1)
}

EduUmassCsUtilsUtil_1 *create_EduUmassCsUtilsUtil_1_initWithId_withInt_(id capture$0, jint capture$1) {
  J2OBJC_CREATE_IMPL(EduUmassCsUtilsUtil_1, initWithId_withInt_, capture$0, capture$1)
}

@implementation EduUmassCsUtilsUtil_2

- (instancetype)initWithId:(id)capture$0
                   withInt:(jint)capture$1
                   withInt:(jint)capture$2
                   withInt:(jint)capture$3 {
  EduUmassCsUtilsUtil_2_initWithId_withInt_withInt_withInt_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (NSString *)description {
  NSString *str = [nil_chk(val$obj_) description];
  return str == nil || ((jint) [str length]) < val$size_ ? str : str != nil ? JreStrcat("$$$", [str java_substring:0 endIndex:val$prefixSize_], @"[...]", [str java_substring:((jint) [str length]) - val$suffixSize_]) : nil;
}

- (void)dealloc {
  RELEASE_(val$obj_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withInt:withInt:withInt:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$obj_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$size_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$prefixSize_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$suffixSize_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "LEduUmassCsUtilsUtil;", "truncateWithId:withInt:withInt:" };
  static const J2ObjcClassInfo _EduUmassCsUtilsUtil_2 = { "", "edu.umass.cs.utils", ptrTable, methods, fields, 7, 0x8008, 2, 4, 1, -1, 2, -1, -1 };
  return &_EduUmassCsUtilsUtil_2;
}

@end

void EduUmassCsUtilsUtil_2_initWithId_withInt_withInt_withInt_(EduUmassCsUtilsUtil_2 *self, id capture$0, jint capture$1, jint capture$2, jint capture$3) {
  JreStrongAssign(&self->val$obj_, capture$0);
  self->val$size_ = capture$1;
  self->val$prefixSize_ = capture$2;
  self->val$suffixSize_ = capture$3;
  NSObject_init(self);
}

EduUmassCsUtilsUtil_2 *new_EduUmassCsUtilsUtil_2_initWithId_withInt_withInt_withInt_(id capture$0, jint capture$1, jint capture$2, jint capture$3) {
  J2OBJC_NEW_IMPL(EduUmassCsUtilsUtil_2, initWithId_withInt_withInt_withInt_, capture$0, capture$1, capture$2, capture$3)
}

EduUmassCsUtilsUtil_2 *create_EduUmassCsUtilsUtil_2_initWithId_withInt_withInt_withInt_(id capture$0, jint capture$1, jint capture$2, jint capture$3) {
  J2OBJC_CREATE_IMPL(EduUmassCsUtilsUtil_2, initWithId_withInt_withInt_withInt_, capture$0, capture$1, capture$2, capture$3)
}

@implementation EduUmassCsUtilsUtil_3

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)capture$0
                                   withInt:(jint)capture$1 {
  EduUmassCsUtilsUtil_3_initWithJavaUtilCollection_withInt_(self, capture$0, capture$1);
  return self;
}

- (NSString *)description {
  return JreStrcat("$$", [((id<JavaUtilCollection>) nil_chk(EduUmassCsUtilsUtil_truncateWithJavaUtilCollection_withInt_(val$list_, val$size_))) description], ([((id<JavaUtilCollection>) nil_chk(val$list_)) size] <= val$size_ ? @"" : @"..."));
}

- (void)dealloc {
  RELEASE_(val$list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilCollection:withInt:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$list_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "val$size_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "Ljava/util/Collection<*>;", "LEduUmassCsUtilsUtil;", "truncatedLogWithJavaUtilCollection:withInt:" };
  static const J2ObjcClassInfo _EduUmassCsUtilsUtil_3 = { "", "edu.umass.cs.utils", ptrTable, methods, fields, 7, 0x8008, 2, 2, 2, -1, 3, -1, -1 };
  return &_EduUmassCsUtilsUtil_3;
}

@end

void EduUmassCsUtilsUtil_3_initWithJavaUtilCollection_withInt_(EduUmassCsUtilsUtil_3 *self, id<JavaUtilCollection> capture$0, jint capture$1) {
  JreStrongAssign(&self->val$list_, capture$0);
  self->val$size_ = capture$1;
  NSObject_init(self);
}

EduUmassCsUtilsUtil_3 *new_EduUmassCsUtilsUtil_3_initWithJavaUtilCollection_withInt_(id<JavaUtilCollection> capture$0, jint capture$1) {
  J2OBJC_NEW_IMPL(EduUmassCsUtilsUtil_3, initWithJavaUtilCollection_withInt_, capture$0, capture$1)
}

EduUmassCsUtilsUtil_3 *create_EduUmassCsUtilsUtil_3_initWithJavaUtilCollection_withInt_(id<JavaUtilCollection> capture$0, jint capture$1) {
  J2OBJC_CREATE_IMPL(EduUmassCsUtilsUtil_3, initWithJavaUtilCollection_withInt_, capture$0, capture$1)
}

@implementation EduUmassCsUtilsUtil_4

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0
                             withId:(id)capture$1 {
  EduUmassCsUtilsUtil_4_initWithJavaUtilSet_withId_(self, capture$0, capture$1);
  return self;
}

- (NSString *)description {
  id<JavaUtilSet> copy_ = create_JavaUtilHashSet_initWithJavaUtilCollection_(val$set_);
  [copy_ removeWithId:val$exclude_];
  return [copy_ description];
}

- (void)dealloc {
  RELEASE_(val$set_);
  RELEASE_(val$exclude_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilSet:withId:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$set_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "val$exclude_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "Ljava/util/Set<*>;", "LEduUmassCsUtilsUtil;", "getOtherThanStringWithJavaUtilSet:withId:" };
  static const J2ObjcClassInfo _EduUmassCsUtilsUtil_4 = { "", "edu.umass.cs.utils", ptrTable, methods, fields, 7, 0x8008, 2, 2, 2, -1, 3, -1, -1 };
  return &_EduUmassCsUtilsUtil_4;
}

@end

void EduUmassCsUtilsUtil_4_initWithJavaUtilSet_withId_(EduUmassCsUtilsUtil_4 *self, id<JavaUtilSet> capture$0, id capture$1) {
  JreStrongAssign(&self->val$set_, capture$0);
  JreStrongAssign(&self->val$exclude_, capture$1);
  NSObject_init(self);
}

EduUmassCsUtilsUtil_4 *new_EduUmassCsUtilsUtil_4_initWithJavaUtilSet_withId_(id<JavaUtilSet> capture$0, id capture$1) {
  J2OBJC_NEW_IMPL(EduUmassCsUtilsUtil_4, initWithJavaUtilSet_withId_, capture$0, capture$1)
}

EduUmassCsUtilsUtil_4 *create_EduUmassCsUtilsUtil_4_initWithJavaUtilSet_withId_(id<JavaUtilSet> capture$0, id capture$1) {
  J2OBJC_CREATE_IMPL(EduUmassCsUtilsUtil_4, initWithJavaUtilSet_withId_, capture$0, capture$1)
}

@implementation EduUmassCsUtilsUtil_5

- (instancetype)initWithJavaLangBoolean:(JavaLangBoolean *)capture$0 {
  EduUmassCsUtilsUtil_5_initWithJavaLangBoolean_(self, capture$0);
  return self;
}

- (NSString *)description {
  JavaLangStackTraceElement *ste = IOSObjectArray_Get(nil_chk([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getStackTrace]), val$log_ == nil ? 5 : 4);
  return JreStrcat("$CI", [((JavaLangStackTraceElement *) nil_chk(ste)) getFileName], ':', [ste getLineNumber]);
}

- (void)dealloc {
  RELEASE_(val$log_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangBoolean:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$log_", "LJavaLangBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "LEduUmassCsUtilsUtil;", "printThisLineWithJavaLangBoolean:" };
  static const J2ObjcClassInfo _EduUmassCsUtilsUtil_5 = { "", "edu.umass.cs.utils", ptrTable, methods, fields, 7, 0x8008, 2, 1, 1, -1, 2, -1, -1 };
  return &_EduUmassCsUtilsUtil_5;
}

@end

void EduUmassCsUtilsUtil_5_initWithJavaLangBoolean_(EduUmassCsUtilsUtil_5 *self, JavaLangBoolean *capture$0) {
  JreStrongAssign(&self->val$log_, capture$0);
  NSObject_init(self);
}

EduUmassCsUtilsUtil_5 *new_EduUmassCsUtilsUtil_5_initWithJavaLangBoolean_(JavaLangBoolean *capture$0) {
  J2OBJC_NEW_IMPL(EduUmassCsUtilsUtil_5, initWithJavaLangBoolean_, capture$0)
}

EduUmassCsUtilsUtil_5 *create_EduUmassCsUtilsUtil_5_initWithJavaLangBoolean_(JavaLangBoolean *capture$0) {
  J2OBJC_CREATE_IMPL(EduUmassCsUtilsUtil_5, initWithJavaLangBoolean_, capture$0)
}

@implementation EduUmassCsUtilsUtil_6

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)capture$0 {
  EduUmassCsUtilsUtil_6_initWithJavaUtilMap_(self, capture$0);
  return self;
}

- (void)acceptWithId:(id<JavaUtilMap_Entry>)entry_ {
  [((id<JavaUtilMap>) nil_chk(val$result_)) putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:[entry_ getValue]];
}

- (id<JavaUtilFunctionConsumer>)andThenWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  return JavaUtilFunctionConsumer_andThenWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(val$result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilMap:);
  methods[1].selector = @selector(acceptWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$result_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "accept", "LJavaUtilMap_Entry;", "(Ljava/util/Map$Entry<TK;TV;>;)V", "Ljava/util/Map<TK;TV;>;", "LEduUmassCsUtilsUtil;", "sortByValueWithJavaUtilMap:", "Ljava/lang/Object;Ljava/util/function/Consumer<Ljava/util/Map$Entry<TK;TV;>;>;" };
  static const J2ObjcClassInfo _EduUmassCsUtilsUtil_6 = { "", "edu.umass.cs.utils", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_EduUmassCsUtilsUtil_6;
}

@end

void EduUmassCsUtilsUtil_6_initWithJavaUtilMap_(EduUmassCsUtilsUtil_6 *self, id<JavaUtilMap> capture$0) {
  JreStrongAssign(&self->val$result_, capture$0);
  NSObject_init(self);
}

EduUmassCsUtilsUtil_6 *new_EduUmassCsUtilsUtil_6_initWithJavaUtilMap_(id<JavaUtilMap> capture$0) {
  J2OBJC_NEW_IMPL(EduUmassCsUtilsUtil_6, initWithJavaUtilMap_, capture$0)
}

EduUmassCsUtilsUtil_6 *create_EduUmassCsUtilsUtil_6_initWithJavaUtilMap_(id<JavaUtilMap> capture$0) {
  J2OBJC_CREATE_IMPL(EduUmassCsUtilsUtil_6, initWithJavaUtilMap_, capture$0)
}
