//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../gig_ios/src/edu/umass/cs/nio/AbstractPacketDemultiplexer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/umass/cs/nio/AbstractPacketDemultiplexer.h"
#include "edu/umass/cs/nio/JSONDelayEmulator.h"
#include "edu/umass/cs/nio/NIOTransport.h"
#include "edu/umass/cs/nio/interfaces/IntegerPacketType.h"
#include "edu/umass/cs/nio/interfaces/PacketDemultiplexer.h"
#include "edu/umass/cs/nio/nioutils/NIOHeader.h"
#include "edu/umass/cs/nio/nioutils/NIOInstrumenter.h"
#include "edu/umass/cs/utils/Stringer.h"
#include "edu/umass/cs/utils/Summarizable.h"
#include "edu/umass/cs/utils/Util.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/RejectedExecutionException.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/ScheduledThreadPoolExecutor.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface EduUmassCsNioAbstractPacketDemultiplexer () {
 @public
  jint myThreadPoolSize_;
  JavaUtilConcurrentScheduledThreadPoolExecutor *executor_;
  JavaUtilHashMap *demuxMap_;
  id<JavaUtilSet> orderPreservingTypes_;
  NSString *threadName_;
}

- (jlong)insertWithId:(id)msg;

- (void)release__WithLong:(jlong)t;

@end

J2OBJC_FIELD_SETTER(EduUmassCsNioAbstractPacketDemultiplexer, executor_, JavaUtilConcurrentScheduledThreadPoolExecutor *)
J2OBJC_FIELD_SETTER(EduUmassCsNioAbstractPacketDemultiplexer, demuxMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(EduUmassCsNioAbstractPacketDemultiplexer, orderPreservingTypes_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(EduUmassCsNioAbstractPacketDemultiplexer, threadName_, NSString *)

inline jint EduUmassCsNioAbstractPacketDemultiplexer_get_threadPoolSize();
inline jint EduUmassCsNioAbstractPacketDemultiplexer_set_threadPoolSize(jint value);
inline jint *EduUmassCsNioAbstractPacketDemultiplexer_getRef_threadPoolSize();
static jint EduUmassCsNioAbstractPacketDemultiplexer_threadPoolSize = 5;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduUmassCsNioAbstractPacketDemultiplexer, threadPoolSize, jint)

inline jboolean EduUmassCsNioAbstractPacketDemultiplexer_get_emulateDelays_();
inline jboolean EduUmassCsNioAbstractPacketDemultiplexer_set_emulateDelays_(jboolean value);
inline jboolean *EduUmassCsNioAbstractPacketDemultiplexer_getRef_emulateDelays_();
static jboolean EduUmassCsNioAbstractPacketDemultiplexer_emulateDelays_ = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduUmassCsNioAbstractPacketDemultiplexer, emulateDelays_, jboolean)

inline NSString *EduUmassCsNioAbstractPacketDemultiplexer_get_DEFAULT_THREAD_NAME();
static NSString *EduUmassCsNioAbstractPacketDemultiplexer_DEFAULT_THREAD_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduUmassCsNioAbstractPacketDemultiplexer, DEFAULT_THREAD_NAME, NSString *)

inline JavaUtilTreeMap *EduUmassCsNioAbstractPacketDemultiplexer_get_handleMessageStats();
inline JavaUtilTreeMap *EduUmassCsNioAbstractPacketDemultiplexer_set_handleMessageStats(JavaUtilTreeMap *value);
static JavaUtilTreeMap *EduUmassCsNioAbstractPacketDemultiplexer_handleMessageStats;
J2OBJC_STATIC_FIELD_OBJ(EduUmassCsNioAbstractPacketDemultiplexer, handleMessageStats, JavaUtilTreeMap *)

__attribute__((unused)) static jlong EduUmassCsNioAbstractPacketDemultiplexer_insertWithId_(EduUmassCsNioAbstractPacketDemultiplexer *self, id msg);

__attribute__((unused)) static void EduUmassCsNioAbstractPacketDemultiplexer_release__WithLong_(EduUmassCsNioAbstractPacketDemultiplexer *self, jlong t);

@interface EduUmassCsNioAbstractPacketDemultiplexer_1 : NSObject < JavaUtilConcurrentThreadFactory > {
 @public
  EduUmassCsNioAbstractPacketDemultiplexer *this$0_;
}

- (instancetype)initWithEduUmassCsNioAbstractPacketDemultiplexer:(EduUmassCsNioAbstractPacketDemultiplexer *)outer$;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUmassCsNioAbstractPacketDemultiplexer_1)

__attribute__((unused)) static void EduUmassCsNioAbstractPacketDemultiplexer_1_initWithEduUmassCsNioAbstractPacketDemultiplexer_(EduUmassCsNioAbstractPacketDemultiplexer_1 *self, EduUmassCsNioAbstractPacketDemultiplexer *outer$);

__attribute__((unused)) static EduUmassCsNioAbstractPacketDemultiplexer_1 *new_EduUmassCsNioAbstractPacketDemultiplexer_1_initWithEduUmassCsNioAbstractPacketDemultiplexer_(EduUmassCsNioAbstractPacketDemultiplexer *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsNioAbstractPacketDemultiplexer_1 *create_EduUmassCsNioAbstractPacketDemultiplexer_1_initWithEduUmassCsNioAbstractPacketDemultiplexer_(EduUmassCsNioAbstractPacketDemultiplexer *outer$);

@interface EduUmassCsNioAbstractPacketDemultiplexer_Tasker () {
 @public
  EduUmassCsNioAbstractPacketDemultiplexer *this$0_;
  id json_;
  id<EduUmassCsNioInterfacesPacketDemultiplexer> pd_;
  EduUmassCsNioNioutilsNIOHeader *header_;
}

@end

J2OBJC_FIELD_SETTER(EduUmassCsNioAbstractPacketDemultiplexer_Tasker, json_, id)
J2OBJC_FIELD_SETTER(EduUmassCsNioAbstractPacketDemultiplexer_Tasker, pd_, id<EduUmassCsNioInterfacesPacketDemultiplexer>)
J2OBJC_FIELD_SETTER(EduUmassCsNioAbstractPacketDemultiplexer_Tasker, header_, EduUmassCsNioNioutilsNIOHeader *)

J2OBJC_INITIALIZED_DEFN(EduUmassCsNioAbstractPacketDemultiplexer)

JavaUtilLoggingLogger *EduUmassCsNioAbstractPacketDemultiplexer_log;

@implementation EduUmassCsNioAbstractPacketDemultiplexer

+ (void)setThreadPoolSizeWithInt:(jint)threadPoolSize {
  EduUmassCsNioAbstractPacketDemultiplexer_setThreadPoolSizeWithInt_(threadPoolSize);
}

+ (jint)getThreadPoolSize {
  return EduUmassCsNioAbstractPacketDemultiplexer_getThreadPoolSize();
}

- (JavaLangInteger *)getPacketTypeWithId:(id)message {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)processHeaderWithByteArray:(IOSByteArray *)message
withEduUmassCsNioNioutilsNIOHeader:(EduUmassCsNioNioutilsNIOHeader *)header {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)matchesTypeWithId:(id)message {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)initWithInt:(jint)threadPoolSize {
  EduUmassCsNioAbstractPacketDemultiplexer_initWithInt_(self, threadPoolSize);
  return self;
}

- (EduUmassCsNioAbstractPacketDemultiplexer *)setNumDemultiplexerThreadsWithInt:(jint)corePoolSize {
  [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(self->executor_)) setCorePoolSizeWithInt:corePoolSize];
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduUmassCsNioAbstractPacketDemultiplexer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (EduUmassCsNioAbstractPacketDemultiplexer *)setThreadNameWithNSString:(NSString *)name {
  JreStrongAssign(&self->threadName_, JreStrcat("$CIC$", EduUmassCsNioAbstractPacketDemultiplexer_DEFAULT_THREAD_NAME, '[', myThreadPoolSize_, ']', (name != nil ? JreStrcat("C$", ':', name) : @"")));
  return self;
}

- (NSString *)description {
  return self->threadName_;
}

- (jboolean)handleMessageSuperWithByteArray:(IOSByteArray *)msg
         withEduUmassCsNioNioutilsNIOHeader:(EduUmassCsNioNioutilsNIOHeader *)header {
  EduUmassCsNioNioutilsNIOInstrumenter_incrRcvd();
  id message = nil;
  JavaUtilLoggingLevel *level = JreLoadStatic(JavaUtilLoggingLevel, FINEST);
  @try {
    message = [self processHeaderWithByteArray:msg withEduUmassCsNioNioutilsNIOHeader:header];
  }
  @catch (JavaLangException *e) {
    [((NSException *) nil_chk(e)) printStackTrace];
    return false;
  }
  @catch (JavaLangError *e) {
    [((NSException *) nil_chk(e)) printStackTrace];
    return false;
  }
  JavaLangInteger *type = message != nil ? [self getPacketTypeWithId:message] : nil;
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioAbstractPacketDemultiplexer_log)) logWithJavaUtilLoggingLevel:level withNSString:@"{0} handling type {1} message {2}:{3}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, type, header, [EduUmassCsNioAbstractPacketDemultiplexer_log isLoggableWithJavaUtilLoggingLevel:level] ? ([EduUmassCsUtilsSummarizable_class_() isInstance:message] ? [((id<EduUmassCsUtilsSummarizable>) nil_chk(((id<EduUmassCsUtilsSummarizable>) cast_check(message, EduUmassCsUtilsSummarizable_class_())))) getSummaryWithBoolean:[EduUmassCsNioAbstractPacketDemultiplexer_log isLoggableWithJavaUtilLoggingLevel:level]] : EduUmassCsUtilsUtil_truncateWithId_withInt_withInt_(create_EduUmassCsUtilsStringer_initWithByteArray_(msg), 32, 32)) : msg } count:4 type:NSObject_class_()]];
  if (type == nil || ![((JavaUtilHashMap *) nil_chk(self->demuxMap_)) containsKeyWithId:type]) {
    [EduUmassCsNioAbstractPacketDemultiplexer_log logWithJavaUtilLoggingLevel:level withNSString:@"{0} ignoring unknown packet type: {1}: {2}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, type, ([EduUmassCsUtilsSummarizable_class_() isInstance:message] ? [((id<EduUmassCsUtilsSummarizable>) nil_chk(((id<EduUmassCsUtilsSummarizable>) cast_check(message, EduUmassCsUtilsSummarizable_class_())))) getSummaryWithBoolean:[EduUmassCsNioAbstractPacketDemultiplexer_log isLoggableWithJavaUtilLoggingLevel:level]] : ([EduUmassCsUtilsSummarizable_class_() isInstance:message] ? [((id<EduUmassCsUtilsSummarizable>) nil_chk(((id<EduUmassCsUtilsSummarizable>) cast_check(message, EduUmassCsUtilsSummarizable_class_())))) getSummaryWithBoolean:[EduUmassCsNioAbstractPacketDemultiplexer_log isLoggableWithJavaUtilLoggingLevel:level]] : EduUmassCsUtilsUtil_truncateWithId_withInt_withInt_(create_EduUmassCsUtilsStringer_initWithByteArray_(msg), 32, 32))) } count:3 type:NSObject_class_()]];
    return false;
  }
  EduUmassCsNioAbstractPacketDemultiplexer_Tasker *tasker = create_EduUmassCsNioAbstractPacketDemultiplexer_Tasker_initWithEduUmassCsNioAbstractPacketDemultiplexer_withId_withEduUmassCsNioInterfacesPacketDemultiplexer_withEduUmassCsNioNioutilsNIOHeader_(self, message, [((JavaUtilHashMap *) nil_chk(self->demuxMap_)) getWithId:type], header);
  if (self->myThreadPoolSize_ == 0 || [self isOrderPreservingWithId:message]) {
    [EduUmassCsNioAbstractPacketDemultiplexer_log logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER) withNSString:@"{0} handling message type {1} in selector thread; this can cause deadlocks if the handler involves blocking operations" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, type } count:2 type:NSObject_class_()]];
    [tasker run];
  }
  else @try {
    [EduUmassCsNioAbstractPacketDemultiplexer_log logWithJavaUtilLoggingLevel:level = JreLoadStatic(JavaUtilLoggingLevel, FINER) withNSString:@"{0} invoking {1}.handleMessage({2})" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, tasker->pd_, ([EduUmassCsUtilsSummarizable_class_() isInstance:message] ? [((id<EduUmassCsUtilsSummarizable>) nil_chk(((id<EduUmassCsUtilsSummarizable>) cast_check(message, EduUmassCsUtilsSummarizable_class_())))) getSummaryWithBoolean:[EduUmassCsNioAbstractPacketDemultiplexer_log isLoggableWithJavaUtilLoggingLevel:level]] : EduUmassCsUtilsUtil_truncateWithId_withInt_withInt_(message, 32, 32)) } count:3 type:NSObject_class_()]];
    [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(executor_)) scheduleWithJavaLangRunnable:tasker withLong:EduUmassCsNioAbstractPacketDemultiplexer_emulateDelays_ ? EduUmassCsNioJSONDelayEmulator_getEmulatedDelay() : 0 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  }
  @catch (JavaUtilConcurrentRejectedExecutionException *ree) {
    if (![((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(executor_)) isShutdown]) [((JavaUtilConcurrentRejectedExecutionException *) nil_chk(ree)) printStackTrace];
    return false;
  }
  return true;
}

+ (void)emulateDelays {
  EduUmassCsNioAbstractPacketDemultiplexer_emulateDelays();
}

- (jboolean)loopbackWithId:(id)obj {
  if (![self matchesTypeWithId:obj]) return false;
  id message = obj;
  JavaLangInteger *type = [self getPacketTypeWithId:message];
  if (type == nil || ![((JavaUtilHashMap *) nil_chk(self->demuxMap_)) containsKeyWithId:type]) [((id<EduUmassCsNioInterfacesPacketDemultiplexer>) nil_chk([((JavaUtilHashMap *) nil_chk(self->demuxMap_)) getWithId:type])) handleMessageWithId:message withEduUmassCsNioNioutilsNIOHeader:nil];
  return true;
}

- (jboolean)isOrderPreservingWithId:(id)msg {
  return false;
}

- (void)register__WithEduUmassCsNioInterfacesIntegerPacketType:(id<EduUmassCsNioInterfacesIntegerPacketType>)type {
  [self register__WithEduUmassCsNioInterfacesIntegerPacketType:type withEduUmassCsNioInterfacesPacketDemultiplexer:self];
}

- (void)register__WithEduUmassCsNioInterfacesIntegerPacketType:(id<EduUmassCsNioInterfacesIntegerPacketType>)type
                withEduUmassCsNioInterfacesPacketDemultiplexer:(id<EduUmassCsNioInterfacesPacketDemultiplexer>)pd {
  if (pd == nil) return;
  if ([((JavaUtilHashMap *) nil_chk(self->demuxMap_)) containsKeyWithId:type]) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"re-registering type ", type));
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioAbstractPacketDemultiplexer_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"{0} registering type {1}:{2} {3}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, type, JavaLangInteger_valueOfWithInt_([((id<EduUmassCsNioInterfacesIntegerPacketType>) nil_chk(type)) getInt]), (self != pd ? JreStrcat("$@", @"with ", pd) : @"") } count:4 type:NSObject_class_()]];
  [self->demuxMap_ putWithId:JavaLangInteger_valueOfWithInt_([type getInt]) withId:pd];
}

- (jboolean)isCongestedWithEduUmassCsNioNioutilsNIOHeader:(EduUmassCsNioNioutilsNIOHeader *)header {
  return false;
}

- (void)register__WithJavaUtilSet:(id<JavaUtilSet>)types
withEduUmassCsNioInterfacesPacketDemultiplexer:(id<EduUmassCsNioInterfacesPacketDemultiplexer>)pd {
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioAbstractPacketDemultiplexer_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:@"{0} registering types {1} for {2}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, types, pd } count:3 type:NSObject_class_()]];
  for (id<EduUmassCsNioInterfacesIntegerPacketType> __strong type in nil_chk(types)) [self register__WithEduUmassCsNioInterfacesIntegerPacketType:type withEduUmassCsNioInterfacesPacketDemultiplexer:pd];
}

- (void)register__WithJavaUtilSet:(id<JavaUtilSet>)types {
  [self register__WithJavaUtilSet:types withEduUmassCsNioInterfacesPacketDemultiplexer:self];
}

- (void)register__WithEduUmassCsNioInterfacesIntegerPacketTypeArray:(IOSObjectArray *)types
                     withEduUmassCsNioInterfacesPacketDemultiplexer:(id<EduUmassCsNioInterfacesPacketDemultiplexer>)pd {
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioAbstractPacketDemultiplexer_log)) infoWithNSString:JreStrcat("@$@", pd, @" registering types ", (create_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(types))))];
  {
    IOSObjectArray *a__ = types;
    id<EduUmassCsNioInterfacesIntegerPacketType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<EduUmassCsNioInterfacesIntegerPacketType> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id type = *b__++;
      [self register__WithEduUmassCsNioInterfacesIntegerPacketType:(id<EduUmassCsNioInterfacesIntegerPacketType>) cast_check(type, EduUmassCsNioInterfacesIntegerPacketType_class_()) withEduUmassCsNioInterfacesPacketDemultiplexer:pd];
    }
  }
}

- (void)register__WithEduUmassCsNioInterfacesIntegerPacketTypeArray:(IOSObjectArray *)types {
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioAbstractPacketDemultiplexer_log)) infoWithNSString:JreStrcat("$@$@", @"Registering types ", (create_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(types))), @" for ", self)];
  {
    IOSObjectArray *a__ = types;
    id<EduUmassCsNioInterfacesIntegerPacketType> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<EduUmassCsNioInterfacesIntegerPacketType> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id type = *b__++;
      [self register__WithEduUmassCsNioInterfacesIntegerPacketType:(id<EduUmassCsNioInterfacesIntegerPacketType>) cast_check(type, EduUmassCsNioInterfacesIntegerPacketType_class_()) withEduUmassCsNioInterfacesPacketDemultiplexer:self];
    }
  }
}

- (void)registerOrderPreservingWithEduUmassCsNioInterfacesIntegerPacketType:(id<EduUmassCsNioInterfacesIntegerPacketType>)type {
  [self register__WithEduUmassCsNioInterfacesIntegerPacketType:type];
  [((id<JavaUtilSet>) nil_chk(self->orderPreservingTypes_)) addWithId:JavaLangInteger_valueOfWithInt_([((id<EduUmassCsNioInterfacesIntegerPacketType>) nil_chk(type)) getInt])];
}

- (void)stop {
  [((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(self->executor_)) shutdown];
}

+ (NSString *)getHandleMessageReportWithLong:(jlong)threshold {
  return EduUmassCsNioAbstractPacketDemultiplexer_getHandleMessageReportWithLong_(threshold);
}

- (jlong)insertWithId:(id)msg {
  return EduUmassCsNioAbstractPacketDemultiplexer_insertWithId_(self, msg);
}

- (void)release__WithLong:(jlong)t {
  EduUmassCsNioAbstractPacketDemultiplexer_release__WithLong_(self, t);
}

- (void)dealloc {
  RELEASE_(executor_);
  RELEASE_(demuxMap_);
  RELEASE_(orderPreservingTypes_);
  RELEASE_(threadName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x29, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2c, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x404, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x404, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x404, 8, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LEduUmassCsNioAbstractPacketDemultiplexer;", 0x1, 9, 1, -1, 10, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduUmassCsNioAbstractPacketDemultiplexer;", 0x4, 11, 12, -1, 13, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 15, 6, 16, -1, -1, -1 },
    { NULL, "V", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 17, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 3, -1, 19, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 22, -1, 23, -1, -1 },
    { NULL, "Z", 0x4, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, 20, 28, -1, 29, -1, -1 },
    { NULL, "V", 0x1, 20, 30, -1, 31, -1, -1 },
    { NULL, "V", 0x1, 20, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 34, 35, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 36, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 37, 35, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setThreadPoolSizeWithInt:);
  methods[1].selector = @selector(getThreadPoolSize);
  methods[2].selector = @selector(getPacketTypeWithId:);
  methods[3].selector = @selector(processHeaderWithByteArray:withEduUmassCsNioNioutilsNIOHeader:);
  methods[4].selector = @selector(matchesTypeWithId:);
  methods[5].selector = @selector(initWithInt:);
  methods[6].selector = @selector(setNumDemultiplexerThreadsWithInt:);
  methods[7].selector = @selector(init);
  methods[8].selector = @selector(setThreadNameWithNSString:);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(handleMessageSuperWithByteArray:withEduUmassCsNioNioutilsNIOHeader:);
  methods[11].selector = @selector(emulateDelays);
  methods[12].selector = @selector(loopbackWithId:);
  methods[13].selector = @selector(isOrderPreservingWithId:);
  methods[14].selector = @selector(register__WithEduUmassCsNioInterfacesIntegerPacketType:);
  methods[15].selector = @selector(register__WithEduUmassCsNioInterfacesIntegerPacketType:withEduUmassCsNioInterfacesPacketDemultiplexer:);
  methods[16].selector = @selector(isCongestedWithEduUmassCsNioNioutilsNIOHeader:);
  methods[17].selector = @selector(register__WithJavaUtilSet:withEduUmassCsNioInterfacesPacketDemultiplexer:);
  methods[18].selector = @selector(register__WithJavaUtilSet:);
  methods[19].selector = @selector(register__WithEduUmassCsNioInterfacesIntegerPacketTypeArray:withEduUmassCsNioInterfacesPacketDemultiplexer:);
  methods[20].selector = @selector(register__WithEduUmassCsNioInterfacesIntegerPacketTypeArray:);
  methods[21].selector = @selector(registerOrderPreservingWithEduUmassCsNioInterfacesIntegerPacketType:);
  methods[22].selector = @selector(stop);
  methods[23].selector = @selector(getHandleMessageReportWithLong:);
  methods[24].selector = @selector(insertWithId:);
  methods[25].selector = @selector(release__WithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_THREAD_POOL_SIZE", "I", .constantValue.asInt = EduUmassCsNioAbstractPacketDemultiplexer_DEFAULT_THREAD_POOL_SIZE, 0x19, -1, -1, -1, -1 },
    { "threadPoolSize", "I", .constantValue.asLong = 0, 0xa, -1, 38, -1, -1 },
    { "myThreadPoolSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "emulateDelays_", "Z", .constantValue.asLong = 0, 0xa, 39, 40, -1, -1 },
    { "executor_", "LJavaUtilConcurrentScheduledThreadPoolExecutor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "demuxMap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 41, -1 },
    { "orderPreservingTypes_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 42, -1 },
    { "log", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1c, -1, 43, -1, -1 },
    { "DEFAULT_THREAD_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 44, -1, -1 },
    { "threadName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "handleMessageStats", "LJavaUtilTreeMap;", .constantValue.asLong = 0, 0xa, -1, 45, 46, -1 },
  };
  static const void *ptrTable[] = { "setThreadPoolSize", "I", "getPacketType", "LNSObject;", "(TMessageType;)Ljava/lang/Integer;", "processHeader", "[BLEduUmassCsNioNioutilsNIOHeader;", "([BLedu/umass/cs/nio/nioutils/NIOHeader;)TMessageType;", "matchesType", "setNumDemultiplexerThreads", "(I)Ledu/umass/cs/nio/AbstractPacketDemultiplexer<TMessageType;>;", "setThreadName", "LNSString;", "(Ljava/lang/String;)Ledu/umass/cs/nio/AbstractPacketDemultiplexer<TMessageType;>;", "toString", "handleMessageSuper", "LOrgJsonJSONException;", "loopback", "isOrderPreserving", "(TMessageType;)Z", "register", "LEduUmassCsNioInterfacesIntegerPacketType;", "LEduUmassCsNioInterfacesIntegerPacketType;LEduUmassCsNioInterfacesPacketDemultiplexer;", "(Ledu/umass/cs/nio/interfaces/IntegerPacketType;Ledu/umass/cs/nio/interfaces/PacketDemultiplexer<TMessageType;>;)V", "isCongested", "LEduUmassCsNioNioutilsNIOHeader;", "LJavaUtilSet;LEduUmassCsNioInterfacesPacketDemultiplexer;", "(Ljava/util/Set<Ledu/umass/cs/nio/interfaces/IntegerPacketType;>;Ledu/umass/cs/nio/interfaces/PacketDemultiplexer<TMessageType;>;)V", "LJavaUtilSet;", "(Ljava/util/Set<Ledu/umass/cs/nio/interfaces/IntegerPacketType;>;)V", "[LEduUmassCsNioInterfacesIntegerPacketType;LEduUmassCsNioInterfacesPacketDemultiplexer;", "([Ledu/umass/cs/nio/interfaces/IntegerPacketType;Ledu/umass/cs/nio/interfaces/PacketDemultiplexer<TMessageType;>;)V", "[LEduUmassCsNioInterfacesIntegerPacketType;", "registerOrderPreserving", "getHandleMessageReport", "J", "insert", "release", &EduUmassCsNioAbstractPacketDemultiplexer_threadPoolSize, "emulateDelays", &EduUmassCsNioAbstractPacketDemultiplexer_emulateDelays_, "Ljava/util/HashMap<Ljava/lang/Integer;Ledu/umass/cs/nio/interfaces/PacketDemultiplexer<TMessageType;>;>;", "Ljava/util/Set<Ljava/lang/Integer;>;", &EduUmassCsNioAbstractPacketDemultiplexer_log, &EduUmassCsNioAbstractPacketDemultiplexer_DEFAULT_THREAD_NAME, &EduUmassCsNioAbstractPacketDemultiplexer_handleMessageStats, "Ljava/util/TreeMap<Ljava/lang/Long;Ljava/lang/Object;>;", "LEduUmassCsNioAbstractPacketDemultiplexer_Tasker;", "<MessageType:Ljava/lang/Object;>Ljava/lang/Object;Ledu/umass/cs/nio/interfaces/PacketDemultiplexer<TMessageType;>;" };
  static const J2ObjcClassInfo _EduUmassCsNioAbstractPacketDemultiplexer = { "AbstractPacketDemultiplexer", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x401, 26, 11, -1, 47, -1, 48, -1 };
  return &_EduUmassCsNioAbstractPacketDemultiplexer;
}

+ (void)initialize {
  if (self == [EduUmassCsNioAbstractPacketDemultiplexer class]) {
    JreStrongAssign(&EduUmassCsNioAbstractPacketDemultiplexer_log, EduUmassCsNioNIOTransport_getLogger());
    JreStrongAssign(&EduUmassCsNioAbstractPacketDemultiplexer_DEFAULT_THREAD_NAME, [EduUmassCsNioAbstractPacketDemultiplexer_class_() getSimpleName]);
    JreStrongAssignAndConsume(&EduUmassCsNioAbstractPacketDemultiplexer_handleMessageStats, new_JavaUtilTreeMap_init());
    J2OBJC_SET_INITIALIZED(EduUmassCsNioAbstractPacketDemultiplexer)
  }
}

@end

void EduUmassCsNioAbstractPacketDemultiplexer_setThreadPoolSizeWithInt_(jint threadPoolSize) {
  EduUmassCsNioAbstractPacketDemultiplexer_initialize();
  @synchronized(EduUmassCsNioAbstractPacketDemultiplexer_class_()) {
    EduUmassCsNioAbstractPacketDemultiplexer_threadPoolSize = threadPoolSize;
  }
}

jint EduUmassCsNioAbstractPacketDemultiplexer_getThreadPoolSize() {
  EduUmassCsNioAbstractPacketDemultiplexer_initialize();
  @synchronized(EduUmassCsNioAbstractPacketDemultiplexer_class_()) {
    return EduUmassCsNioAbstractPacketDemultiplexer_threadPoolSize;
  }
}

void EduUmassCsNioAbstractPacketDemultiplexer_initWithInt_(EduUmassCsNioAbstractPacketDemultiplexer *self, jint threadPoolSize) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->demuxMap_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->orderPreservingTypes_, new_JavaUtilHashSet_init());
  JreStrongAssign(&self->threadName_, EduUmassCsNioAbstractPacketDemultiplexer_DEFAULT_THREAD_NAME);
  JreStrongAssign(&self->executor_, (JavaUtilConcurrentScheduledThreadPoolExecutor *) cast_chk(JavaUtilConcurrentExecutors_newScheduledThreadPoolWithInt_withJavaUtilConcurrentThreadFactory_(threadPoolSize, create_EduUmassCsNioAbstractPacketDemultiplexer_1_initWithEduUmassCsNioAbstractPacketDemultiplexer_(self)), [JavaUtilConcurrentScheduledThreadPoolExecutor class]));
  self->myThreadPoolSize_ = threadPoolSize;
}

void EduUmassCsNioAbstractPacketDemultiplexer_init(EduUmassCsNioAbstractPacketDemultiplexer *self) {
  EduUmassCsNioAbstractPacketDemultiplexer_initWithInt_(self, EduUmassCsNioAbstractPacketDemultiplexer_getThreadPoolSize());
}

void EduUmassCsNioAbstractPacketDemultiplexer_emulateDelays() {
  EduUmassCsNioAbstractPacketDemultiplexer_initialize();
  EduUmassCsNioAbstractPacketDemultiplexer_emulateDelays_ = true;
}

NSString *EduUmassCsNioAbstractPacketDemultiplexer_getHandleMessageReportWithLong_(jlong threshold) {
  EduUmassCsNioAbstractPacketDemultiplexer_initialize();
  id<JavaUtilMap_Entry> entry_ = [((JavaUtilTreeMap *) nil_chk(EduUmassCsNioAbstractPacketDemultiplexer_handleMessageStats)) firstEntry];
  if (entry_ != nil && (JavaLangSystem_nanoTime() - [((JavaLangLong *) nil_chk([entry_ getKey])) longLongValue]) / 1000 / 1000 > threshold) return JreStrcat("$@$J$I", @"Message [", EduUmassCsUtilsUtil_truncateWithId_withInt_withInt_([nil_chk([entry_ getValue]) description], 64, 64), @" has been handled within ", threshold / 1000, @" seconds; total=", [((JavaUtilTreeMap *) nil_chk(EduUmassCsNioAbstractPacketDemultiplexer_handleMessageStats)) size]);
  return nil;
}

jlong EduUmassCsNioAbstractPacketDemultiplexer_insertWithId_(EduUmassCsNioAbstractPacketDemultiplexer *self, id msg) {
  @synchronized(EduUmassCsNioAbstractPacketDemultiplexer_handleMessageStats) {
    jlong t = JavaLangSystem_nanoTime();
    [((JavaUtilTreeMap *) nil_chk(EduUmassCsNioAbstractPacketDemultiplexer_handleMessageStats)) putWithId:JavaLangLong_valueOfWithLong_(t) withId:msg];
    return t;
  }
}

void EduUmassCsNioAbstractPacketDemultiplexer_release__WithLong_(EduUmassCsNioAbstractPacketDemultiplexer *self, jlong t) {
  @synchronized(self) {
    @synchronized(EduUmassCsNioAbstractPacketDemultiplexer_handleMessageStats) {
      [((JavaUtilTreeMap *) nil_chk(EduUmassCsNioAbstractPacketDemultiplexer_handleMessageStats)) removeWithId:JavaLangLong_valueOfWithLong_(t)];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioAbstractPacketDemultiplexer)

@implementation EduUmassCsNioAbstractPacketDemultiplexer_1

- (instancetype)initWithEduUmassCsNioAbstractPacketDemultiplexer:(EduUmassCsNioAbstractPacketDemultiplexer *)outer$ {
  EduUmassCsNioAbstractPacketDemultiplexer_1_initWithEduUmassCsNioAbstractPacketDemultiplexer_(self, outer$);
  return self;
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  JavaLangThread *thread = [((id<JavaUtilConcurrentThreadFactory>) nil_chk(JavaUtilConcurrentExecutors_defaultThreadFactory())) newThreadWithJavaLangRunnable:r];
  [((JavaLangThread *) nil_chk(thread)) setNameWithNSString:this$0_->threadName_];
  return thread;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduUmassCsNioAbstractPacketDemultiplexer:);
  methods[1].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduUmassCsNioAbstractPacketDemultiplexer;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "newThread", "LJavaLangRunnable;", "Ledu/umass/cs/nio/AbstractPacketDemultiplexer<TMessageType;>;", "LEduUmassCsNioAbstractPacketDemultiplexer;", "initWithInt:" };
  static const J2ObjcClassInfo _EduUmassCsNioAbstractPacketDemultiplexer_1 = { "", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_EduUmassCsNioAbstractPacketDemultiplexer_1;
}

@end

void EduUmassCsNioAbstractPacketDemultiplexer_1_initWithEduUmassCsNioAbstractPacketDemultiplexer_(EduUmassCsNioAbstractPacketDemultiplexer_1 *self, EduUmassCsNioAbstractPacketDemultiplexer *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

EduUmassCsNioAbstractPacketDemultiplexer_1 *new_EduUmassCsNioAbstractPacketDemultiplexer_1_initWithEduUmassCsNioAbstractPacketDemultiplexer_(EduUmassCsNioAbstractPacketDemultiplexer *outer$) {
  J2OBJC_NEW_IMPL(EduUmassCsNioAbstractPacketDemultiplexer_1, initWithEduUmassCsNioAbstractPacketDemultiplexer_, outer$)
}

EduUmassCsNioAbstractPacketDemultiplexer_1 *create_EduUmassCsNioAbstractPacketDemultiplexer_1_initWithEduUmassCsNioAbstractPacketDemultiplexer_(EduUmassCsNioAbstractPacketDemultiplexer *outer$) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioAbstractPacketDemultiplexer_1, initWithEduUmassCsNioAbstractPacketDemultiplexer_, outer$)
}

@implementation EduUmassCsNioAbstractPacketDemultiplexer_Tasker

- (instancetype)initWithEduUmassCsNioAbstractPacketDemultiplexer:(EduUmassCsNioAbstractPacketDemultiplexer *)outer$
                                                          withId:(id)json
                  withEduUmassCsNioInterfacesPacketDemultiplexer:(id<EduUmassCsNioInterfacesPacketDemultiplexer>)pd
                              withEduUmassCsNioNioutilsNIOHeader:(EduUmassCsNioNioutilsNIOHeader *)header {
  EduUmassCsNioAbstractPacketDemultiplexer_Tasker_initWithEduUmassCsNioAbstractPacketDemultiplexer_withId_withEduUmassCsNioInterfacesPacketDemultiplexer_withEduUmassCsNioNioutilsNIOHeader_(self, outer$, json, pd, header);
  return self;
}

- (void)run {
  @try {
    jlong t = 0;
    if (EduUmassCsNioNioutilsNIOInstrumenter_monitorHandleMessageEnabled()) t = EduUmassCsNioAbstractPacketDemultiplexer_insertWithId_(this$0_, self->json_);
    [((id<EduUmassCsNioInterfacesPacketDemultiplexer>) nil_chk(pd_)) handleMessageWithId:self->json_ withEduUmassCsNioNioutilsNIOHeader:header_];
    if (EduUmassCsNioNioutilsNIOInstrumenter_monitorHandleMessageEnabled()) EduUmassCsNioAbstractPacketDemultiplexer_release__WithLong_(this$0_, t);
  }
  @catch (JavaUtilConcurrentRejectedExecutionException *ree) {
    if (![((JavaUtilConcurrentScheduledThreadPoolExecutor *) nil_chk(this$0_->executor_)) isShutdown]) [((JavaUtilConcurrentRejectedExecutionException *) nil_chk(ree)) printStackTrace];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangError *e) {
    [((JavaLangError *) nil_chk(e)) printStackTrace];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(json_);
  RELEASE_(pd_);
  RELEASE_(header_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduUmassCsNioAbstractPacketDemultiplexer:withId:withEduUmassCsNioInterfacesPacketDemultiplexer:withEduUmassCsNioNioutilsNIOHeader:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduUmassCsNioAbstractPacketDemultiplexer;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "json_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "pd_", "LEduUmassCsNioInterfacesPacketDemultiplexer;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "header_", "LEduUmassCsNioNioutilsNIOHeader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LEduUmassCsNioInterfacesPacketDemultiplexer;LEduUmassCsNioNioutilsNIOHeader;", "(TMessageType;Ledu/umass/cs/nio/interfaces/PacketDemultiplexer<TMessageType;>;Ledu/umass/cs/nio/nioutils/NIOHeader;)V", "Ledu/umass/cs/nio/AbstractPacketDemultiplexer<TMessageType;>;", "TMessageType;", "Ledu/umass/cs/nio/interfaces/PacketDemultiplexer<TMessageType;>;", "LEduUmassCsNioAbstractPacketDemultiplexer;" };
  static const J2ObjcClassInfo _EduUmassCsNioAbstractPacketDemultiplexer_Tasker = { "Tasker", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x4, 2, 4, 5, -1, -1, -1, -1 };
  return &_EduUmassCsNioAbstractPacketDemultiplexer_Tasker;
}

@end

void EduUmassCsNioAbstractPacketDemultiplexer_Tasker_initWithEduUmassCsNioAbstractPacketDemultiplexer_withId_withEduUmassCsNioInterfacesPacketDemultiplexer_withEduUmassCsNioNioutilsNIOHeader_(EduUmassCsNioAbstractPacketDemultiplexer_Tasker *self, EduUmassCsNioAbstractPacketDemultiplexer *outer$, id json, id<EduUmassCsNioInterfacesPacketDemultiplexer> pd, EduUmassCsNioNioutilsNIOHeader *header) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->json_, json);
  JreStrongAssign(&self->pd_, pd);
  JreStrongAssign(&self->header_, header);
}

EduUmassCsNioAbstractPacketDemultiplexer_Tasker *new_EduUmassCsNioAbstractPacketDemultiplexer_Tasker_initWithEduUmassCsNioAbstractPacketDemultiplexer_withId_withEduUmassCsNioInterfacesPacketDemultiplexer_withEduUmassCsNioNioutilsNIOHeader_(EduUmassCsNioAbstractPacketDemultiplexer *outer$, id json, id<EduUmassCsNioInterfacesPacketDemultiplexer> pd, EduUmassCsNioNioutilsNIOHeader *header) {
  J2OBJC_NEW_IMPL(EduUmassCsNioAbstractPacketDemultiplexer_Tasker, initWithEduUmassCsNioAbstractPacketDemultiplexer_withId_withEduUmassCsNioInterfacesPacketDemultiplexer_withEduUmassCsNioNioutilsNIOHeader_, outer$, json, pd, header)
}

EduUmassCsNioAbstractPacketDemultiplexer_Tasker *create_EduUmassCsNioAbstractPacketDemultiplexer_Tasker_initWithEduUmassCsNioAbstractPacketDemultiplexer_withId_withEduUmassCsNioInterfacesPacketDemultiplexer_withEduUmassCsNioNioutilsNIOHeader_(EduUmassCsNioAbstractPacketDemultiplexer *outer$, id json, id<EduUmassCsNioInterfacesPacketDemultiplexer> pd, EduUmassCsNioNioutilsNIOHeader *header) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioAbstractPacketDemultiplexer_Tasker, initWithEduUmassCsNioAbstractPacketDemultiplexer_withId_withEduUmassCsNioInterfacesPacketDemultiplexer_withEduUmassCsNioNioutilsNIOHeader_, outer$, json, pd, header)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioAbstractPacketDemultiplexer_Tasker)
