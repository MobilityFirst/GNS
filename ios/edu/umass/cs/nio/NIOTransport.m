//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../gig_ios/src/edu/umass/cs/nio/NIOTransport.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/umass/cs/nio/NIOTransport.h"
#include "edu/umass/cs/nio/SSLDataProcessingWorker.h"
#include "edu/umass/cs/nio/interfaces/DataProcessingWorker.h"
#include "edu/umass/cs/nio/interfaces/NodeConfig.h"
#include "edu/umass/cs/nio/nioutils/DataProcessingWorkerDefault.h"
#include "edu/umass/cs/nio/nioutils/NIOInstrumenter.h"
#include "edu/umass/cs/nio/nioutils/RTTEstimator.h"
#include "edu/umass/cs/nio/nioutils/SampleNodeConfig.h"
#include "edu/umass/cs/utils/Stringer.h"
#include "edu/umass/cs/utils/Util.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/BindException.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/net/SocketAddress.h"
#include "java/nio/Buffer.h"
#include "java/nio/BufferOverflowException.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/channels/CancelledKeyException.h"
#include "java/nio/channels/ClosedChannelException.h"
#include "java/nio/channels/SelectableChannel.h"
#include "java/nio/channels/SelectionKey.h"
#include "java/nio/channels/Selector.h"
#include "java/nio/channels/ServerSocketChannel.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/Set.h"
#include "java/util/TimerTask.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/logging/ConsoleHandler.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "java/util/zip/DataFormatException.h"
#include "java/util/zip/Deflater.h"
#include "java/util/zip/Inflater.h"

@interface EduUmassCsNioNIOTransport () {
 @public
  jint maxQueuedSends_;
  jint minInterConnectTime_;
  JavaNioChannelsSelector *selector_;
  JavaNioByteBuffer *writeBuffer_;
  JavaNioChannelsServerSocketChannel *serverChannel_;
  JavaUtilLinkedList *pendingConnects_;
  JavaUtilConcurrentConcurrentHashMap *sendQueues_;
  JavaUtilHashMap *sockAddrToSockChannel_;
  JavaUtilHashMap *connAttempts_;
  JavaUtilConcurrentConcurrentHashMap *lastFailed_;
  EduUmassCsNioNIOTransport_SenderTask *senderTask_;
  jboolean started_;
  jboolean stopped_;
  JavaLangThread *me_;
  jlong meThreadId_;
  JavaNetInetSocketAddress *listeningSocketAddress_;
  JavaNetInetAddress *listeningAddress_;
  jint listeningPort_;
  JavaUtilConcurrentConcurrentHashMap *readBuffers_;
  JavaUtilConcurrentConcurrentHashMap *congested_;
  jlong lastRegisterWriteInterestsInvoked_;
}

- (jint)getMaxQueuedSends;

- (jint)getMinInterConnectTime;

- (instancetype)initWithId:(id)id_
withEduUmassCsNioInterfacesNodeConfig:(id<EduUmassCsNioInterfacesNodeConfig>)nc
withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)mySockAddr
withEduUmassCsNioInterfacesDataProcessingWorker:(id<EduUmassCsNioInterfacesDataProcessingWorker>)worker
               withBoolean:(jboolean)start
withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)sslMode;

- (id<EduUmassCsNioInterfacesDataProcessingWorker>)getWorkerWithEduUmassCsNioInterfacesDataProcessingWorker:(id<EduUmassCsNioInterfacesDataProcessingWorker>)worker
                                                         withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)sslMode;

- (IOSByteArray *)deflateWithByteArray:(IOSByteArray *)data;

+ (JavaNioByteBuffer *)getHeaderedByteBufferWithByteArray:(IOSByteArray *)data;

+ (JavaNioByteBuffer *)putHeaderLengthWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf
                                                    withInt:(jint)length;

- (jboolean)isDisconnectedWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_;

- (void)processSelectedKeys;

- (void)updateFailedWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key;

- (void)updateFailedWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)remote;

- (id)getNodeIDWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_;

- (void)updateAliveWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)channel;

- (void)acceptWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key;

- (void)readWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key;

- (void)tryProcessCongested;

- (JavaNioByteBuffer *)inflateWithJavaNioByteBuffer:(JavaNioByteBuffer *)bbuf;

- (void)writeWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key;

- (void)clearPendingWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel;

- (jboolean)useSenderTask;

- (jboolean)writeAllPendingWritesWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                             withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel;

- (void)sendUnbatchedWithJavaUtilConcurrentLinkedBlockingQueue:(JavaUtilConcurrentLinkedBlockingQueue *)sendQueue
                              withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel;

- (void)sendBatchedWithJavaUtilConcurrentLinkedBlockingQueue:(JavaUtilConcurrentLinkedBlockingQueue *)sendQueue
                            withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel;

- (void)dequeueSendQueueIfEmptyWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                  withJavaUtilConcurrentLinkedBlockingQueue:(JavaUtilConcurrentLinkedBlockingQueue *)sendQueue;

- (jint)wrapWriteWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel
                            withJavaNioByteBuffer:(JavaNioByteBuffer *)unencrypted;

- (jint)wrapWriteWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel
                            withJavaNioByteBuffer:(JavaNioByteBuffer *)unencrypted
                                      withBoolean:(jboolean)sneakyMode;

- (jboolean)isSSL;

- (jboolean)isHandshakeCompleteWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel;

- (jint)enqueueSendWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                          withJavaNioByteBuffer:(JavaNioByteBuffer *)data;

- (jboolean)canEnqueueSendWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_;

- (void)wakeupSelectorWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_;

- (jboolean)trySneakyWriteWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                                 withJavaNioByteBuffer:(JavaNioByteBuffer *)data;

- (void)registerWriteInterests;

- (void)cleanupSSLWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key;

+ (void)cleanupWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
          withJavaNioChannelsSelectableChannel:(JavaNioChannelsSelectableChannel *)sc;

- (void)cleanupRetryWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
                   withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)sc
                       withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_;

- (jboolean)canReconnectWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_;

- (jboolean)checkAndReconnectWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_;

- (JavaNioChannelsSocketChannel *)getSockAddrToSockChannelWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_;

- (void)putSockAddrToSockChannelWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                            withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel;

- (JavaNetInetSocketAddress *)getSockAddrFromSockChannelWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)sc;

- (void)reuseAcceptedConnectionForWritesWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel;

- (jboolean)isConnectedWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                                        withBoolean:(jboolean)doLog;

- (jboolean)isConnectedWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_;

- (void)testAndIntiateConnectionWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_;

- (void)addPendingConnectWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel;

- (void)processPendingConnects;

- (JavaNioChannelsSelector *)initSelectorWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)mySockAddr OBJC_METHOD_FAMILY_NONE;

- (JavaNioChannelsSocketChannel *)initiateConnectionWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ OBJC_METHOD_FAMILY_NONE;

- (void)removePartialBuffersWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_;

- (jboolean)finishConnectionWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key;

- (jboolean)isNodeIDWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_;

- (jboolean)registerSSLWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
                                           withBoolean:(jboolean)client;

@end

J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, selector_, JavaNioChannelsSelector *)
J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, writeBuffer_, JavaNioByteBuffer *)
J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, serverChannel_, JavaNioChannelsServerSocketChannel *)
J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, pendingConnects_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, sendQueues_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, sockAddrToSockChannel_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, connAttempts_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, lastFailed_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, senderTask_, EduUmassCsNioNIOTransport_SenderTask *)
J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, me_, JavaLangThread *)
J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, listeningSocketAddress_, JavaNetInetSocketAddress *)
J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, listeningAddress_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, readBuffers_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport, congested_, JavaUtilConcurrentConcurrentHashMap *)

inline jint EduUmassCsNioNIOTransport_get_HINT_SOCK_BUFFER_SIZE();
#define EduUmassCsNioNIOTransport_HINT_SOCK_BUFFER_SIZE 524288
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsNioNIOTransport, HINT_SOCK_BUFFER_SIZE, jint)

inline jboolean EduUmassCsNioNIOTransport_get_DUPLEX_CONNECTIONS();
#define EduUmassCsNioNIOTransport_DUPLEX_CONNECTIONS true
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsNioNIOTransport, DUPLEX_CONNECTIONS, jboolean)

inline jint EduUmassCsNioNIOTransport_get_READ_BUFFER_SIZE();
#define EduUmassCsNioNIOTransport_READ_BUFFER_SIZE 65536
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsNioNIOTransport, READ_BUFFER_SIZE, jint)

inline jint EduUmassCsNioNIOTransport_get_instanceCount();
inline jint EduUmassCsNioNIOTransport_set_instanceCount(jint value);
inline jint *EduUmassCsNioNIOTransport_getRef_instanceCount();
static jint EduUmassCsNioNIOTransport_instanceCount = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduUmassCsNioNIOTransport, instanceCount, jint)

inline JavaUtilLoggingLogger *EduUmassCsNioNIOTransport_get_log();
static JavaUtilLoggingLogger *EduUmassCsNioNIOTransport_log;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduUmassCsNioNIOTransport, log, JavaUtilLoggingLogger *)

inline jint EduUmassCsNioNIOTransport_get_PREAMBLE();
#define EduUmassCsNioNIOTransport_PREAMBLE 723432553
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsNioNIOTransport, PREAMBLE, jint)

inline jboolean EduUmassCsNioNIOTransport_get_USE_PREAMBLE();
inline jboolean EduUmassCsNioNIOTransport_set_USE_PREAMBLE(jboolean value);
inline jboolean *EduUmassCsNioNIOTransport_getRef_USE_PREAMBLE();
static jboolean EduUmassCsNioNIOTransport_USE_PREAMBLE = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduUmassCsNioNIOTransport, USE_PREAMBLE, jboolean)

inline jint EduUmassCsNioNIOTransport_get_HEADER_SIZE();
inline jint EduUmassCsNioNIOTransport_set_HEADER_SIZE(jint value);
inline jint *EduUmassCsNioNIOTransport_getRef_HEADER_SIZE();
static jint EduUmassCsNioNIOTransport_HEADER_SIZE;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduUmassCsNioNIOTransport, HEADER_SIZE, jint)

inline jlong EduUmassCsNioNIOTransport_get_SELECT_TIMEOUT();
#define EduUmassCsNioNIOTransport_SELECT_TIMEOUT 2000LL
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsNioNIOTransport, SELECT_TIMEOUT, jlong)

inline jboolean EduUmassCsNioNIOTransport_get_enableCompression();
inline jboolean EduUmassCsNioNIOTransport_set_enableCompression(jboolean value);
inline jboolean *EduUmassCsNioNIOTransport_getRef_enableCompression();
static jboolean EduUmassCsNioNIOTransport_enableCompression = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduUmassCsNioNIOTransport, enableCompression, jboolean)

inline jint EduUmassCsNioNIOTransport_get_compressionThreshold();
inline jint EduUmassCsNioNIOTransport_set_compressionThreshold(jint value);
inline jint *EduUmassCsNioNIOTransport_getRef_compressionThreshold();
static jint EduUmassCsNioNIOTransport_compressionThreshold = 4194304;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduUmassCsNioNIOTransport, compressionThreshold, jint)

inline jboolean EduUmassCsNioNIOTransport_get_useSenderTask_();
inline jboolean EduUmassCsNioNIOTransport_set_useSenderTask_(jboolean value);
inline jboolean *EduUmassCsNioNIOTransport_getRef_useSenderTask_();
static jboolean EduUmassCsNioNIOTransport_useSenderTask_ = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduUmassCsNioNIOTransport, useSenderTask_, jboolean)

inline jboolean EduUmassCsNioNIOTransport_get_SEND_BATCHED();
inline jboolean EduUmassCsNioNIOTransport_set_SEND_BATCHED(jboolean value);
inline jboolean *EduUmassCsNioNIOTransport_getRef_SEND_BATCHED();
static jboolean EduUmassCsNioNIOTransport_SEND_BATCHED = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduUmassCsNioNIOTransport, SEND_BATCHED, jboolean)

inline jboolean EduUmassCsNioNIOTransport_get_SNEAK_DIRECT_WRITE();
#define EduUmassCsNioNIOTransport_SNEAK_DIRECT_WRITE true
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsNioNIOTransport, SNEAK_DIRECT_WRITE, jboolean)

inline jlong EduUmassCsNioNIOTransport_get_INTER_REGISTER_WRITE_INTERESTS_SPACING();
inline jlong EduUmassCsNioNIOTransport_set_INTER_REGISTER_WRITE_INTERESTS_SPACING(jlong value);
inline jlong *EduUmassCsNioNIOTransport_getRef_INTER_REGISTER_WRITE_INTERESTS_SPACING();
static jlong EduUmassCsNioNIOTransport_INTER_REGISTER_WRITE_INTERESTS_SPACING = 8000;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduUmassCsNioNIOTransport, INTER_REGISTER_WRITE_INTERESTS_SPACING, jlong)

inline jint EduUmassCsNioNIOTransport_get_NUM_RETRIES();
#define EduUmassCsNioNIOTransport_NUM_RETRIES 100
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsNioNIOTransport, NUM_RETRIES, jint)

__attribute__((unused)) static jint EduUmassCsNioNIOTransport_getMaxQueuedSends(EduUmassCsNioNIOTransport *self);

__attribute__((unused)) static jint EduUmassCsNioNIOTransport_getMinInterConnectTime(EduUmassCsNioNIOTransport *self);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(EduUmassCsNioNIOTransport *self, id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, JavaNetInetSocketAddress *mySockAddr, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, jboolean start, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode);

__attribute__((unused)) static EduUmassCsNioNIOTransport *new_EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, JavaNetInetSocketAddress *mySockAddr, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, jboolean start, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsNioNIOTransport *create_EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, JavaNetInetSocketAddress *mySockAddr, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, jboolean start, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode);

__attribute__((unused)) static id<EduUmassCsNioInterfacesDataProcessingWorker> EduUmassCsNioNIOTransport_getWorkerWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(EduUmassCsNioNIOTransport *self, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode);

__attribute__((unused)) static IOSByteArray *EduUmassCsNioNIOTransport_deflateWithByteArray_(EduUmassCsNioNIOTransport *self, IOSByteArray *data);

__attribute__((unused)) static JavaNioByteBuffer *EduUmassCsNioNIOTransport_getHeaderedByteBufferWithByteArray_(IOSByteArray *data);

__attribute__((unused)) static JavaNioByteBuffer *EduUmassCsNioNIOTransport_putHeaderLengthWithJavaNioByteBuffer_withInt_(JavaNioByteBuffer *buf, jint length);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_isDisconnectedWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_processSelectedKeys(EduUmassCsNioNIOTransport *self);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_updateFailedWithJavaNioChannelsSelectionKey_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_updateFailedWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *remote);

__attribute__((unused)) static id EduUmassCsNioNIOTransport_getNodeIDWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_updateAliveWithJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *channel);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_acceptWithJavaNioChannelsSelectionKey_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_readWithJavaNioChannelsSelectionKey_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_tryProcessCongested(EduUmassCsNioNIOTransport *self);

__attribute__((unused)) static JavaNioByteBuffer *EduUmassCsNioNIOTransport_inflateWithJavaNioByteBuffer_(EduUmassCsNioNIOTransport *self, JavaNioByteBuffer *bbuf);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_writeWithJavaNioChannelsSelectionKey_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_clearPendingWithJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *socketChannel);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_useSenderTask(EduUmassCsNioNIOTransport *self);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_writeAllPendingWritesWithJavaNetInetSocketAddress_withJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_, JavaNioChannelsSocketChannel *socketChannel);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_sendUnbatchedWithJavaUtilConcurrentLinkedBlockingQueue_withJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaUtilConcurrentLinkedBlockingQueue *sendQueue, JavaNioChannelsSocketChannel *socketChannel);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_sendBatchedWithJavaUtilConcurrentLinkedBlockingQueue_withJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaUtilConcurrentLinkedBlockingQueue *sendQueue, JavaNioChannelsSocketChannel *socketChannel);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_dequeueSendQueueIfEmptyWithJavaNetInetSocketAddress_withJavaUtilConcurrentLinkedBlockingQueue_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_, JavaUtilConcurrentLinkedBlockingQueue *sendQueue);

__attribute__((unused)) static jint EduUmassCsNioNIOTransport_wrapWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *socketChannel, JavaNioByteBuffer *unencrypted);

__attribute__((unused)) static jint EduUmassCsNioNIOTransport_wrapWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_withBoolean_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *socketChannel, JavaNioByteBuffer *unencrypted, jboolean sneakyMode);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_isSSL(EduUmassCsNioNIOTransport *self);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_isHandshakeCompleteWithJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *socketChannel);

__attribute__((unused)) static jint EduUmassCsNioNIOTransport_enqueueSendWithJavaNetInetSocketAddress_withJavaNioByteBuffer_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_, JavaNioByteBuffer *data);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_canEnqueueSendWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_wakeupSelectorWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_trySneakyWriteWithJavaNetInetSocketAddress_withJavaNioByteBuffer_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_, JavaNioByteBuffer *data);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_registerWriteInterests(EduUmassCsNioNIOTransport *self);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_cleanupWithJavaNioChannelsSelectionKey_withJavaNioChannelsSelectableChannel_(JavaNioChannelsSelectionKey *key, JavaNioChannelsSelectableChannel *sc);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_cleanupRetryWithJavaNioChannelsSelectionKey_withJavaNioChannelsSocketChannel_withJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key, JavaNioChannelsSocketChannel *sc, JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_canReconnectWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_checkAndReconnectWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static JavaNioChannelsSocketChannel *EduUmassCsNioNIOTransport_getSockAddrToSockChannelWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_putSockAddrToSockChannelWithJavaNetInetSocketAddress_withJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_, JavaNioChannelsSocketChannel *socketChannel);

__attribute__((unused)) static JavaNetInetSocketAddress *EduUmassCsNioNIOTransport_getSockAddrFromSockChannelWithJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *sc);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_reuseAcceptedConnectionForWritesWithJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *socketChannel);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_isConnectedWithJavaNetInetSocketAddress_withBoolean_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_, jboolean doLog);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_isConnectedWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_testAndIntiateConnectionWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_addPendingConnectWithJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *socketChannel);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_processPendingConnects(EduUmassCsNioNIOTransport *self);

__attribute__((unused)) static JavaNioChannelsSelector *EduUmassCsNioNIOTransport_initSelectorWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *mySockAddr);

__attribute__((unused)) static JavaNioChannelsSocketChannel *EduUmassCsNioNIOTransport_initiateConnectionWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_removePartialBuffersWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_finishConnectionWithJavaNioChannelsSelectionKey_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_isNodeIDWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_);

__attribute__((unused)) static jboolean EduUmassCsNioNIOTransport_registerSSLWithJavaNioChannelsSelectionKey_withBoolean_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key, jboolean client);

@interface EduUmassCsNioNIOTransport_SenderTask () {
 @public
  EduUmassCsNioNIOTransport *this$0_;
  jboolean stopped_;
}

@end

inline jlong EduUmassCsNioNIOTransport_SenderTask_get_PO_TIMEOUT();
#define EduUmassCsNioNIOTransport_SenderTask_PO_TIMEOUT 1000LL
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsNioNIOTransport_SenderTask, PO_TIMEOUT, jlong)

@interface EduUmassCsNioNIOTransport_ChangeRequest : NSObject {
 @public
  JavaNioChannelsSocketChannel *socket_;
  jint type_;
  jint ops_;
}

- (instancetype)initWithEduUmassCsNioNIOTransport:(EduUmassCsNioNIOTransport *)outer$
                 withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socket
                                          withInt:(jint)type
                                          withInt:(jint)ops;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUmassCsNioNIOTransport_ChangeRequest)

J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport_ChangeRequest, socket_, JavaNioChannelsSocketChannel *)

inline jint EduUmassCsNioNIOTransport_ChangeRequest_get_REGISTER();
#define EduUmassCsNioNIOTransport_ChangeRequest_REGISTER 1
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsNioNIOTransport_ChangeRequest, REGISTER, jint)

inline jint EduUmassCsNioNIOTransport_ChangeRequest_get_CHANGEOPS();
#define EduUmassCsNioNIOTransport_ChangeRequest_CHANGEOPS 2
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsNioNIOTransport_ChangeRequest, CHANGEOPS, jint)

__attribute__((unused)) static void EduUmassCsNioNIOTransport_ChangeRequest_initWithEduUmassCsNioNIOTransport_withJavaNioChannelsSocketChannel_withInt_withInt_(EduUmassCsNioNIOTransport_ChangeRequest *self, EduUmassCsNioNIOTransport *outer$, JavaNioChannelsSocketChannel *socket, jint type, jint ops);

__attribute__((unused)) static EduUmassCsNioNIOTransport_ChangeRequest *new_EduUmassCsNioNIOTransport_ChangeRequest_initWithEduUmassCsNioNIOTransport_withJavaNioChannelsSocketChannel_withInt_withInt_(EduUmassCsNioNIOTransport *outer$, JavaNioChannelsSocketChannel *socket, jint type, jint ops) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsNioNIOTransport_ChangeRequest *create_EduUmassCsNioNIOTransport_ChangeRequest_initWithEduUmassCsNioNIOTransport_withJavaNioChannelsSocketChannel_withInt_withInt_(EduUmassCsNioNIOTransport *outer$, JavaNioChannelsSocketChannel *socket, jint type, jint ops);

J2OBJC_TYPE_LITERAL_HEADER(EduUmassCsNioNIOTransport_ChangeRequest)

@interface EduUmassCsNioNIOTransport_1TX : JavaUtilTimerTask {
 @public
  EduUmassCsNioNIOTransport *sndr_;
  jint rcvr_;
}

- (instancetype)initWithInt:(jint)i
                    withInt:(jint)id_
withEduUmassCsNioNIOTransportArray:(IOSObjectArray *)n;

- (instancetype)initWithEduUmassCsNioNIOTransport:(EduUmassCsNioNIOTransport *)niot
                                          withInt:(jint)id_;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUmassCsNioNIOTransport_1TX)

J2OBJC_FIELD_SETTER(EduUmassCsNioNIOTransport_1TX, sndr_, EduUmassCsNioNIOTransport *)

__attribute__((unused)) static void EduUmassCsNioNIOTransport_1TX_initWithInt_withInt_withEduUmassCsNioNIOTransportArray_(EduUmassCsNioNIOTransport_1TX *self, jint i, jint id_, IOSObjectArray *n);

__attribute__((unused)) static EduUmassCsNioNIOTransport_1TX *new_EduUmassCsNioNIOTransport_1TX_initWithInt_withInt_withEduUmassCsNioNIOTransportArray_(jint i, jint id_, IOSObjectArray *n) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsNioNIOTransport_1TX *create_EduUmassCsNioNIOTransport_1TX_initWithInt_withInt_withEduUmassCsNioNIOTransportArray_(jint i, jint id_, IOSObjectArray *n);

__attribute__((unused)) static void EduUmassCsNioNIOTransport_1TX_initWithEduUmassCsNioNIOTransport_withInt_(EduUmassCsNioNIOTransport_1TX *self, EduUmassCsNioNIOTransport *niot, jint id_);

__attribute__((unused)) static EduUmassCsNioNIOTransport_1TX *new_EduUmassCsNioNIOTransport_1TX_initWithEduUmassCsNioNIOTransport_withInt_(EduUmassCsNioNIOTransport *niot, jint id_) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsNioNIOTransport_1TX *create_EduUmassCsNioNIOTransport_1TX_initWithEduUmassCsNioNIOTransport_withInt_(EduUmassCsNioNIOTransport *niot, jint id_);

J2OBJC_TYPE_LITERAL_HEADER(EduUmassCsNioNIOTransport_1TX)

J2OBJC_INITIALIZED_DEFN(EduUmassCsNioNIOTransport)

EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *EduUmassCsNioNIOTransport_DEFAULT_SSL_MODE;

@implementation EduUmassCsNioNIOTransport

- (void)setMaxQueuedSendsWithInt:(jint)maxQ {
  self->maxQueuedSends_ = maxQ;
}

- (jint)getMaxQueuedSends {
  return EduUmassCsNioNIOTransport_getMaxQueuedSends(self);
}

- (void)setMinInterConnectTimeWithInt:(jint)minInterConnectTime {
  self->minInterConnectTime_ = minInterConnectTime;
}

- (jint)getMinInterConnectTime {
  return EduUmassCsNioNIOTransport_getMinInterConnectTime(self);
}

+ (JavaUtilLoggingLogger *)getLogger {
  return EduUmassCsNioNIOTransport_getLogger();
}

- (instancetype)initWithId:(id)id_
withEduUmassCsNioInterfacesNodeConfig:(id<EduUmassCsNioInterfacesNodeConfig>)nc
withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)mySockAddr
withEduUmassCsNioInterfacesDataProcessingWorker:(id<EduUmassCsNioInterfacesDataProcessingWorker>)worker
               withBoolean:(jboolean)start
withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)sslMode {
  EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(self, id_, nc, mySockAddr, worker, start, sslMode);
  return self;
}

- (EduUmassCsNioNIOTransport *)setNameWithNSString:(NSString *)name {
  [((JavaLangThread *) nil_chk(self->me_)) setNameWithNSString:name];
  return self;
}

- (instancetype)initWithId:(id)id_
withEduUmassCsNioInterfacesNodeConfig:(id<EduUmassCsNioInterfacesNodeConfig>)nc
withEduUmassCsNioInterfacesDataProcessingWorker:(id<EduUmassCsNioInterfacesDataProcessingWorker>)worker {
  EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_(self, id_, nc, worker);
  return self;
}

- (instancetype)initWithId:(id)id_
withEduUmassCsNioInterfacesNodeConfig:(id<EduUmassCsNioInterfacesNodeConfig>)nc
withEduUmassCsNioInterfacesDataProcessingWorker:(id<EduUmassCsNioInterfacesDataProcessingWorker>)worker
               withBoolean:(jboolean)start
withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)sslMode {
  EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(self, id_, nc, worker, start, sslMode);
  return self;
}

- (instancetype)initWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
           withEduUmassCsNioInterfacesNodeConfig:(id<EduUmassCsNioInterfacesNodeConfig>)nc
 withEduUmassCsNioInterfacesDataProcessingWorker:(id<EduUmassCsNioInterfacesDataProcessingWorker>)worker
                                     withBoolean:(jboolean)start
withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)sslMode {
  EduUmassCsNioNIOTransport_initWithJavaNetInetSocketAddress_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(self, isa_, nc, worker, start, sslMode);
  return self;
}

- (instancetype)initWithId:(id)id_
withEduUmassCsNioInterfacesNodeConfig:(id<EduUmassCsNioInterfacesNodeConfig>)nc
withEduUmassCsNioInterfacesDataProcessingWorker:(id<EduUmassCsNioInterfacesDataProcessingWorker>)worker
withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)sslMode {
  EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(self, id_, nc, worker, sslMode);
  return self;
}

- (instancetype)initWithInt:(jint)port
withEduUmassCsNioInterfacesDataProcessingWorker:(id<EduUmassCsNioInterfacesDataProcessingWorker>)worker {
  EduUmassCsNioNIOTransport_initWithInt_withEduUmassCsNioInterfacesDataProcessingWorker_(self, port, worker);
  return self;
}

- (instancetype)initWithJavaNetInetAddress:(JavaNetInetAddress *)address
                                   withInt:(jint)port
withEduUmassCsNioInterfacesDataProcessingWorker:(id<EduUmassCsNioInterfacesDataProcessingWorker>)worker
withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)sslMode {
  EduUmassCsNioNIOTransport_initWithJavaNetInetAddress_withInt_withEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(self, address, port, worker, sslMode);
  return self;
}

- (id<EduUmassCsNioInterfacesDataProcessingWorker>)getWorkerWithEduUmassCsNioInterfacesDataProcessingWorker:(id<EduUmassCsNioInterfacesDataProcessingWorker>)worker
                                                         withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)sslMode {
  return EduUmassCsNioNIOTransport_getWorkerWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(self, worker, sslMode);
}

- (jint)sendWithId:(id)id_
     withByteArray:(IOSByteArray *)data {
  JavaNetInetAddress *address = [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(self->nodeConfig_)) getNodeAddressWithId:id_];
  jint port = [self->nodeConfig_ getNodePortWithId:id_];
  if (address == nil || port < 0) return -1;
  JavaUtilLoggingLevel *level = JreLoadStatic(JavaUtilLoggingLevel, FINEST);
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:level withNSString:@"{0} -> {1}={2}:{3}:[{4}]" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, id_, address, JavaLangInteger_valueOfWithInt_(port), [EduUmassCsNioNIOTransport_log isLoggableWithJavaUtilLoggingLevel:level] ? EduUmassCsUtilsUtil_truncateWithId_withInt_withInt_(create_EduUmassCsUtilsStringer_initWithByteArray_(data), 32, 32) : data } count:5 type:NSObject_class_()]];
  if (self->nodeConfig_ == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Attempting ID-based communication with null InterfaceNodeConfig");
  return [self sendWithJavaNetInetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(address, port) withByteArray:data];
}

- (jint)sendWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                           withByteArray:(IOSByteArray *)data {
  if (isa_ == nil) return -1;
  if (((IOSByteArray *) nil_chk(data))->size_ > EduUmassCsNioNIOTransport_MAX_PAYLOAD_SIZE) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I$I", @"Packet size of ", data->size_, @" exceeds maximum allowed payload size of ", EduUmassCsNioNIOTransport_MAX_PAYLOAD_SIZE));
  EduUmassCsNioNIOTransport_testAndIntiateConnectionWithJavaNetInetSocketAddress_(self, isa_);
  JavaNioByteBuffer *bbuf = EduUmassCsNioNIOTransport_getHeaderedByteBufferWithByteArray_(data = EduUmassCsNioNIOTransport_deflateWithByteArray_(self, data));
  jint written = EduUmassCsNioNIOTransport_canEnqueueSendWithJavaNetInetSocketAddress_(self, isa_) ? EduUmassCsNioNIOTransport_enqueueSendWithJavaNetInetSocketAddress_withJavaNioByteBuffer_(self, isa_, bbuf) : 0;
  if (written > 0) EduUmassCsNioNioutilsNIOInstrumenter_incrSent();
  return written > 0 ? written - EduUmassCsNioNIOTransport_HEADER_SIZE : written;
}

- (IOSByteArray *)deflateWithByteArray:(IOSByteArray *)data {
  return EduUmassCsNioNIOTransport_deflateWithByteArray_(self, data);
}

- (jint)sendWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                           withByteArray:(IOSByteArray *)data
                                 withInt:(jint)batchSize {
  EduUmassCsNioNIOTransport_testAndIntiateConnectionWithJavaNetInetSocketAddress_(self, isa_);
  JavaNioByteBuffer *bbuf = JavaNioByteBuffer_allocateWithInt_((EduUmassCsNioNIOTransport_HEADER_SIZE + ((IOSByteArray *) nil_chk(data))->size_) * batchSize);
  for (jint i = 0; i < batchSize; i++) [((JavaNioByteBuffer *) nil_chk(EduUmassCsNioNIOTransport_putHeaderLengthWithJavaNioByteBuffer_withInt_(bbuf, data->size_))) putWithByteArray:data];
  [((JavaNioByteBuffer *) nil_chk(bbuf)) flip];
  jint written = EduUmassCsNioNIOTransport_canEnqueueSendWithJavaNetInetSocketAddress_(self, isa_) ? EduUmassCsNioNIOTransport_enqueueSendWithJavaNetInetSocketAddress_withJavaNioByteBuffer_(self, isa_, bbuf) : 0;
  return written > 0 ? written - batchSize * EduUmassCsNioNIOTransport_HEADER_SIZE : written;
}

+ (JavaNioByteBuffer *)getHeaderedByteBufferWithByteArray:(IOSByteArray *)data {
  return EduUmassCsNioNIOTransport_getHeaderedByteBufferWithByteArray_(data);
}

+ (JavaNioByteBuffer *)putHeaderLengthWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf
                                                    withInt:(jint)length {
  return EduUmassCsNioNIOTransport_putHeaderLengthWithJavaNioByteBuffer_withInt_(buf, length);
}

+ (jint)getPayloadLengthWithJavaNioByteBuffer:(JavaNioByteBuffer *)buf {
  return EduUmassCsNioNIOTransport_getPayloadLengthWithJavaNioByteBuffer_(buf);
}

- (void)run {
  if (self->started_) return;
  self->started_ = true;
  while (![self isStopped]) {
    @try {
      EduUmassCsNioNIOTransport_registerWriteInterests(self);
      EduUmassCsNioNIOTransport_processPendingConnects(self);
      [((JavaNioChannelsSelector *) nil_chk(self->selector_)) selectWithLong:EduUmassCsNioNIOTransport_SELECT_TIMEOUT];
      EduUmassCsNioNIOTransport_processSelectedKeys(self);
      EduUmassCsNioNIOTransport_tryProcessCongested(self);
    }
    @catch (JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) severeWithNSString:JreStrcat("@$$", self, @" incurred IOException ", [((JavaLangException *) nil_chk(e)) getMessage])];
      [e printStackTrace];
    }
  }
  @try {
    if (self->senderTask_ != nil) [self->senderTask_ close];
    [((JavaNioChannelsSelector *) nil_chk(self->selector_)) close];
    [((JavaNioChannelsServerSocketChannel *) nil_chk(self->serverChannel_)) close];
    if ([self->worker_ isKindOfClass:[EduUmassCsNioSSLDataProcessingWorker class]]) [((EduUmassCsNioSSLDataProcessingWorker *) nil_chk(((EduUmassCsNioSSLDataProcessingWorker *) cast_chk(self->worker_, [EduUmassCsNioSSLDataProcessingWorker class])))) stop];
  }
  @catch (JavaIoIOException *ioe) {
    [((JavaIoIOException *) nil_chk(ioe)) printStackTrace];
  }
}

- (jboolean)isStarted {
  return self->started_;
}

- (void)stop {
  @synchronized(self) {
    self->stopped_ = true;
    if (self->senderTask_ != nil) [self->senderTask_ close];
    [((JavaNioChannelsSelector *) nil_chk(self->selector_)) wakeup];
  }
}

- (jboolean)isStopped {
  @synchronized(self) {
    return self->stopped_;
  }
}

- (JavaNetInetAddress *)getNodeAddress {
  if (self->myID_ == nil) {
    return [self getListeningAddress];
  }
  else {
    return [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(self->nodeConfig_)) getNodeAddressWithId:myID_];
  }
}

- (jint)getNodePort {
  if (self->myID_ == nil) {
    return [self getListeningPort];
  }
  else {
    return [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(self->nodeConfig_)) getNodePortWithId:myID_];
  }
}

- (jboolean)isDisconnectedWithId:(id)node {
  return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->lastFailed_)) containsKeyWithId:node];
}

- (jboolean)isDisconnectedWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  return EduUmassCsNioNIOTransport_isDisconnectedWithJavaNetInetSocketAddress_(self, isa_);
}

- (void)processSelectedKeys {
  EduUmassCsNioNIOTransport_processSelectedKeys(self);
}

- (void)updateFailedWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  EduUmassCsNioNIOTransport_updateFailedWithJavaNioChannelsSelectionKey_(self, key);
}

- (void)updateFailedWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)remote {
  EduUmassCsNioNIOTransport_updateFailedWithJavaNetInetSocketAddress_(self, remote);
}

- (id)getNodeIDWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  return EduUmassCsNioNIOTransport_getNodeIDWithJavaNetInetSocketAddress_(self, isa_);
}

- (void)updateAliveWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)channel {
  EduUmassCsNioNIOTransport_updateAliveWithJavaNioChannelsSocketChannel_(self, channel);
}

- (void)acceptWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  EduUmassCsNioNIOTransport_acceptWithJavaNioChannelsSelectionKey_(self, key);
}

- (void)readWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  EduUmassCsNioNIOTransport_readWithJavaNioChannelsSelectionKey_(self, key);
}

- (void)tryProcessCongested {
  EduUmassCsNioNIOTransport_tryProcessCongested(self);
}

+ (void)setCompressionWithBoolean:(jboolean)b {
  EduUmassCsNioNIOTransport_setCompressionWithBoolean_(b);
}

+ (jboolean)getCompression {
  return EduUmassCsNioNIOTransport_getCompression();
}

+ (void)setCompressionThresholdWithInt:(jint)t {
  EduUmassCsNioNIOTransport_setCompressionThresholdWithInt_(t);
}

+ (jint)getCompressionThreshold {
  return EduUmassCsNioNIOTransport_getCompressionThreshold();
}

- (JavaNioByteBuffer *)inflateWithJavaNioByteBuffer:(JavaNioByteBuffer *)bbuf {
  return EduUmassCsNioNIOTransport_inflateWithJavaNioByteBuffer_(self, bbuf);
}

- (void)writeWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  EduUmassCsNioNIOTransport_writeWithJavaNioChannelsSelectionKey_(self, key);
}

- (void)clearPendingWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  EduUmassCsNioNIOTransport_clearPendingWithJavaNioChannelsSocketChannel_(self, socketChannel);
}

- (jboolean)useSenderTask {
  return EduUmassCsNioNIOTransport_useSenderTask(self);
}

+ (void)setUseSenderTaskWithBoolean:(jboolean)b {
  EduUmassCsNioNIOTransport_setUseSenderTaskWithBoolean_(b);
}

- (jboolean)writeAllPendingWritesWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                             withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  return EduUmassCsNioNIOTransport_writeAllPendingWritesWithJavaNetInetSocketAddress_withJavaNioChannelsSocketChannel_(self, isa_, socketChannel);
}

- (void)sendUnbatchedWithJavaUtilConcurrentLinkedBlockingQueue:(JavaUtilConcurrentLinkedBlockingQueue *)sendQueue
                              withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  EduUmassCsNioNIOTransport_sendUnbatchedWithJavaUtilConcurrentLinkedBlockingQueue_withJavaNioChannelsSocketChannel_(self, sendQueue, socketChannel);
}

- (void)sendBatchedWithJavaUtilConcurrentLinkedBlockingQueue:(JavaUtilConcurrentLinkedBlockingQueue *)sendQueue
                            withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  EduUmassCsNioNIOTransport_sendBatchedWithJavaUtilConcurrentLinkedBlockingQueue_withJavaNioChannelsSocketChannel_(self, sendQueue, socketChannel);
}

- (void)dequeueSendQueueIfEmptyWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                  withJavaUtilConcurrentLinkedBlockingQueue:(JavaUtilConcurrentLinkedBlockingQueue *)sendQueue {
  EduUmassCsNioNIOTransport_dequeueSendQueueIfEmptyWithJavaNetInetSocketAddress_withJavaUtilConcurrentLinkedBlockingQueue_(self, isa_, sendQueue);
}

- (jint)wrapWriteWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel
                            withJavaNioByteBuffer:(JavaNioByteBuffer *)unencrypted {
  return EduUmassCsNioNIOTransport_wrapWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_(self, socketChannel, unencrypted);
}

- (jint)wrapWriteWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel
                            withJavaNioByteBuffer:(JavaNioByteBuffer *)unencrypted
                                      withBoolean:(jboolean)sneakyMode {
  return EduUmassCsNioNIOTransport_wrapWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_withBoolean_(self, socketChannel, unencrypted, sneakyMode);
}

- (jboolean)isSSL {
  return EduUmassCsNioNIOTransport_isSSL(self);
}

- (EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)getSSLMode {
  return [self->worker_ isKindOfClass:[EduUmassCsNioSSLDataProcessingWorker class]] ? ((EduUmassCsNioSSLDataProcessingWorker *) nil_chk(((EduUmassCsNioSSLDataProcessingWorker *) cast_chk(self->worker_, [EduUmassCsNioSSLDataProcessingWorker class]))))->sslMode_ : JreLoadEnum(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES, CLEAR);
}

- (jboolean)isHandshakeCompleteWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  return EduUmassCsNioNIOTransport_isHandshakeCompleteWithJavaNioChannelsSocketChannel_(self, socketChannel);
}

- (jint)enqueueSendWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                          withJavaNioByteBuffer:(JavaNioByteBuffer *)data {
  return EduUmassCsNioNIOTransport_enqueueSendWithJavaNetInetSocketAddress_withJavaNioByteBuffer_(self, isa_, data);
}

- (jboolean)canEnqueueSendWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  return EduUmassCsNioNIOTransport_canEnqueueSendWithJavaNetInetSocketAddress_(self, isa_);
}

- (void)wakeupSelectorWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  EduUmassCsNioNIOTransport_wakeupSelectorWithJavaNetInetSocketAddress_(self, isa_);
}

- (jboolean)trySneakyWriteWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                                 withJavaNioByteBuffer:(JavaNioByteBuffer *)data {
  return EduUmassCsNioNIOTransport_trySneakyWriteWithJavaNetInetSocketAddress_withJavaNioByteBuffer_(self, isa_, data);
}

- (void)registerWriteInterests {
  EduUmassCsNioNIOTransport_registerWriteInterests(self);
}

- (void)cleanupSSLWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(self, key);
}

+ (void)cleanupWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
          withJavaNioChannelsSelectableChannel:(JavaNioChannelsSelectableChannel *)sc {
  EduUmassCsNioNIOTransport_cleanupWithJavaNioChannelsSelectionKey_withJavaNioChannelsSelectableChannel_(key, sc);
}

+ (void)cleanupWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  EduUmassCsNioNIOTransport_cleanupWithJavaNioChannelsSelectionKey_(key);
}

- (void)cleanupRetryWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
                   withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)sc
                       withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  EduUmassCsNioNIOTransport_cleanupRetryWithJavaNioChannelsSelectionKey_withJavaNioChannelsSocketChannel_withJavaNetInetSocketAddress_(self, key, sc, isa_);
}

- (jboolean)canReconnectWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  return EduUmassCsNioNIOTransport_canReconnectWithJavaNetInetSocketAddress_(self, isa_);
}

- (jboolean)checkAndReconnectWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  return EduUmassCsNioNIOTransport_checkAndReconnectWithJavaNetInetSocketAddress_(self, isa_);
}

- (JavaNioChannelsSocketChannel *)getSockAddrToSockChannelWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  return EduUmassCsNioNIOTransport_getSockAddrToSockChannelWithJavaNetInetSocketAddress_(self, isa_);
}

- (void)putSockAddrToSockChannelWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                            withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  EduUmassCsNioNIOTransport_putSockAddrToSockChannelWithJavaNetInetSocketAddress_withJavaNioChannelsSocketChannel_(self, isa_, socketChannel);
}

- (JavaNetInetSocketAddress *)getSockAddrFromSockChannelWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)sc {
  return EduUmassCsNioNIOTransport_getSockAddrFromSockChannelWithJavaNioChannelsSocketChannel_(self, sc);
}

- (void)reuseAcceptedConnectionForWritesWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  EduUmassCsNioNIOTransport_reuseAcceptedConnectionForWritesWithJavaNioChannelsSocketChannel_(self, socketChannel);
}

- (jboolean)isConnectedWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                                        withBoolean:(jboolean)doLog {
  return EduUmassCsNioNIOTransport_isConnectedWithJavaNetInetSocketAddress_withBoolean_(self, isa_, doLog);
}

- (jboolean)isConnectedWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  return EduUmassCsNioNIOTransport_isConnectedWithJavaNetInetSocketAddress_(self, isa_);
}

- (void)testAndIntiateConnectionWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  EduUmassCsNioNIOTransport_testAndIntiateConnectionWithJavaNetInetSocketAddress_(self, isa_);
}

- (void)addPendingConnectWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  EduUmassCsNioNIOTransport_addPendingConnectWithJavaNioChannelsSocketChannel_(self, socketChannel);
}

- (void)processPendingConnects {
  EduUmassCsNioNIOTransport_processPendingConnects(self);
}

- (JavaNioChannelsSelector *)initSelectorWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)mySockAddr {
  return EduUmassCsNioNIOTransport_initSelectorWithJavaNetInetSocketAddress_(self, mySockAddr);
}

- (JavaNetInetSocketAddress *)getListeningSocketAddress {
  return self->listeningSocketAddress_;
}

- (jint)getListeningPort {
  return self->listeningPort_;
}

- (JavaNetInetAddress *)getListeningAddress {
  return self->listeningAddress_;
}

- (JavaNioChannelsSocketChannel *)initiateConnectionWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  return EduUmassCsNioNIOTransport_initiateConnectionWithJavaNetInetSocketAddress_(self, isa_);
}

- (void)removePartialBuffersWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  EduUmassCsNioNIOTransport_removePartialBuffersWithJavaNetInetSocketAddress_(self, isa_);
}

+ (jboolean)outOfRangeWithInt:(jint)length {
  return EduUmassCsNioNIOTransport_outOfRangeWithInt_(length);
}

- (jboolean)finishConnectionWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  return EduUmassCsNioNIOTransport_finishConnectionWithJavaNioChannelsSelectionKey_(self, key);
}

- (jboolean)isNodeIDWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_ {
  return EduUmassCsNioNIOTransport_isNodeIDWithJavaNetInetSocketAddress_(self, isa_);
}

- (jboolean)registerSSLWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
                                           withBoolean:(jboolean)client {
  return EduUmassCsNioNIOTransport_registerSSLWithJavaNioChannelsSelectionKey_withBoolean_(self, key, client);
}

- (NSString *)description {
  return JreStrcat("$C@CI", [[self java_getClass] getSimpleName], ':', (self->myID_ != nil ? self->myID_ : JreStrcat("$@", (self->me_ != nil && [self->me_ getName] != nil ? JreStrcat("$C", [self->me_ getName], ':') : @""), self->listeningAddress_)), ':', self->listeningPort_);
}

- (void)handshakeCompleteWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  @try {
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"{0} SSL handshake complete on {1}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, (JavaNioChannelsSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(key)) channel], [JavaNioChannelsSocketChannel class]) } count:2 type:NSObject_class_()]];
    EduUmassCsNioNIOTransport_wakeupSelectorWithJavaNetInetSocketAddress_(self, (JavaNetInetSocketAddress *) cast_chk([((JavaNioChannelsSocketChannel *) nil_chk(((JavaNioChannelsSocketChannel *) cast_chk([key channel], [JavaNioChannelsSocketChannel class])))) getRemoteAddress], [JavaNetInetSocketAddress class]));
  }
  @catch (JavaIoIOException *e) {
    [EduUmassCsNioNIOTransport_log severeWithNSString:JreStrcat("@$@", self, @" encountered IOException upon handshake completion for ", [key channel])];
    EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(self, key);
  }
}

- (jint)getPendingSize {
  @synchronized(self->sendQueues_) {
    jint numPending = 0;
    for (JavaUtilConcurrentLinkedBlockingQueue * __strong arr in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sendQueues_)) values])) {
      numPending += [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(arr)) size];
    }
    return numPending;
  }
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduUmassCsNioNIOTransport_mainWithNSStringArray_(args);
}

- (void)dealloc {
  RELEASE_(myID_);
  RELEASE_(worker_);
  RELEASE_(nodeConfig_);
  RELEASE_(selector_);
  RELEASE_(writeBuffer_);
  RELEASE_(serverChannel_);
  RELEASE_(pendingConnects_);
  RELEASE_(sendQueues_);
  RELEASE_(sockAddrToSockChannel_);
  RELEASE_(connAttempts_);
  RELEASE_(lastFailed_);
  RELEASE_(senderTask_);
  RELEASE_(me_);
  RELEASE_(listeningSocketAddress_);
  RELEASE_(listeningAddress_);
  RELEASE_(readBuffers_);
  RELEASE_(congested_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLoggingLogger;", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, 4, 5, -1, -1 },
    { NULL, "LEduUmassCsNioNIOTransport;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, 4, 10, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, 4, 12, -1, -1 },
    { NULL, NULL, 0x1, -1, 13, 4, 14, -1, -1 },
    { NULL, NULL, 0x1, -1, 15, 4, 16, -1, -1 },
    { NULL, NULL, 0x1, -1, 17, 4, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 18, 4, -1, -1, -1 },
    { NULL, "LEduUmassCsNioInterfacesDataProcessingWorker;", 0x2, 19, 20, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 21, 22, 4, 23, -1, -1 },
    { NULL, "I", 0x1, 21, 24, 4, -1, -1, -1 },
    { NULL, "[B", 0x2, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 21, 27, 4, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0xa, 28, 26, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0xa, 29, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1c, 31, 32, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 33, 34, -1, 35, -1, -1 },
    { NULL, "Z", 0x2, 33, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 36, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 39, 36, -1, 40, -1, -1 },
    { NULL, "V", 0x2, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 38, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 38, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x19, 45, 46, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 47, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x19, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x2, 48, 32, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 38, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 42, -1, -1, -1, -1 },
    { NULL, "Z", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x19, 51, 46, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 52, 53, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 55, 4, 56, -1, -1 },
    { NULL, "V", 0x2, 57, 55, 4, 56, -1, -1 },
    { NULL, "V", 0x2, 58, 59, -1, 60, -1, -1 },
    { NULL, "I", 0x2, 61, 62, 4, -1, -1, -1 },
    { NULL, "I", 0x2, 61, 63, 4, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 64, 42, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 65, 66, 4, -1, -1, -1 },
    { NULL, "Z", 0x2, 67, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 69, 66, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 38, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 71, 72, -1, -1, -1, -1 },
    { NULL, "V", 0x1c, 71, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 74, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 75, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 76, 36, -1, -1, -1, -1 },
    { NULL, "LJavaNioChannelsSocketChannel;", 0x2, 77, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 53, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetSocketAddress;", 0x2, 79, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 80, 42, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 81, 82, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 81, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 83, 36, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 84, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNioChannelsSelector;", 0x2, 85, 36, 4, -1, -1, -1 },
    { NULL, "LJavaNetInetSocketAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNioChannelsSocketChannel;", 0x2, 86, 36, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 87, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x1c, 88, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 89, 38, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 90, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 91, 92, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 93, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 94, 38, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 95, 96, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setMaxQueuedSendsWithInt:);
  methods[1].selector = @selector(getMaxQueuedSends);
  methods[2].selector = @selector(setMinInterConnectTimeWithInt:);
  methods[3].selector = @selector(getMinInterConnectTime);
  methods[4].selector = @selector(getLogger);
  methods[5].selector = @selector(initWithId:withEduUmassCsNioInterfacesNodeConfig:withJavaNetInetSocketAddress:withEduUmassCsNioInterfacesDataProcessingWorker:withBoolean:withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:);
  methods[6].selector = @selector(setNameWithNSString:);
  methods[7].selector = @selector(initWithId:withEduUmassCsNioInterfacesNodeConfig:withEduUmassCsNioInterfacesDataProcessingWorker:);
  methods[8].selector = @selector(initWithId:withEduUmassCsNioInterfacesNodeConfig:withEduUmassCsNioInterfacesDataProcessingWorker:withBoolean:withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:);
  methods[9].selector = @selector(initWithJavaNetInetSocketAddress:withEduUmassCsNioInterfacesNodeConfig:withEduUmassCsNioInterfacesDataProcessingWorker:withBoolean:withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:);
  methods[10].selector = @selector(initWithId:withEduUmassCsNioInterfacesNodeConfig:withEduUmassCsNioInterfacesDataProcessingWorker:withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:);
  methods[11].selector = @selector(initWithInt:withEduUmassCsNioInterfacesDataProcessingWorker:);
  methods[12].selector = @selector(initWithJavaNetInetAddress:withInt:withEduUmassCsNioInterfacesDataProcessingWorker:withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:);
  methods[13].selector = @selector(getWorkerWithEduUmassCsNioInterfacesDataProcessingWorker:withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:);
  methods[14].selector = @selector(sendWithId:withByteArray:);
  methods[15].selector = @selector(sendWithJavaNetInetSocketAddress:withByteArray:);
  methods[16].selector = @selector(deflateWithByteArray:);
  methods[17].selector = @selector(sendWithJavaNetInetSocketAddress:withByteArray:withInt:);
  methods[18].selector = @selector(getHeaderedByteBufferWithByteArray:);
  methods[19].selector = @selector(putHeaderLengthWithJavaNioByteBuffer:withInt:);
  methods[20].selector = @selector(getPayloadLengthWithJavaNioByteBuffer:);
  methods[21].selector = @selector(run);
  methods[22].selector = @selector(isStarted);
  methods[23].selector = @selector(stop);
  methods[24].selector = @selector(isStopped);
  methods[25].selector = @selector(getNodeAddress);
  methods[26].selector = @selector(getNodePort);
  methods[27].selector = @selector(isDisconnectedWithId:);
  methods[28].selector = @selector(isDisconnectedWithJavaNetInetSocketAddress:);
  methods[29].selector = @selector(processSelectedKeys);
  methods[30].selector = @selector(updateFailedWithJavaNioChannelsSelectionKey:);
  methods[31].selector = @selector(updateFailedWithJavaNetInetSocketAddress:);
  methods[32].selector = @selector(getNodeIDWithJavaNetInetSocketAddress:);
  methods[33].selector = @selector(updateAliveWithJavaNioChannelsSocketChannel:);
  methods[34].selector = @selector(acceptWithJavaNioChannelsSelectionKey:);
  methods[35].selector = @selector(readWithJavaNioChannelsSelectionKey:);
  methods[36].selector = @selector(tryProcessCongested);
  methods[37].selector = @selector(setCompressionWithBoolean:);
  methods[38].selector = @selector(getCompression);
  methods[39].selector = @selector(setCompressionThresholdWithInt:);
  methods[40].selector = @selector(getCompressionThreshold);
  methods[41].selector = @selector(inflateWithJavaNioByteBuffer:);
  methods[42].selector = @selector(writeWithJavaNioChannelsSelectionKey:);
  methods[43].selector = @selector(clearPendingWithJavaNioChannelsSocketChannel:);
  methods[44].selector = @selector(useSenderTask);
  methods[45].selector = @selector(setUseSenderTaskWithBoolean:);
  methods[46].selector = @selector(writeAllPendingWritesWithJavaNetInetSocketAddress:withJavaNioChannelsSocketChannel:);
  methods[47].selector = @selector(sendUnbatchedWithJavaUtilConcurrentLinkedBlockingQueue:withJavaNioChannelsSocketChannel:);
  methods[48].selector = @selector(sendBatchedWithJavaUtilConcurrentLinkedBlockingQueue:withJavaNioChannelsSocketChannel:);
  methods[49].selector = @selector(dequeueSendQueueIfEmptyWithJavaNetInetSocketAddress:withJavaUtilConcurrentLinkedBlockingQueue:);
  methods[50].selector = @selector(wrapWriteWithJavaNioChannelsSocketChannel:withJavaNioByteBuffer:);
  methods[51].selector = @selector(wrapWriteWithJavaNioChannelsSocketChannel:withJavaNioByteBuffer:withBoolean:);
  methods[52].selector = @selector(isSSL);
  methods[53].selector = @selector(getSSLMode);
  methods[54].selector = @selector(isHandshakeCompleteWithJavaNioChannelsSocketChannel:);
  methods[55].selector = @selector(enqueueSendWithJavaNetInetSocketAddress:withJavaNioByteBuffer:);
  methods[56].selector = @selector(canEnqueueSendWithJavaNetInetSocketAddress:);
  methods[57].selector = @selector(wakeupSelectorWithJavaNetInetSocketAddress:);
  methods[58].selector = @selector(trySneakyWriteWithJavaNetInetSocketAddress:withJavaNioByteBuffer:);
  methods[59].selector = @selector(registerWriteInterests);
  methods[60].selector = @selector(cleanupSSLWithJavaNioChannelsSelectionKey:);
  methods[61].selector = @selector(cleanupWithJavaNioChannelsSelectionKey:withJavaNioChannelsSelectableChannel:);
  methods[62].selector = @selector(cleanupWithJavaNioChannelsSelectionKey:);
  methods[63].selector = @selector(cleanupRetryWithJavaNioChannelsSelectionKey:withJavaNioChannelsSocketChannel:withJavaNetInetSocketAddress:);
  methods[64].selector = @selector(canReconnectWithJavaNetInetSocketAddress:);
  methods[65].selector = @selector(checkAndReconnectWithJavaNetInetSocketAddress:);
  methods[66].selector = @selector(getSockAddrToSockChannelWithJavaNetInetSocketAddress:);
  methods[67].selector = @selector(putSockAddrToSockChannelWithJavaNetInetSocketAddress:withJavaNioChannelsSocketChannel:);
  methods[68].selector = @selector(getSockAddrFromSockChannelWithJavaNioChannelsSocketChannel:);
  methods[69].selector = @selector(reuseAcceptedConnectionForWritesWithJavaNioChannelsSocketChannel:);
  methods[70].selector = @selector(isConnectedWithJavaNetInetSocketAddress:withBoolean:);
  methods[71].selector = @selector(isConnectedWithJavaNetInetSocketAddress:);
  methods[72].selector = @selector(testAndIntiateConnectionWithJavaNetInetSocketAddress:);
  methods[73].selector = @selector(addPendingConnectWithJavaNioChannelsSocketChannel:);
  methods[74].selector = @selector(processPendingConnects);
  methods[75].selector = @selector(initSelectorWithJavaNetInetSocketAddress:);
  methods[76].selector = @selector(getListeningSocketAddress);
  methods[77].selector = @selector(getListeningPort);
  methods[78].selector = @selector(getListeningAddress);
  methods[79].selector = @selector(initiateConnectionWithJavaNetInetSocketAddress:);
  methods[80].selector = @selector(removePartialBuffersWithJavaNetInetSocketAddress:);
  methods[81].selector = @selector(outOfRangeWithInt:);
  methods[82].selector = @selector(finishConnectionWithJavaNioChannelsSelectionKey:);
  methods[83].selector = @selector(isNodeIDWithJavaNetInetSocketAddress:);
  methods[84].selector = @selector(registerSSLWithJavaNioChannelsSelectionKey:withBoolean:);
  methods[85].selector = @selector(description);
  methods[86].selector = @selector(handshakeCompleteWithJavaNioChannelsSelectionKey:);
  methods[87].selector = @selector(getPendingSize);
  methods[88].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_QUEUED_SENDS", "I", .constantValue.asInt = EduUmassCsNioNIOTransport_MAX_QUEUED_SENDS, 0x19, -1, -1, -1, -1 },
    { "maxQueuedSends_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MIN_INTER_CONNECT_TIME", "I", .constantValue.asInt = EduUmassCsNioNIOTransport_MIN_INTER_CONNECT_TIME, 0x19, -1, -1, -1, -1 },
    { "minInterConnectTime_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "HINT_SOCK_BUFFER_SIZE", "I", .constantValue.asInt = EduUmassCsNioNIOTransport_HINT_SOCK_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "DUPLEX_CONNECTIONS", "Z", .constantValue.asBOOL = EduUmassCsNioNIOTransport_DUPLEX_CONNECTIONS, 0x1a, -1, -1, -1, -1 },
    { "READ_BUFFER_SIZE", "I", .constantValue.asInt = EduUmassCsNioNIOTransport_READ_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "WRITE_BUFFER_SIZE", "I", .constantValue.asInt = EduUmassCsNioNIOTransport_WRITE_BUFFER_SIZE, 0x1c, -1, -1, -1, -1 },
    { "instanceCount", "I", .constantValue.asLong = 0, 0xa, -1, 97, -1, -1 },
    { "myID_", "LNSObject;", .constantValue.asLong = 0, 0x14, -1, -1, 98, -1 },
    { "worker_", "LEduUmassCsNioInterfacesDataProcessingWorker;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "nodeConfig_", "LEduUmassCsNioInterfacesNodeConfig;", .constantValue.asLong = 0, 0x14, -1, -1, 99, -1 },
    { "selector_", "LJavaNioChannelsSelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "writeBuffer_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serverChannel_", "LJavaNioChannelsServerSocketChannel;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingConnects_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x12, -1, -1, 100, -1 },
    { "sendQueues_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 101, -1 },
    { "sockAddrToSockChannel_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 102, -1 },
    { "connAttempts_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 103, -1 },
    { "lastFailed_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 104, -1 },
    { "senderTask_", "LEduUmassCsNioNIOTransport_SenderTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "started_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stopped_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "me_", "LJavaLangThread;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "meThreadId_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "listeningSocketAddress_", "LJavaNetInetSocketAddress;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "listeningAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "listeningPort_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DEFAULT_SSL_MODE", "LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", .constantValue.asLong = 0, 0x1c, -1, 105, -1, -1 },
    { "log", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 106, -1, -1 },
    { "PREAMBLE", "I", .constantValue.asInt = EduUmassCsNioNIOTransport_PREAMBLE, 0x1a, -1, -1, -1, -1 },
    { "USE_PREAMBLE", "Z", .constantValue.asLong = 0, 0xa, -1, 107, -1, -1 },
    { "HEADER_SIZE", "I", .constantValue.asLong = 0, 0xa, -1, 108, -1, -1 },
    { "SELECT_TIMEOUT", "J", .constantValue.asLong = EduUmassCsNioNIOTransport_SELECT_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "MAX_PAYLOAD_SIZE", "I", .constantValue.asInt = EduUmassCsNioNIOTransport_MAX_PAYLOAD_SIZE, 0x19, -1, -1, -1, -1 },
    { "readBuffers_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 109, -1 },
    { "congested_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 110, -1 },
    { "enableCompression", "Z", .constantValue.asLong = 0, 0xa, -1, 111, -1, -1 },
    { "compressionThreshold", "I", .constantValue.asLong = 0, 0xa, -1, 112, -1, -1 },
    { "useSenderTask_", "Z", .constantValue.asLong = 0, 0xa, 113, 114, -1, -1 },
    { "SEND_BATCHED", "Z", .constantValue.asLong = 0, 0xa, -1, 115, -1, -1 },
    { "SNEAK_DIRECT_WRITE", "Z", .constantValue.asBOOL = EduUmassCsNioNIOTransport_SNEAK_DIRECT_WRITE, 0x1a, -1, -1, -1, -1 },
    { "lastRegisterWriteInterestsInvoked_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "INTER_REGISTER_WRITE_INTERESTS_SPACING", "J", .constantValue.asLong = 0, 0xa, -1, 116, -1, -1 },
    { "NUM_RETRIES", "I", .constantValue.asInt = EduUmassCsNioNIOTransport_NUM_RETRIES, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxQueuedSends", "I", "setMinInterConnectTime", "LNSObject;LEduUmassCsNioInterfacesNodeConfig;LJavaNetInetSocketAddress;LEduUmassCsNioInterfacesDataProcessingWorker;ZLEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", "LJavaIoIOException;", "(TNodeIDType;Ledu/umass/cs/nio/interfaces/NodeConfig<TNodeIDType;>;Ljava/net/InetSocketAddress;Ledu/umass/cs/nio/interfaces/DataProcessingWorker;ZLedu/umass/cs/nio/SSLDataProcessingWorker$SSL_MODES;)V", "setName", "LNSString;", "(Ljava/lang/String;)Ledu/umass/cs/nio/NIOTransport<TNodeIDType;>;", "LNSObject;LEduUmassCsNioInterfacesNodeConfig;LEduUmassCsNioInterfacesDataProcessingWorker;", "(TNodeIDType;Ledu/umass/cs/nio/interfaces/NodeConfig<TNodeIDType;>;Ledu/umass/cs/nio/interfaces/DataProcessingWorker;)V", "LNSObject;LEduUmassCsNioInterfacesNodeConfig;LEduUmassCsNioInterfacesDataProcessingWorker;ZLEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", "(TNodeIDType;Ledu/umass/cs/nio/interfaces/NodeConfig<TNodeIDType;>;Ledu/umass/cs/nio/interfaces/DataProcessingWorker;ZLedu/umass/cs/nio/SSLDataProcessingWorker$SSL_MODES;)V", "LJavaNetInetSocketAddress;LEduUmassCsNioInterfacesNodeConfig;LEduUmassCsNioInterfacesDataProcessingWorker;ZLEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", "(Ljava/net/InetSocketAddress;Ledu/umass/cs/nio/interfaces/NodeConfig<TNodeIDType;>;Ledu/umass/cs/nio/interfaces/DataProcessingWorker;ZLedu/umass/cs/nio/SSLDataProcessingWorker$SSL_MODES;)V", "LNSObject;LEduUmassCsNioInterfacesNodeConfig;LEduUmassCsNioInterfacesDataProcessingWorker;LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", "(TNodeIDType;Ledu/umass/cs/nio/interfaces/NodeConfig<TNodeIDType;>;Ledu/umass/cs/nio/interfaces/DataProcessingWorker;Ledu/umass/cs/nio/SSLDataProcessingWorker$SSL_MODES;)V", "ILEduUmassCsNioInterfacesDataProcessingWorker;", "LJavaNetInetAddress;ILEduUmassCsNioInterfacesDataProcessingWorker;LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", "getWorker", "LEduUmassCsNioInterfacesDataProcessingWorker;LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", "send", "LNSObject;[B", "(TNodeIDType;[B)I", "LJavaNetInetSocketAddress;[B", "deflate", "[B", "LJavaNetInetSocketAddress;[BI", "getHeaderedByteBuffer", "putHeaderLength", "LJavaNioByteBuffer;I", "getPayloadLength", "LJavaNioByteBuffer;", "isDisconnected", "LNSObject;", "(TNodeIDType;)Z", "LJavaNetInetSocketAddress;", "updateFailed", "LJavaNioChannelsSelectionKey;", "getNodeID", "(Ljava/net/InetSocketAddress;)TNodeIDType;", "updateAlive", "LJavaNioChannelsSocketChannel;", "accept", "read", "setCompression", "Z", "setCompressionThreshold", "inflate", "write", "clearPending", "setUseSenderTask", "writeAllPendingWrites", "LJavaNetInetSocketAddress;LJavaNioChannelsSocketChannel;", "sendUnbatched", "LJavaUtilConcurrentLinkedBlockingQueue;LJavaNioChannelsSocketChannel;", "(Ljava/util/concurrent/LinkedBlockingQueue<Ljava/nio/ByteBuffer;>;Ljava/nio/channels/SocketChannel;)V", "sendBatched", "dequeueSendQueueIfEmpty", "LJavaNetInetSocketAddress;LJavaUtilConcurrentLinkedBlockingQueue;", "(Ljava/net/InetSocketAddress;Ljava/util/concurrent/LinkedBlockingQueue<Ljava/nio/ByteBuffer;>;)V", "wrapWrite", "LJavaNioChannelsSocketChannel;LJavaNioByteBuffer;", "LJavaNioChannelsSocketChannel;LJavaNioByteBuffer;Z", "isHandshakeComplete", "enqueueSend", "LJavaNetInetSocketAddress;LJavaNioByteBuffer;", "canEnqueueSend", "wakeupSelector", "trySneakyWrite", "cleanupSSL", "cleanup", "LJavaNioChannelsSelectionKey;LJavaNioChannelsSelectableChannel;", "cleanupRetry", "LJavaNioChannelsSelectionKey;LJavaNioChannelsSocketChannel;LJavaNetInetSocketAddress;", "canReconnect", "checkAndReconnect", "getSockAddrToSockChannel", "putSockAddrToSockChannel", "getSockAddrFromSockChannel", "reuseAcceptedConnectionForWrites", "isConnected", "LJavaNetInetSocketAddress;Z", "testAndIntiateConnection", "addPendingConnect", "initSelector", "initiateConnection", "removePartialBuffers", "outOfRange", "finishConnection", "isNodeID", "registerSSL", "LJavaNioChannelsSelectionKey;Z", "toString", "handshakeComplete", "main", "[LNSString;", &EduUmassCsNioNIOTransport_instanceCount, "TNodeIDType;", "Ledu/umass/cs/nio/interfaces/NodeConfig<TNodeIDType;>;", "Ljava/util/LinkedList<Ledu/umass/cs/nio/NIOTransport$ChangeRequest;>;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/net/InetSocketAddress;Ljava/util/concurrent/LinkedBlockingQueue<Ljava/nio/ByteBuffer;>;>;", "Ljava/util/HashMap<Ljava/net/InetSocketAddress;Ljava/nio/channels/SocketChannel;>;", "Ljava/util/HashMap<Ljava/net/InetSocketAddress;Ljava/lang/Long;>;", "Ljava/util/concurrent/ConcurrentHashMap<TNodeIDType;Ljava/lang/Long;>;", &EduUmassCsNioNIOTransport_DEFAULT_SSL_MODE, &EduUmassCsNioNIOTransport_log, &EduUmassCsNioNIOTransport_USE_PREAMBLE, &EduUmassCsNioNIOTransport_HEADER_SIZE, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/nio/channels/SelectionKey;Ljava/nio/ByteBuffer;>;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/nio/channels/SelectionKey;Ledu/umass/cs/nio/NIOTransport$AlternatingByteBuffer;>;", &EduUmassCsNioNIOTransport_enableCompression, &EduUmassCsNioNIOTransport_compressionThreshold, "useSenderTask", &EduUmassCsNioNIOTransport_useSenderTask_, &EduUmassCsNioNIOTransport_SEND_BATCHED, &EduUmassCsNioNIOTransport_INTER_REGISTER_WRITE_INTERESTS_SPACING, "LEduUmassCsNioNIOTransport_AlternatingByteBuffer;LEduUmassCsNioNIOTransport_SenderTask;LEduUmassCsNioNIOTransport_ChangeRequest;", "<NodeIDType:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Runnable;Ledu/umass/cs/nio/interfaces/HandshakeCallback;" };
  static const J2ObjcClassInfo _EduUmassCsNioNIOTransport = { "NIOTransport", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x1, 89, 45, -1, 117, -1, 118, -1 };
  return &_EduUmassCsNioNIOTransport;
}

+ (void)initialize {
  if (self == [EduUmassCsNioNIOTransport class]) {
    JreStrongAssign(&EduUmassCsNioNIOTransport_DEFAULT_SSL_MODE, JreLoadEnum(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES, CLEAR));
    JreStrongAssign(&EduUmassCsNioNIOTransport_log, JavaUtilLoggingLogger_getLoggerWithNSString_([EduUmassCsNioNIOTransport_class_() getName]));
    EduUmassCsNioNIOTransport_HEADER_SIZE = EduUmassCsNioNIOTransport_USE_PREAMBLE ? 2 * JavaLangInteger_BYTES : JavaLangInteger_BYTES;
    J2OBJC_SET_INITIALIZED(EduUmassCsNioNIOTransport)
  }
}

@end

jint EduUmassCsNioNIOTransport_getMaxQueuedSends(EduUmassCsNioNIOTransport *self) {
  return self->maxQueuedSends_;
}

jint EduUmassCsNioNIOTransport_getMinInterConnectTime(EduUmassCsNioNIOTransport *self) {
  return self->minInterConnectTime_;
}

JavaUtilLoggingLogger *EduUmassCsNioNIOTransport_getLogger() {
  EduUmassCsNioNIOTransport_initialize();
  return EduUmassCsNioNIOTransport_log;
}

void EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(EduUmassCsNioNIOTransport *self, id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, JavaNetInetSocketAddress *mySockAddr, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, jboolean start, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  NSObject_init(self);
  self->maxQueuedSends_ = EduUmassCsNioNIOTransport_MAX_QUEUED_SENDS;
  self->minInterConnectTime_ = EduUmassCsNioNIOTransport_MIN_INTER_CONNECT_TIME;
  JreStrongAssign(&self->writeBuffer_, JavaNioByteBuffer_allocateDirectWithInt_(EduUmassCsNioNIOTransport_WRITE_BUFFER_SIZE));
  JreStrongAssignAndConsume(&self->pendingConnects_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->sendQueues_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->sockAddrToSockChannel_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->connAttempts_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->lastFailed_, new_JavaUtilConcurrentConcurrentHashMap_init());
  self->started_ = false;
  self->stopped_ = false;
  JreStrongAssignAndConsume(&self->readBuffers_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->congested_, new_JavaUtilConcurrentConcurrentHashMap_init());
  self->lastRegisterWriteInterestsInvoked_ = 0;
  JreStrongAssign(&self->myID_, id_);
  JreStrongAssign(&self->nodeConfig_, nc);
  JreStrongAssign(&self->worker_, EduUmassCsNioNIOTransport_getWorkerWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(self, worker, sslMode));
  JreStrongAssign(&self->selector_, EduUmassCsNioNIOTransport_initSelectorWithJavaNetInetSocketAddress_(self, mySockAddr));
  JreStrongAssign(&self->listeningSocketAddress_, (JavaNetInetSocketAddress *) cast_chk([((JavaNioChannelsServerSocketChannel *) nil_chk(self->serverChannel_)) getLocalAddress], [JavaNetInetSocketAddress class]));
  JreStrongAssign(&self->listeningAddress_, [((JavaNetInetSocketAddress *) nil_chk(self->listeningSocketAddress_)) getAddress]);
  self->listeningPort_ = [self->listeningSocketAddress_ getPort];
  [((JavaLangThread *) (JreStrongAssign(&self->me_, (create_JavaLangThread_initWithJavaLangRunnable_(self))))) setNameWithNSString:JreStrcat("$C@", [[self java_getClass] getSimpleName], ':', (self->myID_ != nil ? self->myID_ : @"[]"))];
  [self->me_ start];
  self->meThreadId_ = [self->me_ getId];
  @synchronized(EduUmassCsNioNIOTransport_class_()) {
    EduUmassCsNioNIOTransport_instanceCount++;
  }
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"{0} created new instance {1}: {2}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [EduUmassCsNioNIOTransport_class_() getSimpleName], JavaLangInteger_valueOfWithInt_(EduUmassCsNioNIOTransport_instanceCount), self } count:3 type:NSObject_class_()]];
  if (!EduUmassCsNioNIOTransport_useSenderTask(self)) return;
  [((EduUmassCsNioNIOTransport_SenderTask *) (JreStrongAssignAndConsume(&self->senderTask_, new_EduUmassCsNioNIOTransport_SenderTask_initWithEduUmassCsNioNIOTransport_(self)))) setNameWithNSString:JreStrcat("$@", [EduUmassCsNioNIOTransport_SenderTask_class_() getSimpleName], (self->myID_ != nil ? self->myID_ : @""))];
  [((EduUmassCsNioNIOTransport_SenderTask *) nil_chk(self->senderTask_)) start];
}

EduUmassCsNioNIOTransport *new_EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, JavaNetInetSocketAddress *mySockAddr, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, jboolean start, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNIOTransport, initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_, id_, nc, mySockAddr, worker, start, sslMode)
}

EduUmassCsNioNIOTransport *create_EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, JavaNetInetSocketAddress *mySockAddr, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, jboolean start, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNIOTransport, initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_, id_, nc, mySockAddr, worker, start, sslMode)
}

void EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_(EduUmassCsNioNIOTransport *self, id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, id<EduUmassCsNioInterfacesDataProcessingWorker> worker) {
  EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(self, id_, nc, (id_ == nil ? create_JavaNetInetSocketAddress_initWithInt_(0) : nil), worker, true, EduUmassCsNioNIOTransport_DEFAULT_SSL_MODE);
}

EduUmassCsNioNIOTransport *new_EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_(id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, id<EduUmassCsNioInterfacesDataProcessingWorker> worker) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNIOTransport, initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_, id_, nc, worker)
}

EduUmassCsNioNIOTransport *create_EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_(id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, id<EduUmassCsNioInterfacesDataProcessingWorker> worker) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNIOTransport, initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_, id_, nc, worker)
}

void EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(EduUmassCsNioNIOTransport *self, id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, jboolean start, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(self, id_, nc, (id_ == nil ? create_JavaNetInetSocketAddress_initWithInt_(0) : nil), worker, true, sslMode);
}

EduUmassCsNioNIOTransport *new_EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, jboolean start, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNIOTransport, initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_, id_, nc, worker, start, sslMode)
}

EduUmassCsNioNIOTransport *create_EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, jboolean start, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNIOTransport, initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_, id_, nc, worker, start, sslMode)
}

void EduUmassCsNioNIOTransport_initWithJavaNetInetSocketAddress_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_, id<EduUmassCsNioInterfacesNodeConfig> nc, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, jboolean start, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(self, nil, nc, isa_, worker, true, sslMode);
}

EduUmassCsNioNIOTransport *new_EduUmassCsNioNIOTransport_initWithJavaNetInetSocketAddress_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(JavaNetInetSocketAddress *isa_, id<EduUmassCsNioInterfacesNodeConfig> nc, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, jboolean start, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNIOTransport, initWithJavaNetInetSocketAddress_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_, isa_, nc, worker, start, sslMode)
}

EduUmassCsNioNIOTransport *create_EduUmassCsNioNIOTransport_initWithJavaNetInetSocketAddress_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(JavaNetInetSocketAddress *isa_, id<EduUmassCsNioInterfacesNodeConfig> nc, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, jboolean start, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNIOTransport, initWithJavaNetInetSocketAddress_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_, isa_, nc, worker, start, sslMode)
}

void EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(EduUmassCsNioNIOTransport *self, id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(self, id_, nc, (id_ == nil ? create_JavaNetInetSocketAddress_initWithInt_(0) : nil), worker, true, sslMode);
}

EduUmassCsNioNIOTransport *new_EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNIOTransport, initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_, id_, nc, worker, sslMode)
}

EduUmassCsNioNIOTransport *create_EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(id id_, id<EduUmassCsNioInterfacesNodeConfig> nc, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNIOTransport, initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_, id_, nc, worker, sslMode)
}

void EduUmassCsNioNIOTransport_initWithInt_withEduUmassCsNioInterfacesDataProcessingWorker_(EduUmassCsNioNIOTransport *self, jint port, id<EduUmassCsNioInterfacesDataProcessingWorker> worker) {
  EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(self, nil, nil, create_JavaNetInetSocketAddress_initWithInt_(port), worker, true, EduUmassCsNioNIOTransport_DEFAULT_SSL_MODE);
}

EduUmassCsNioNIOTransport *new_EduUmassCsNioNIOTransport_initWithInt_withEduUmassCsNioInterfacesDataProcessingWorker_(jint port, id<EduUmassCsNioInterfacesDataProcessingWorker> worker) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNIOTransport, initWithInt_withEduUmassCsNioInterfacesDataProcessingWorker_, port, worker)
}

EduUmassCsNioNIOTransport *create_EduUmassCsNioNIOTransport_initWithInt_withEduUmassCsNioInterfacesDataProcessingWorker_(jint port, id<EduUmassCsNioInterfacesDataProcessingWorker> worker) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNIOTransport, initWithInt_withEduUmassCsNioInterfacesDataProcessingWorker_, port, worker)
}

void EduUmassCsNioNIOTransport_initWithJavaNetInetAddress_withInt_withEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(EduUmassCsNioNIOTransport *self, JavaNetInetAddress *address, jint port, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withJavaNetInetSocketAddress_withEduUmassCsNioInterfacesDataProcessingWorker_withBoolean_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(self, nil, nil, create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(address, port), worker, true, sslMode);
}

EduUmassCsNioNIOTransport *new_EduUmassCsNioNIOTransport_initWithJavaNetInetAddress_withInt_withEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(JavaNetInetAddress *address, jint port, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNIOTransport, initWithJavaNetInetAddress_withInt_withEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_, address, port, worker, sslMode)
}

EduUmassCsNioNIOTransport *create_EduUmassCsNioNIOTransport_initWithJavaNetInetAddress_withInt_withEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(JavaNetInetAddress *address, jint port, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNIOTransport, initWithJavaNetInetAddress_withInt_withEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_, address, port, worker, sslMode)
}

id<EduUmassCsNioInterfacesDataProcessingWorker> EduUmassCsNioNIOTransport_getWorkerWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(EduUmassCsNioNIOTransport *self, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode) {
  @try {
    if ([((EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *) nil_chk(sslMode)) isEqual:JreLoadEnum(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES, SERVER_AUTH)] || [sslMode isEqual:JreLoadEnum(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES, MUTUAL_AUTH)]) {
      return [([worker isKindOfClass:[EduUmassCsNioSSLDataProcessingWorker class]] ? (EduUmassCsNioSSLDataProcessingWorker *) cast_chk(worker, [EduUmassCsNioSSLDataProcessingWorker class]) : create_EduUmassCsNioSSLDataProcessingWorker_initWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_withNSString_(worker, sslMode, [self description])) setHandshakeCallbackWithEduUmassCsNioInterfacesHandshakeCallback:self];
    }
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw create_JavaIoIOException_initWithNSString_([((JavaSecurityNoSuchAlgorithmException *) nil_chk(e)) getMessage]);
  }
  return worker;
}

IOSByteArray *EduUmassCsNioNIOTransport_deflateWithByteArray_(EduUmassCsNioNIOTransport *self, IOSByteArray *data) {
  if (EduUmassCsNioNIOTransport_isSSL(self) || !EduUmassCsNioNIOTransport_getCompression() || ((IOSByteArray *) nil_chk(data))->size_ < EduUmassCsNioNIOTransport_getCompressionThreshold()) return data;
  JavaUtilZipDeflater *deflator = create_JavaUtilZipDeflater_init();
  IOSByteArray *compressed = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(data))->size_];
  jint compressedLength = data->size_;
  [deflator setInputWithByteArray:data];
  [deflator finish];
  compressedLength = [deflator deflateWithByteArray:compressed];
  [deflator end];
  data = [IOSByteArray arrayWithLength:compressedLength];
  for (jint i = 0; i < data->size_; i++) *IOSByteArray_GetRef(data, i) = IOSByteArray_Get(compressed, i);
  return data;
}

JavaNioByteBuffer *EduUmassCsNioNIOTransport_getHeaderedByteBufferWithByteArray_(IOSByteArray *data) {
  EduUmassCsNioNIOTransport_initialize();
  JavaNioByteBuffer *bbuf = JavaNioByteBuffer_allocateWithInt_(EduUmassCsNioNIOTransport_HEADER_SIZE + ((IOSByteArray *) nil_chk(data))->size_);
  [((JavaNioByteBuffer *) nil_chk(EduUmassCsNioNIOTransport_putHeaderLengthWithJavaNioByteBuffer_withInt_(bbuf, data->size_))) putWithByteArray:data];
  JreAssert(((![((JavaNioByteBuffer *) nil_chk(bbuf)) hasRemaining] && [bbuf capacity] == (EduUmassCsNioNIOTransport_HEADER_SIZE + data->size_))), (@"edu/umass/cs/nio/NIOTransport.java:318 condition failed: assert (!bbuf.hasRemaining() && bbuf.capacity() == (HEADER_SIZE + data.length));"));
  [bbuf flip];
  return bbuf;
}

JavaNioByteBuffer *EduUmassCsNioNIOTransport_putHeaderLengthWithJavaNioByteBuffer_withInt_(JavaNioByteBuffer *buf, jint length) {
  EduUmassCsNioNIOTransport_initialize();
  return [(EduUmassCsNioNIOTransport_USE_PREAMBLE ? [((JavaNioByteBuffer *) nil_chk(buf)) putIntWithInt:EduUmassCsNioNIOTransport_PREAMBLE] : buf) putIntWithInt:length];
}

jint EduUmassCsNioNIOTransport_getPayloadLengthWithJavaNioByteBuffer_(JavaNioByteBuffer *buf) {
  EduUmassCsNioNIOTransport_initialize();
  JreAssert(([((JavaNioByteBuffer *) nil_chk(buf)) capacity] == EduUmassCsNioNIOTransport_HEADER_SIZE), (@"edu/umass/cs/nio/NIOTransport.java:328 condition failed: assert (buf.capacity() == HEADER_SIZE);"));
  jint preamble = -1;
  if (!EduUmassCsNioNIOTransport_USE_PREAMBLE || (preamble = [buf getInt]) == EduUmassCsNioNIOTransport_PREAMBLE) {
    jint length = [buf getInt];
    if (EduUmassCsNioNIOTransport_outOfRangeWithInt_(length)) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Out-of-range payload length ", length));
    return length;
  }
  IOSByteArray *b = [IOSByteArray arrayWithLength:[buf remaining]];
  [buf getWithByteArray:b];
  @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I$$C", @" Parsed bad preamble ", preamble, @" before: [", [NSString java_stringWithBytes:b], ']'));
}

jboolean EduUmassCsNioNIOTransport_isDisconnectedWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_) {
  id node = EduUmassCsNioNIOTransport_getNodeIDWithJavaNetInetSocketAddress_(self, isa_);
  return node != nil ? [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->lastFailed_)) containsKeyWithId:node] : false;
}

void EduUmassCsNioNIOTransport_processSelectedKeys(EduUmassCsNioNIOTransport *self) {
  id<JavaUtilCollection> selected = ([((JavaNioChannelsSelector *) nil_chk(self->selector_)) selectedKeys]);
  id<JavaUtilIterator> selectedKeys = [((id<JavaUtilCollection>) nil_chk(selected)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(selectedKeys)) hasNext]) {
    JavaNioChannelsSelectionKey *key = [selectedKeys next];
    [selectedKeys remove];
    if (![((JavaNioChannelsSelectionKey *) nil_chk(key)) isValid]) {
      EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(self, key);
      continue;
    }
    @try {
      if ([key isValid] && [key isAcceptable]) EduUmassCsNioNIOTransport_acceptWithJavaNioChannelsSelectionKey_(self, key);
      if ([key isValid] && [key isConnectable]) EduUmassCsNioNIOTransport_finishConnectionWithJavaNioChannelsSelectionKey_(self, key);
      if ([key isValid] && [key isWritable]) if (EduUmassCsNioNIOTransport_useSenderTask(self) && self->senderTask_ != nil) [self->senderTask_ addKeyWithJavaNioChannelsSelectionKey:key];
      else EduUmassCsNioNIOTransport_writeWithJavaNioChannelsSelectionKey_(self, key);
      if ([key isValid] && [key isReadable]) EduUmassCsNioNIOTransport_readWithJavaNioChannelsSelectionKey_(self, key);
    }
    @catch (JavaIoIOException *e) {
      EduUmassCsNioNIOTransport_updateFailedWithJavaNioChannelsSelectionKey_(self, key);
      [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"{0} incurred IOException on {1} likely because remote end closed connection" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, [key channel] } count:2 type:NSObject_class_()]];
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(self, key);
    }
    @catch (JavaNioChannelsCancelledKeyException *e) {
      EduUmassCsNioNIOTransport_updateFailedWithJavaNioChannelsSelectionKey_(self, key);
      [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"{0} incurred IOException on {1} likely because remote end closed connection" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, [key channel] } count:2 type:NSObject_class_()]];
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(self, key);
    }
  }
  [((id<JavaUtilSet>) nil_chk([self->selector_ selectedKeys])) clear];
}

void EduUmassCsNioNIOTransport_updateFailedWithJavaNioChannelsSelectionKey_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key) {
  if (!([[((JavaNioChannelsSelectionKey *) nil_chk(key)) channel] isKindOfClass:[JavaNioChannelsSocketChannel class]])) return;
  JavaNioChannelsSocketChannel *channel = (JavaNioChannelsSocketChannel *) cast_chk([key channel], [JavaNioChannelsSocketChannel class]);
  JavaNetInetSocketAddress *remote = (JavaNetInetSocketAddress *) cast_chk([((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(channel)) socket])) getRemoteSocketAddress], [JavaNetInetSocketAddress class]);
  if (remote == nil) remote = EduUmassCsNioNIOTransport_getSockAddrFromSockChannelWithJavaNioChannelsSocketChannel_(self, channel);
  EduUmassCsNioNIOTransport_updateFailedWithJavaNetInetSocketAddress_(self, remote);
}

void EduUmassCsNioNIOTransport_updateFailedWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *remote) {
  id node = nil;
  if ((node = EduUmassCsNioNIOTransport_getNodeIDWithJavaNetInetSocketAddress_(self, remote)) != nil) [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->lastFailed_)) putWithId:node withId:JavaLangLong_valueOfWithLong_(JavaLangSystem_currentTimeMillis())];
}

id EduUmassCsNioNIOTransport_getNodeIDWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_) {
  if (isa_ != nil && self->nodeConfig_ != nil) for (id __strong node in nil_chk([self->nodeConfig_ getNodeIDs])) {
    if ([self->nodeConfig_ getNodeAddressWithId:node] != nil && [((JavaNetInetAddress *) nil_chk([isa_ getAddress])) isEqual:[self->nodeConfig_ getNodeAddressWithId:node]] && [self->nodeConfig_ getNodePortWithId:node] == [isa_ getPort]) return node;
  }
  return nil;
}

void EduUmassCsNioNIOTransport_updateAliveWithJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *channel) {
  JavaNetInetSocketAddress *remote = (JavaNetInetSocketAddress *) cast_chk([((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk((channel))) socket])) getRemoteSocketAddress], [JavaNetInetSocketAddress class]);
  if (remote == nil) remote = EduUmassCsNioNIOTransport_getSockAddrFromSockChannelWithJavaNioChannelsSocketChannel_(self, channel);
  id node = nil;
  if ((node = EduUmassCsNioNIOTransport_getNodeIDWithJavaNetInetSocketAddress_(self, remote)) != nil) [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->lastFailed_)) removeWithId:node];
}

void EduUmassCsNioNIOTransport_acceptWithJavaNioChannelsSelectionKey_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key) {
  JavaNioChannelsServerSocketChannel *serverSocketChannel = (JavaNioChannelsServerSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(key)) channel], [JavaNioChannelsServerSocketChannel class]);
  JavaNioChannelsSocketChannel *socketChannel = [((JavaNioChannelsServerSocketChannel *) nil_chk(serverSocketChannel)) accept];
  if (socketChannel == nil) return;
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"{0} accepted connection from {1}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, [socketChannel getRemoteAddress] } count:2 type:NSObject_class_()]];
  EduUmassCsNioNioutilsNIOInstrumenter_incrAccepted();
  [((JavaNetSocket *) nil_chk([socketChannel socket])) setKeepAliveWithBoolean:true];
  [socketChannel configureBlockingWithBoolean:false];
  [((JavaNetSocket *) nil_chk([socketChannel socket])) setTcpNoDelayWithBoolean:true];
  [((JavaNetSocket *) nil_chk([socketChannel socket])) setReceiveBufferSizeWithInt:EduUmassCsNioNIOTransport_HINT_SOCK_BUFFER_SIZE];
  [((JavaNetSocket *) nil_chk([socketChannel socket])) setSendBufferSizeWithInt:EduUmassCsNioNIOTransport_HINT_SOCK_BUFFER_SIZE];
  EduUmassCsNioNIOTransport_updateAliveWithJavaNioChannelsSocketChannel_(self, socketChannel);
  EduUmassCsNioNioutilsRTTEstimator_recordWithJavaNetInetAddress_([((JavaNetInetSocketAddress *) nil_chk(((JavaNetInetSocketAddress *) cast_chk([socketChannel getRemoteAddress], [JavaNetInetSocketAddress class])))) getAddress]);
  JavaNioChannelsSelectionKey *socketChannelKey = [socketChannel register__WithJavaNioChannelsSelector:self->selector_ withInt:JavaNioChannelsSelectionKey_OP_READ];
  EduUmassCsNioNIOTransport_reuseAcceptedConnectionForWritesWithJavaNioChannelsSocketChannel_(self, socketChannel);
  [((JavaNioChannelsSelectionKey *) nil_chk(socketChannelKey)) attachWithId:create_EduUmassCsNioNIOTransport_AlternatingByteBuffer_init()];
  JreAssert((([socketChannelKey attachment] != nil)), (@"edu/umass/cs/nio/NIOTransport.java:553 condition failed: assert (socketChannelKey.attachment() != null);"));
  EduUmassCsNioNIOTransport_registerSSLWithJavaNioChannelsSelectionKey_withBoolean_(self, socketChannelKey, false);
}

void EduUmassCsNioNIOTransport_readWithJavaNioChannelsSelectionKey_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key) {
  JavaNioChannelsSocketChannel *socketChannel = (JavaNioChannelsSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(key)) channel], [JavaNioChannelsSocketChannel class]);
  if (EduUmassCsNioNIOTransport_isSSL(self)) {
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->readBuffers_)) putIfAbsentWithId:key withId:JavaNioByteBuffer_allocateWithInt_(EduUmassCsNioNIOTransport_READ_BUFFER_SIZE)];
    JavaNioByteBuffer *bbuf = [self->readBuffers_ getWithId:key];
    jint numRead = [((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) readWithJavaNioByteBuffer:bbuf];
    if (numRead == -1) {
      [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"{0} read off of channel {1}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, socketChannel } count:2 type:NSObject_class_()]];
      EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(self, key);
    }
    if (numRead > 0) {
      [((JavaNioByteBuffer *) nil_chk(bbuf)) flip];
      @try {
        [((id<EduUmassCsNioInterfacesDataProcessingWorker>) nil_chk(self->worker_)) processDataWithJavaNioChannelsSocketChannel:socketChannel withJavaNioByteBuffer:bbuf];
        JreAssert(([bbuf remaining] == 0), (@"edu/umass/cs/nio/NIOTransport.java:624 condition failed: assert (bbuf.remaining() == 0);"));
      }
      @catch (JavaNioBufferOverflowException *boe) {
      }
      [bbuf compact];
    }
    return;
  }
  EduUmassCsNioNIOTransport_AlternatingByteBuffer *abbuf = (EduUmassCsNioNIOTransport_AlternatingByteBuffer *) cast_chk([key attachment], [EduUmassCsNioNIOTransport_AlternatingByteBuffer class]);
  JreAssert(((abbuf != nil)), (JreStrcat("@$@", self, @": no attachment for ", [key channel])));
  JavaNioByteBuffer *bbuf = ([((JavaNioByteBuffer *) nil_chk(((EduUmassCsNioNIOTransport_AlternatingByteBuffer *) nil_chk(abbuf))->headerBuf_)) remaining] == 0 ? abbuf->bodyBuf_ : abbuf->headerBuf_);
  if ([bbuf hasRemaining] && [((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) readWithJavaNioByteBuffer:bbuf] < 0) {
    EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(self, key);
    return;
  }
  if (bbuf == abbuf->headerBuf_ && ![bbuf hasRemaining]) {
    [bbuf flip];
    jint length = -1;
    @try {
      length = EduUmassCsNioNIOTransport_getPayloadLengthWithJavaNioByteBuffer_(bbuf);
    }
    @catch (JavaIoIOException *ioe) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("@C$$@", self->myID_, ':', [((JavaIoIOException *) nil_chk(ioe)) getMessage], @" on channel ", socketChannel));
    }
    bbuf = (JreStrongAssign(&abbuf->bodyBuf_, JavaNioByteBuffer_allocateWithInt_(length)));
    [((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) readWithJavaNioByteBuffer:bbuf];
  }
  if (abbuf->bodyBuf_ != nil && ![abbuf->bodyBuf_ hasRemaining]) {
    [bbuf flip];
    JavaUtilLoggingLevel *level = JreLoadStatic(JavaUtilLoggingLevel, FINEST);
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:level withNSString:@"{0}[t{1}] read from channel {2}:[{3}]" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, JavaLangLong_valueOfWithLong_([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId]), socketChannel, [EduUmassCsNioNIOTransport_log isLoggableWithJavaUtilLoggingLevel:level] ? create_EduUmassCsUtilsStringer_initWithByteArray_withInt_withInt_([bbuf array], [bbuf position], [bbuf remaining]) : (id) @"" } count:4 type:NSObject_class_()]];
    [((id<EduUmassCsNioInterfacesDataProcessingWorker>) nil_chk(self->worker_)) processDataWithJavaNioChannelsSocketChannel:socketChannel withJavaNioByteBuffer:EduUmassCsNioNIOTransport_inflateWithJavaNioByteBuffer_(self, bbuf)];
    if (![bbuf hasRemaining]) {
      [abbuf clear];
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->congested_)) removeWithId:key];
    }
    else {
      [bbuf compact];
      JreAssert(((![bbuf hasRemaining])), (@"edu/umass/cs/nio/NIOTransport.java:682 condition failed: assert (!bbuf.hasRemaining());"));
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->congested_)) putIfAbsentWithId:key withId:abbuf];
    }
  }
}

void EduUmassCsNioNIOTransport_tryProcessCongested(EduUmassCsNioNIOTransport *self) {
  if (![((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->congested_)) isEmpty]) for (id<JavaUtilIterator> keyIter = [((id<JavaUtilSet>) nil_chk([self->congested_ keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(keyIter)) hasNext]; ) {
    JavaNioChannelsSelectionKey *key = [keyIter next];
    if ([((JavaNioChannelsSelectionKey *) nil_chk(key)) isValid]) EduUmassCsNioNIOTransport_readWithJavaNioChannelsSelectionKey_(self, key);
    else [keyIter remove];
  }
}

void EduUmassCsNioNIOTransport_setCompressionWithBoolean_(jboolean b) {
  EduUmassCsNioNIOTransport_initialize();
  EduUmassCsNioNIOTransport_enableCompression = b;
}

jboolean EduUmassCsNioNIOTransport_getCompression() {
  EduUmassCsNioNIOTransport_initialize();
  return EduUmassCsNioNIOTransport_enableCompression && EduUmassCsNioNIOTransport_compressionThreshold < EduUmassCsNioNIOTransport_MAX_PAYLOAD_SIZE;
}

void EduUmassCsNioNIOTransport_setCompressionThresholdWithInt_(jint t) {
  EduUmassCsNioNIOTransport_initialize();
}

jint EduUmassCsNioNIOTransport_getCompressionThreshold() {
  EduUmassCsNioNIOTransport_initialize();
  return EduUmassCsNioNIOTransport_compressionThreshold;
}

JavaNioByteBuffer *EduUmassCsNioNIOTransport_inflateWithJavaNioByteBuffer_(EduUmassCsNioNIOTransport *self, JavaNioByteBuffer *bbuf) {
  if (EduUmassCsNioNIOTransport_isSSL(self) || !EduUmassCsNioNIOTransport_getCompression()) return bbuf;
  JavaUtilZipInflater *inflator = create_JavaUtilZipInflater_init();
  [inflator setInputWithByteArray:[((JavaNioByteBuffer *) nil_chk(bbuf)) array] withInt:0 withInt:[bbuf capacity]];
  IOSByteArray *decompressed = [IOSByteArray arrayWithLength:[bbuf capacity]];
  JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_initWithInt_([bbuf capacity]);
  @try {
    while (![inflator finished]) {
      jint count = [inflator inflateWithByteArray:decompressed];
      if (count == 0) break;
      [baos writeWithByteArray:decompressed withInt:0 withInt:count];
    }
    [baos close];
    [inflator end];
  }
  @catch (JavaUtilZipDataFormatException *e) {
    if ([bbuf capacity] > EduUmassCsNioNIOTransport_getCompressionThreshold()) {
      [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) severeWithNSString:JreStrcat("@$", self, @" incurred DataFormatException ")];
      [((JavaUtilZipDataFormatException *) nil_chk(e)) printStackTrace];
    }
    return bbuf;
  }
  bbuf = JavaNioByteBuffer_wrapWithByteArray_([baos toByteArray]);
  return bbuf;
}

void EduUmassCsNioNIOTransport_writeWithJavaNioChannelsSelectionKey_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key) {
  JavaNioChannelsSocketChannel *socketChannel = (JavaNioChannelsSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(key)) channel], [JavaNioChannelsSocketChannel class]);
  @try {
    JavaNetInetSocketAddress *isa_ = (JavaNetInetSocketAddress *) cast_chk([((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) getRemoteAddress], [JavaNetInetSocketAddress class]);
    if (isa_ == nil) {
      [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) severeWithNSString:@"Null socket address for a write-ready socket!"];
      EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(self, key);
    }
    else {
      if (EduUmassCsNioNIOTransport_writeAllPendingWritesWithJavaNetInetSocketAddress_withJavaNioChannelsSocketChannel_(self, isa_, socketChannel)) [key interestOpsWithInt:JavaNioChannelsSelectionKey_OP_READ];
    }
  }
  @catch (JavaIoIOException *e) {
    EduUmassCsNioNIOTransport_cleanupRetryWithJavaNioChannelsSelectionKey_withJavaNioChannelsSocketChannel_withJavaNetInetSocketAddress_(self, key, socketChannel, EduUmassCsNioNIOTransport_getSockAddrFromSockChannelWithJavaNioChannelsSocketChannel_(self, socketChannel));
  }
}

void EduUmassCsNioNIOTransport_clearPendingWithJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *socketChannel) {
  JavaNetInetSocketAddress *sockAddr = EduUmassCsNioNIOTransport_getSockAddrFromSockChannelWithJavaNioChannelsSocketChannel_(self, socketChannel);
  @synchronized(self->sendQueues_) {
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sendQueues_)) removeWithId:sockAddr];
    @synchronized(self->sockAddrToSockChannel_) {
      [((JavaUtilHashMap *) nil_chk(self->sockAddrToSockChannel_)) removeWithId:sockAddr];
    }
  }
}

jboolean EduUmassCsNioNIOTransport_useSenderTask(EduUmassCsNioNIOTransport *self) {
  return EduUmassCsNioNIOTransport_useSenderTask_;
}

void EduUmassCsNioNIOTransport_setUseSenderTaskWithBoolean_(jboolean b) {
  EduUmassCsNioNIOTransport_initialize();
  EduUmassCsNioNIOTransport_useSenderTask_ = b;
}

jboolean EduUmassCsNioNIOTransport_writeAllPendingWritesWithJavaNetInetSocketAddress_withJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_, JavaNioChannelsSocketChannel *socketChannel) {
  JavaUtilConcurrentLinkedBlockingQueue *sendQueue = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sendQueues_)) getWithId:isa_];
  if (sendQueue == nil) return true;
  if (EduUmassCsNioNIOTransport_SEND_BATCHED) EduUmassCsNioNIOTransport_sendBatchedWithJavaUtilConcurrentLinkedBlockingQueue_withJavaNioChannelsSocketChannel_(self, sendQueue, socketChannel);
  else EduUmassCsNioNIOTransport_sendUnbatchedWithJavaUtilConcurrentLinkedBlockingQueue_withJavaNioChannelsSocketChannel_(self, sendQueue, socketChannel);
  if ([sendQueue isEmpty]) EduUmassCsNioNIOTransport_dequeueSendQueueIfEmptyWithJavaNetInetSocketAddress_withJavaUtilConcurrentLinkedBlockingQueue_(self, isa_, sendQueue);
  return ([sendQueue isEmpty]);
}

void EduUmassCsNioNIOTransport_sendUnbatchedWithJavaUtilConcurrentLinkedBlockingQueue_withJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaUtilConcurrentLinkedBlockingQueue *sendQueue, JavaNioChannelsSocketChannel *socketChannel) {
  while (![((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(sendQueue)) isEmpty]) {
    JavaNioByteBuffer *buf0 = [sendQueue peek];
    EduUmassCsNioNIOTransport_wrapWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_(self, socketChannel, buf0);
    JavaUtilLoggingLevel *level = JreLoadStatic(JavaUtilLoggingLevel, FINEST);
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:level withNSString:@"{0} wrote \"{1}\" to {2}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, [EduUmassCsNioNIOTransport_log isLoggableWithJavaUtilLoggingLevel:level] ? create_EduUmassCsUtilsStringer_initWithByteArray_([((JavaNioByteBuffer *) nil_chk(buf0)) array]) : (id) buf0, socketChannel } count:3 type:NSObject_class_()]];
    if ([((JavaNioByteBuffer *) nil_chk(buf0)) remaining] > 0) {
      [EduUmassCsNioNIOTransport_log logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"{0} socket buffer congested because of high load.." withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self } count:1 type:NSObject_class_()]];
      break;
    }
    JreAssert(([buf0 remaining] == 0), (@"edu/umass/cs/nio/NIOTransport.java:902 condition failed: assert (buf0.remaining() == 0);"));
    [sendQueue remove];
  }
}

void EduUmassCsNioNIOTransport_sendBatchedWithJavaUtilConcurrentLinkedBlockingQueue_withJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaUtilConcurrentLinkedBlockingQueue *sendQueue, JavaNioChannelsSocketChannel *socketChannel) {
  [((JavaNioByteBuffer *) nil_chk(self->writeBuffer_)) clear];
  for (JavaNioByteBuffer * __strong buf in nil_chk(sendQueue)) {
    if ([self->writeBuffer_ remaining] < [((JavaNioByteBuffer *) nil_chk(buf)) remaining]) buf = (JavaNioByteBuffer *) cast_chk([((JavaNioByteBuffer *) nil_chk([buf slice])) limitWithInt:[self->writeBuffer_ remaining]], [JavaNioByteBuffer class]);
    jint prevPos = [((JavaNioByteBuffer *) nil_chk(buf)) position];
    [self->writeBuffer_ putWithJavaNioByteBuffer:buf];
    [buf positionWithInt:prevPos];
    if ([self->writeBuffer_ remaining] == 0) break;
  }
  [self->writeBuffer_ flip];
  jint written = EduUmassCsNioNIOTransport_wrapWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_(self, socketChannel, self->writeBuffer_);
  EduUmassCsNioNioutilsNIOInstrumenter_incrBytesSentWithInt_(written);
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST) withNSString:@"{0} wrote {1} batched bytes to {2}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, JavaLangInteger_valueOfWithInt_(written), socketChannel } count:3 type:NSObject_class_()]];
  while (![sendQueue isEmpty]) {
    JavaNioByteBuffer *buf = [sendQueue peek];
    jint partial = [((JavaNioByteBuffer *) nil_chk(buf)) remaining] - written;
    if (partial > 0) {
      [buf positionWithInt:[buf position] + written];
      break;
    }
    written -= [buf remaining];
    [sendQueue remove];
  }
}

void EduUmassCsNioNIOTransport_dequeueSendQueueIfEmptyWithJavaNetInetSocketAddress_withJavaUtilConcurrentLinkedBlockingQueue_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_, JavaUtilConcurrentLinkedBlockingQueue *sendQueue) {
  @synchronized(self->sendQueues_) {
    if ([((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(sendQueue)) isEmpty]) [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sendQueues_)) removeWithId:isa_ withId:sendQueue];
  }
}

jint EduUmassCsNioNIOTransport_wrapWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *socketChannel, JavaNioByteBuffer *unencrypted) {
  return EduUmassCsNioNIOTransport_wrapWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_withBoolean_(self, socketChannel, unencrypted, false);
}

jint EduUmassCsNioNIOTransport_wrapWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_withBoolean_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *socketChannel, JavaNioByteBuffer *unencrypted, jboolean sneakyMode) {
  JavaUtilLoggingLevel *level = JreLoadStatic(JavaUtilLoggingLevel, FINEST);
  if ([((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) isLoggableWithJavaUtilLoggingLevel:level]) [EduUmassCsNioNIOTransport_log logWithJavaUtilLoggingLevel:level withNSString:@"{0}[t{1}{2}]{3} writing out to channel {4}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, JavaLangLong_valueOfWithLong_([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId]), [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId] != self->meThreadId_ && !sneakyMode ? [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName] : @"", (sneakyMode ? @" sneakily" : @""), socketChannel } count:5 type:NSObject_class_()]];
  if (EduUmassCsNioNIOTransport_isSSL(self)) return [((EduUmassCsNioSSLDataProcessingWorker *) nil_chk(((EduUmassCsNioSSLDataProcessingWorker *) cast_chk(self->worker_, [EduUmassCsNioSSLDataProcessingWorker class])))) wrapWithJavaNioChannelsSocketChannel:socketChannel withJavaNioByteBuffer:unencrypted];
  else return [((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) writeWithJavaNioByteBuffer:unencrypted];
}

jboolean EduUmassCsNioNIOTransport_isSSL(EduUmassCsNioNIOTransport *self) {
  return [self->worker_ isKindOfClass:[EduUmassCsNioSSLDataProcessingWorker class]] ? true : false;
}

jboolean EduUmassCsNioNIOTransport_isHandshakeCompleteWithJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *socketChannel) {
  jboolean isComplete = EduUmassCsNioNIOTransport_isSSL(self) ? [((EduUmassCsNioSSLDataProcessingWorker *) nil_chk(((EduUmassCsNioSSLDataProcessingWorker *) cast_chk(self->worker_, [EduUmassCsNioSSLDataProcessingWorker class])))) isHandshakeCompleteWithJavaNioChannelsSocketChannel:socketChannel] : true;
  if (!isComplete) {
    JavaNioChannelsSelectionKey *key = [((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) keyForWithJavaNioChannelsSelector:self->selector_];
    if (key != nil && [key isValid]) [key interestOpsWithInt:[key interestOps] & (~JavaNioChannelsSelectionKey_OP_WRITE)];
  }
  return isComplete;
}

jint EduUmassCsNioNIOTransport_enqueueSendWithJavaNetInetSocketAddress_withJavaNioByteBuffer_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_, JavaNioByteBuffer *data) {
  jint queuedBytes = 0;
  @synchronized(self->sendQueues_) {
    if (![((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sendQueues_)) containsKeyWithId:isa_]) [self->sendQueues_ putIfAbsentWithId:isa_ withId:create_JavaUtilConcurrentLinkedBlockingQueue_init()];
    JavaUtilConcurrentLinkedBlockingQueue *sendQueue = [self->sendQueues_ getWithId:isa_];
    if ([((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(sendQueue)) isEmpty] && (EduUmassCsNioNIOTransport_trySneakyWriteWithJavaNetInetSocketAddress_withJavaNioByteBuffer_(self, isa_, data)) && [((JavaNioByteBuffer *) nil_chk(data)) remaining] == 0) return [((JavaNioByteBuffer *) nil_chk(data)) capacity];
    if ([sendQueue size] < EduUmassCsNioNIOTransport_getMaxQueuedSends(self)) {
      [sendQueue addWithId:data];
      queuedBytes = [((JavaNioByteBuffer *) nil_chk(data)) capacity];
    }
    else {
      [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"{0} message queue for {1} out of room, dropping message" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, isa_ } count:2 type:NSObject_class_()]];
      queuedBytes = EduUmassCsNioNIOTransport_isConnectedWithJavaNetInetSocketAddress_(self, isa_) ? 0 : -1;
    }
  }
  if (queuedBytes > 0 && [((JavaNioByteBuffer *) nil_chk(data)) remaining] > 0) EduUmassCsNioNIOTransport_wakeupSelectorWithJavaNetInetSocketAddress_(self, isa_);
  return queuedBytes;
}

jboolean EduUmassCsNioNIOTransport_canEnqueueSendWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_) {
  JavaUtilConcurrentLinkedBlockingQueue *sendQueue = nil;
  return ((sendQueue = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sendQueues_)) getWithId:isa_]) == nil) || [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(sendQueue)) size] < EduUmassCsNioNIOTransport_MAX_QUEUED_SENDS;
}

void EduUmassCsNioNIOTransport_wakeupSelectorWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_) {
  JavaNioChannelsSocketChannel *sc = EduUmassCsNioNIOTransport_getSockAddrToSockChannelWithJavaNetInetSocketAddress_(self, isa_);
  JavaNioChannelsSelectionKey *key = nil;
  if (sc != nil && [sc isConnected] && EduUmassCsNioNIOTransport_isHandshakeCompleteWithJavaNioChannelsSocketChannel_(self, sc)) @try {
    if ((key = [sc keyForWithJavaNioChannelsSelector:self->selector_]) != nil && [((JavaNioChannelsSelectionKey *) nil_chk(key)) isValid]) [((JavaNioChannelsSelectionKey *) nil_chk(key)) interestOpsWithInt:[key interestOps] | JavaNioChannelsSelectionKey_OP_WRITE];
  }
  @catch (JavaNioChannelsCancelledKeyException *cke) {
    EduUmassCsNioNIOTransport_cleanupRetryWithJavaNioChannelsSelectionKey_withJavaNioChannelsSocketChannel_withJavaNetInetSocketAddress_(self, key, sc, isa_);
  }
  [((JavaNioChannelsSelector *) nil_chk(self->selector_)) wakeup];
  if (sc != nil && ![sc isOpen]) EduUmassCsNioNIOTransport_cleanupRetryWithJavaNioChannelsSelectionKey_withJavaNioChannelsSocketChannel_withJavaNetInetSocketAddress_(self, nil, sc, isa_);
}

jboolean EduUmassCsNioNIOTransport_trySneakyWriteWithJavaNetInetSocketAddress_withJavaNioByteBuffer_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_, JavaNioByteBuffer *data) {
  if (EduUmassCsNioNIOTransport_isSSL(self)) return false;
  JavaNioChannelsSocketChannel *channel = EduUmassCsNioNIOTransport_getSockAddrToSockChannelWithJavaNetInetSocketAddress_(self, isa_);
  if (channel != nil && [channel isConnected] && EduUmassCsNioNIOTransport_isHandshakeCompleteWithJavaNioChannelsSocketChannel_(self, channel)) {
    @try {
      EduUmassCsNioNIOTransport_wrapWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_withBoolean_(self, channel, data, true);
      return true;
    }
    @catch (JavaIoIOException *e) {
      if (!EduUmassCsNioNIOTransport_isDisconnectedWithJavaNetInetSocketAddress_(self, isa_)) {
        EduUmassCsNioNIOTransport_updateFailedWithJavaNetInetSocketAddress_(self, isa_);
        @throw e;
      }
    }
  }
  return false;
}

void EduUmassCsNioNIOTransport_registerWriteInterests(EduUmassCsNioNIOTransport *self) {
  if (JavaLangSystem_currentTimeMillis() - self->lastRegisterWriteInterestsInvoked_ < (JavaLangMath_random() * EduUmassCsNioNIOTransport_INTER_REGISTER_WRITE_INTERESTS_SPACING)) return;
  self->lastRegisterWriteInterestsInvoked_ = JavaLangSystem_currentTimeMillis();
  if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sendQueues_)) isEmpty]) return;
  @synchronized(self->sendQueues_) {
    for (JavaNetInetSocketAddress * __strong isa_ in nil_chk([self->sendQueues_ keySet])) {
      JavaUtilConcurrentLinkedBlockingQueue *queue = [self->sendQueues_ getWithId:isa_];
      if (queue != nil && ![queue isEmpty]) {
        JavaNioChannelsSocketChannel *sc = EduUmassCsNioNIOTransport_getSockAddrToSockChannelWithJavaNetInetSocketAddress_(self, isa_);
        if (sc == nil) return;
        JavaNioChannelsSelectionKey *key = nil;
        if ((([sc isConnected] && EduUmassCsNioNIOTransport_isHandshakeCompleteWithJavaNioChannelsSocketChannel_(self, sc)) && (key = [sc keyForWithJavaNioChannelsSelector:self->selector_]) != nil && ([((JavaNioChannelsSelectionKey *) nil_chk(key)) interestOps] & JavaNioChannelsSelectionKey_OP_WRITE) == 0)) @try {
          [((JavaNioChannelsSelectionKey *) nil_chk(key)) interestOpsWithInt:[key interestOps] | JavaNioChannelsSelectionKey_OP_WRITE];
        }
        @catch (JavaNioChannelsCancelledKeyException *cke) {
          EduUmassCsNioNIOTransport_cleanupRetryWithJavaNioChannelsSelectionKey_withJavaNioChannelsSocketChannel_withJavaNetInetSocketAddress_(self, key, sc, isa_);
        }
        if (![sc isOpen]) {
          EduUmassCsNioNIOTransport_cleanupRetryWithJavaNioChannelsSelectionKey_withJavaNioChannelsSocketChannel_withJavaNetInetSocketAddress_(self, nil, sc, isa_);
        }
      }
    }
  }
}

void EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key) {
  if (key != nil) {
    EduUmassCsNioNIOTransport_cleanupWithJavaNioChannelsSelectionKey_(key);
    if (EduUmassCsNioNIOTransport_isSSL(self)) [((EduUmassCsNioSSLDataProcessingWorker *) nil_chk(((EduUmassCsNioSSLDataProcessingWorker *) cast_chk(self->worker_, [EduUmassCsNioSSLDataProcessingWorker class])))) removeWithJavaNioChannelsSelectionKey:key];
  }
}

void EduUmassCsNioNIOTransport_cleanupWithJavaNioChannelsSelectionKey_withJavaNioChannelsSelectableChannel_(JavaNioChannelsSelectionKey *key, JavaNioChannelsSelectableChannel *sc) {
  EduUmassCsNioNIOTransport_initialize();
  if (key != nil) [key cancel];
  @try {
    [((JavaNioChannelsSelectableChannel *) nil_chk(sc)) close];
  }
  @catch (JavaIoIOException *ioe) {
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) warningWithNSString:JreStrcat("$@", @"IOException encountered while closing socket channel ", sc)];
  }
}

void EduUmassCsNioNIOTransport_cleanupWithJavaNioChannelsSelectionKey_(JavaNioChannelsSelectionKey *key) {
  EduUmassCsNioNIOTransport_initialize();
  EduUmassCsNioNIOTransport_cleanupWithJavaNioChannelsSelectionKey_withJavaNioChannelsSelectableChannel_(key, [((JavaNioChannelsSelectionKey *) nil_chk(key)) channel]);
}

void EduUmassCsNioNIOTransport_cleanupRetryWithJavaNioChannelsSelectionKey_withJavaNioChannelsSocketChannel_withJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key, JavaNioChannelsSocketChannel *sc, JavaNetInetSocketAddress *isa_) {
  EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(self, key);
  @try {
    if (EduUmassCsNioNIOTransport_canReconnectWithJavaNetInetSocketAddress_(self, isa_)) {
      EduUmassCsNioNIOTransport_testAndIntiateConnectionWithJavaNetInetSocketAddress_(self, isa_);
    }
  }
  @catch (JavaIoIOException *ioe) {
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) warningWithNSString:JreStrcat("$@", @"IOException encountered while re-initiating connection to ", isa_)];
  }
}

jboolean EduUmassCsNioNIOTransport_canReconnectWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_) {
  JavaLangLong *last = [((JavaUtilHashMap *) nil_chk(self->connAttempts_)) getWithId:isa_];
  if (last == nil) {
    last = JavaLangLong_valueOfWithLong_(0LL);
  }
  jlong now = JavaLangSystem_currentTimeMillis();
  if (now - [last longLongValue] > EduUmassCsNioNIOTransport_getMinInterConnectTime(self)) {
    return true;
  }
  return false;
}

jboolean EduUmassCsNioNIOTransport_checkAndReconnectWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_) {
  jboolean canReconnect = false;
  if (EduUmassCsNioNIOTransport_canReconnectWithJavaNetInetSocketAddress_(self, isa_)) {
    [((JavaUtilHashMap *) nil_chk(self->connAttempts_)) putWithId:isa_ withId:JavaLangLong_valueOfWithLong_(JavaLangSystem_currentTimeMillis())];
    canReconnect = true;
  }
  return canReconnect;
}

JavaNioChannelsSocketChannel *EduUmassCsNioNIOTransport_getSockAddrToSockChannelWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_) {
  @synchronized(self->sockAddrToSockChannel_) {
    return [((JavaUtilHashMap *) nil_chk(self->sockAddrToSockChannel_)) getWithId:isa_];
  }
}

void EduUmassCsNioNIOTransport_putSockAddrToSockChannelWithJavaNetInetSocketAddress_withJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_, JavaNioChannelsSocketChannel *socketChannel) {
  @synchronized(self->sockAddrToSockChannel_) {
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER) withNSString:@"{0} inserting ({1}, {2})" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, isa_, socketChannel } count:3 type:NSObject_class_()]];
    JavaNioChannelsSocketChannel *prevChannel = [((JavaUtilHashMap *) nil_chk(self->sockAddrToSockChannel_)) putWithId:isa_ withId:socketChannel];
    if (prevChannel != nil) {
      EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(self, [prevChannel keyForWithJavaNioChannelsSelector:self->selector_]);
    }
  }
}

JavaNetInetSocketAddress *EduUmassCsNioNIOTransport_getSockAddrFromSockChannelWithJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *sc) {
  @synchronized(self->sockAddrToSockChannel_) {
    JavaNetInetSocketAddress *retval = nil;
    if ([((JavaUtilHashMap *) nil_chk(self->sockAddrToSockChannel_)) containsValueWithId:sc]) {
      for (JavaNetInetSocketAddress * __strong isa_ in nil_chk([self->sockAddrToSockChannel_ keySet])) {
        if ([((JavaNioChannelsSocketChannel *) nil_chk([self->sockAddrToSockChannel_ getWithId:isa_])) isEqual:sc] || [self->sockAddrToSockChannel_ getWithId:isa_] == sc) {
          retval = isa_;
        }
      }
    }
    return retval;
  }
}

void EduUmassCsNioNIOTransport_reuseAcceptedConnectionForWritesWithJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *socketChannel) {
  @synchronized(self->sockAddrToSockChannel_) {
    @try {
      EduUmassCsNioNIOTransport_putSockAddrToSockChannelWithJavaNetInetSocketAddress_withJavaNioChannelsSocketChannel_(self, (JavaNetInetSocketAddress *) cast_chk([((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) getRemoteAddress], [JavaNetInetSocketAddress class]), socketChannel);
      [socketChannel register__WithJavaNioChannelsSelector:self->selector_ withInt:JavaNioChannelsSelectionKey_OP_READ | (EduUmassCsNioNIOTransport_isSSL(self) ? 0 : JavaNioChannelsSelectionKey_OP_WRITE)];
    }
    @catch (JavaNioChannelsClosedChannelException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) warningWithNSString:JreStrcat("@$", self->myID_, @" failed to set interest ops immediately after accept()")];
    }
    @catch (JavaIoIOException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) warningWithNSString:JreStrcat("@$", self->myID_, @" failed to get remote address")];
    }
  }
}

jboolean EduUmassCsNioNIOTransport_isConnectedWithJavaNetInetSocketAddress_withBoolean_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_, jboolean doLog) {
  JavaNioChannelsSocketChannel *sock = nil;
  {
    sock = [((JavaUtilHashMap *) nil_chk(self->sockAddrToSockChannel_)) getWithId:isa_];
  }
  if (sock != nil && ([sock isConnected] || [sock isConnectionPending])) return true;
  if (doLog) [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST) withNSString:@"{0} channel to {1}=[{2}]" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, isa_, sock } count:3 type:NSObject_class_()]];
  return false;
}

jboolean EduUmassCsNioNIOTransport_isConnectedWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_) {
  return EduUmassCsNioNIOTransport_isConnectedWithJavaNetInetSocketAddress_withBoolean_(self, isa_, false);
}

void EduUmassCsNioNIOTransport_testAndIntiateConnectionWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_) {
  if (EduUmassCsNioNIOTransport_isConnectedWithJavaNetInetSocketAddress_(self, isa_) || !EduUmassCsNioNIOTransport_canReconnectWithJavaNetInetSocketAddress_(self, isa_)) {
    return;
  }
  @synchronized(self->sockAddrToSockChannel_) {
    if (!EduUmassCsNioNIOTransport_isConnectedWithJavaNetInetSocketAddress_withBoolean_(self, isa_, true) && EduUmassCsNioNIOTransport_checkAndReconnectWithJavaNetInetSocketAddress_(self, isa_)) {
      [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"{0} has no connection to {1} either because one has not been established or was previously closed by remote end." withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, isa_ } count:2 type:NSObject_class_()]];
      EduUmassCsNioNIOTransport_initiateConnectionWithJavaNetInetSocketAddress_(self, isa_);
    }
  }
}

void EduUmassCsNioNIOTransport_addPendingConnectWithJavaNioChannelsSocketChannel_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSocketChannel *socketChannel) {
  @synchronized(self->pendingConnects_) {
    [((JavaUtilLinkedList *) nil_chk(self->pendingConnects_)) addWithId:create_EduUmassCsNioNIOTransport_ChangeRequest_initWithEduUmassCsNioNIOTransport_withJavaNioChannelsSocketChannel_withInt_withInt_(self, socketChannel, EduUmassCsNioNIOTransport_ChangeRequest_REGISTER, JavaNioChannelsSelectionKey_OP_CONNECT)];
  }
}

void EduUmassCsNioNIOTransport_processPendingConnects(EduUmassCsNioNIOTransport *self) {
  if ([((JavaUtilLinkedList *) nil_chk(self->pendingConnects_)) isEmpty]) return;
  @synchronized(self->pendingConnects_) {
    id<JavaUtilIterator> changes = [self->pendingConnects_ iterator];
    while ([((id<JavaUtilIterator>) nil_chk(changes)) hasNext]) {
      EduUmassCsNioNIOTransport_ChangeRequest *change = [changes next];
      [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST) withNSString:@"{0} processing connect event {1}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, change } count:2 type:NSObject_class_()]];
      JavaNioChannelsSelectionKey *key = [((JavaNioChannelsSocketChannel *) nil_chk(((EduUmassCsNioNIOTransport_ChangeRequest *) nil_chk(change))->socket_)) keyForWithJavaNioChannelsSelector:self->selector_];
      switch (change->type_) {
        case EduUmassCsNioNIOTransport_ChangeRequest_CHANGEOPS:
        [((JavaNioChannelsSelectionKey *) nil_chk(key)) interestOpsWithInt:change->ops_];
        break;
        case EduUmassCsNioNIOTransport_ChangeRequest_REGISTER:
        @try {
          [change->socket_ register__WithJavaNioChannelsSelector:self->selector_ withInt:change->ops_];
        }
        @catch (JavaNioChannelsClosedChannelException *cce) {
          [EduUmassCsNioNIOTransport_log severeWithNSString:@"Socket channel likely closed before connect finished"];
          EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(self, key);
          [((JavaNioChannelsClosedChannelException *) nil_chk(cce)) printStackTrace];
        }
        break;
      }
    }
    [self->pendingConnects_ clear];
  }
}

JavaNioChannelsSelector *EduUmassCsNioNIOTransport_initSelectorWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *mySockAddr) {
  JavaNioChannelsSelector *socketSelector = JavaNioChannelsSelector_open();
  JreStrongAssign(&self->serverChannel_, JavaNioChannelsServerSocketChannel_open());
  [((JavaNioChannelsServerSocketChannel *) nil_chk(self->serverChannel_)) configureBlockingWithBoolean:false];
  [((JavaNetServerSocket *) nil_chk([((JavaNioChannelsServerSocketChannel *) nil_chk(self->serverChannel_)) socket])) setReuseAddressWithBoolean:true];
  JavaNetInetSocketAddress *isa_;
  if (self->myID_ == nil) isa_ = mySockAddr;
  else if ([self->myID_ isKindOfClass:[JavaNetInetSocketAddress class]]) isa_ = (JavaNetInetSocketAddress *) cast_chk(self->myID_, [JavaNetInetSocketAddress class]);
  else isa_ = create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_([((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(self->nodeConfig_)) getBindAddressWithId:self->myID_], [self->nodeConfig_ getNodePortWithId:self->myID_]);
  @try {
    [((JavaNetServerSocket *) nil_chk([((JavaNioChannelsServerSocketChannel *) nil_chk(self->serverChannel_)) socket])) bindWithJavaNetSocketAddress:isa_];
  }
  @catch (JavaNetBindException *be) {
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) infoWithNSString:JreStrcat("@$@$I", self, @" failed to bind to ", isa_, @"; trying wildcard address instead on port ", [((JavaNetInetSocketAddress *) nil_chk(isa_)) getPort])];
    [((JavaNetServerSocket *) nil_chk([((JavaNioChannelsServerSocketChannel *) nil_chk(self->serverChannel_)) socket])) bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithInt_([isa_ getPort])];
  }
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:@"{0} listening on channel {1} with ssl mode {2}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, self->serverChannel_, [self getSSLMode] } count:3 type:NSObject_class_()]];
  if (EduUmassCsNioNIOTransport_isSSL(self)) [((EduUmassCsNioSSLDataProcessingWorker *) nil_chk(((EduUmassCsNioSSLDataProcessingWorker *) cast_chk(self->worker_, [EduUmassCsNioSSLDataProcessingWorker class])))) setMyIDWithNSString:self->myID_ != nil ? [self->myID_ description] : [((JavaNetInetSocketAddress *) nil_chk(isa_)) description]];
  [((JavaNioChannelsServerSocketChannel *) nil_chk(self->serverChannel_)) register__WithJavaNioChannelsSelector:socketSelector withInt:JavaNioChannelsSelectionKey_OP_ACCEPT];
  return socketSelector;
}

JavaNioChannelsSocketChannel *EduUmassCsNioNIOTransport_initiateConnectionWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_) {
  JavaNioChannelsSocketChannel *socketChannel = JavaNioChannelsSocketChannel_open();
  [((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) configureBlockingWithBoolean:false];
  [((JavaNetSocket *) nil_chk([socketChannel socket])) setSendBufferSizeWithInt:EduUmassCsNioNIOTransport_HINT_SOCK_BUFFER_SIZE];
  [((JavaNetSocket *) nil_chk([socketChannel socket])) setReceiveBufferSizeWithInt:EduUmassCsNioNIOTransport_HINT_SOCK_BUFFER_SIZE];
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"{0} connecting to {1}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, isa_ } count:2 type:NSObject_class_()]];
  [((JavaNetSocket *) nil_chk([socketChannel socket])) setSoLingerWithBoolean:false withInt:-1];
  [((JavaNetSocket *) nil_chk([socketChannel socket])) setTcpNoDelayWithBoolean:true];
  [socketChannel connectWithJavaNetSocketAddress:isa_];
  EduUmassCsNioNioutilsNIOInstrumenter_incrInitiated();
  EduUmassCsNioNIOTransport_putSockAddrToSockChannelWithJavaNetInetSocketAddress_withJavaNioChannelsSocketChannel_(self, isa_, socketChannel);
  EduUmassCsNioNIOTransport_removePartialBuffersWithJavaNetInetSocketAddress_(self, isa_);
  EduUmassCsNioNIOTransport_addPendingConnectWithJavaNioChannelsSocketChannel_(self, socketChannel);
  return socketChannel;
}

void EduUmassCsNioNIOTransport_removePartialBuffersWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_) {
  JavaUtilConcurrentLinkedBlockingQueue *sendQueue = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sendQueues_)) getWithId:isa_];
  if (sendQueue == nil || [sendQueue isEmpty]) return;
  @synchronized(sendQueue) {
    JavaNioByteBuffer *bbuf = JavaNioByteBuffer_allocateWithInt_(EduUmassCsNioNIOTransport_HEADER_SIZE);
    EduUmassCsUtilsUtil_putWithJavaNioByteBuffer_withJavaNioByteBuffer_(bbuf, [sendQueue peek]);
    [((JavaNioByteBuffer *) nil_chk([sendQueue peek])) rewind];
    [((JavaNioByteBuffer *) nil_chk(bbuf)) flip];
    jint length = -1;
    @try {
      length = EduUmassCsNioNIOTransport_getPayloadLengthWithJavaNioByteBuffer_(bbuf);
    }
    @catch (JavaIoIOException *ioe) {
      JreAssert(((EduUmassCsNioNIOTransport_outOfRangeWithInt_(length) || (length != [((JavaNioByteBuffer *) nil_chk([sendQueue peek])) capacity] - EduUmassCsNioNIOTransport_HEADER_SIZE))), (@"edu/umass/cs/nio/NIOTransport.java:1447 condition failed: assert (outOfRange(length) || (length != sendQueue.peek()\n\t\t\t\t\t\t.capacity() - HEADER_SIZE));"));
      if ([sendQueue remove] != nil) [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) severeWithNSString:JreStrcat("@$@", self, @" initiated connection and removed partial unsent packet in send queue to ", isa_)];
    }
  }
}

jboolean EduUmassCsNioNIOTransport_outOfRangeWithInt_(jint length) {
  EduUmassCsNioNIOTransport_initialize();
  return length < 0 || length > EduUmassCsNioNIOTransport_MAX_PAYLOAD_SIZE;
}

jboolean EduUmassCsNioNIOTransport_finishConnectionWithJavaNioChannelsSelectionKey_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key) {
  JavaNioChannelsSocketChannel *socketChannel = (JavaNioChannelsSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(key)) channel], [JavaNioChannelsSocketChannel class]);
  jboolean connected = false;
  @try {
    connected = ([((JavaNioChannelsSocketChannel *) nil_chk(socketChannel)) finishConnect] && EduUmassCsNioNIOTransport_registerSSLWithJavaNioChannelsSelectionKey_withBoolean_(self, [key interestOpsWithInt:(EduUmassCsNioNIOTransport_isHandshakeCompleteWithJavaNioChannelsSocketChannel_(self, socketChannel) ? JavaNioChannelsSelectionKey_OP_WRITE : 0) | JavaNioChannelsSelectionKey_OP_READ], true));
    [key attachWithId:create_EduUmassCsNioNIOTransport_AlternatingByteBuffer_init()];
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"{0} {1} channel {2}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, connected ? @"connected" : @"failed to connect", [key channel] } count:3 type:NSObject_class_()]];
    if (connected) EduUmassCsNioNIOTransport_updateAliveWithJavaNioChannelsSocketChannel_(self, (JavaNioChannelsSocketChannel *) cast_chk([key channel], [JavaNioChannelsSocketChannel class]));
  }
  @catch (JavaIoIOException *e) {
    JavaNetInetSocketAddress *isa_ = create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_([((JavaNetSocket *) nil_chk([socketChannel socket])) getInetAddress], [((JavaNetSocket *) nil_chk([socketChannel socket])) getPort]);
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:@"{0} failed to (re-)connect to {1}:{2}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, isa_, [((JavaIoIOException *) nil_chk(e)) getMessage] } count:3 type:NSObject_class_()]];
    EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(self, key);
    if (!EduUmassCsNioNIOTransport_isNodeIDWithJavaNetInetSocketAddress_(self, isa_) || EduUmassCsUtilsUtil_oneInWithInt_(EduUmassCsNioNIOTransport_NUM_RETRIES)) EduUmassCsNioNIOTransport_clearPendingWithJavaNioChannelsSocketChannel_(self, socketChannel);
    connected = false;
  }
  if (connected) [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioNIOTransport_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER) withNSString:@"{0} finished connecting {1}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, socketChannel } count:2 type:NSObject_class_()]];
  return connected;
}

jboolean EduUmassCsNioNIOTransport_isNodeIDWithJavaNetInetSocketAddress_(EduUmassCsNioNIOTransport *self, JavaNetInetSocketAddress *isa_) {
  if (self->nodeConfig_ == nil) return false;
  for (id __strong node in nil_chk([self->nodeConfig_ getNodeIDs])) if ([((JavaNetInetAddress *) nil_chk([((JavaNetInetSocketAddress *) nil_chk(isa_)) getAddress])) isEqual:[self->nodeConfig_ getNodeAddressWithId:node]] && [isa_ getPort] == [self->nodeConfig_ getNodePortWithId:node]) return true;
  return false;
}

jboolean EduUmassCsNioNIOTransport_registerSSLWithJavaNioChannelsSelectionKey_withBoolean_(EduUmassCsNioNIOTransport *self, JavaNioChannelsSelectionKey *key, jboolean client) {
  return (EduUmassCsNioNIOTransport_isSSL(self)) ? [((EduUmassCsNioSSLDataProcessingWorker *) nil_chk(((EduUmassCsNioSSLDataProcessingWorker *) cast_chk(self->worker_, [EduUmassCsNioSSLDataProcessingWorker class])))) register__WithJavaNioChannelsSelectionKey:key withBoolean:client] : true;
}

void EduUmassCsNioNIOTransport_mainWithNSStringArray_(IOSObjectArray *args) {
  EduUmassCsNioNIOTransport_initialize();
  JavaUtilLoggingConsoleHandler *handler = create_JavaUtilLoggingConsoleHandler_init();
  [handler setLevelWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)];
  JavaUtilLoggingLogger *log = JavaUtilLoggingLogger_getLoggerWithNSString_([EduUmassCsNioNIOTransport_class_() getName]);
  [((JavaUtilLoggingLogger *) nil_chk(log)) addHandlerWithJavaUtilLoggingHandler:handler];
  [log setLevelWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO)];
  jint port = 2000;
  jint nNodes = 100;
  EduUmassCsNioNioutilsSampleNodeConfig *snc = create_EduUmassCsNioNioutilsSampleNodeConfig_initWithInt_(port);
  [snc localSetupWithInt:nNodes + 1];
  EduUmassCsNioNioutilsDataProcessingWorkerDefault *worker = create_EduUmassCsNioNioutilsDataProcessingWorkerDefault_init();
  IOSObjectArray *niots = [IOSObjectArray arrayWithLength:nNodes type:EduUmassCsNioNIOTransport_class_()];
  @try {
    jint smallNNodes = 2;
    for (jint i = 0; i < smallNNodes; i++) {
      IOSObjectArray_SetAndConsume(niots, i, new_EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_(JavaLangInteger_valueOfWithInt_(i), snc, worker));
      [create_JavaLangThread_initWithJavaLangRunnable_(IOSObjectArray_Get(niots, i)) start];
    }
    [((EduUmassCsNioNIOTransport *) nil_chk((IOSObjectArray_Get(niots, 1)))) sendWithId:JavaLangInteger_valueOfWithInt_(0) withByteArray:[@"Hello from 1 to 0" java_getBytes]];
    [((EduUmassCsNioNIOTransport *) nil_chk((IOSObjectArray_Get(niots, 0)))) sendWithId:JavaLangInteger_valueOfWithInt_(1) withByteArray:[@"Hello back from 0 to 1" java_getBytes]];
    [((EduUmassCsNioNIOTransport *) nil_chk((IOSObjectArray_Get(niots, 0)))) sendWithId:JavaLangInteger_valueOfWithInt_(1) withByteArray:[@"Second hello back from 0 to 1" java_getBytes]];
    @try {
      JavaLangThread_sleepWithLong_(1000);
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
    [((EduUmassCsNioNIOTransport *) nil_chk((IOSObjectArray_Get(niots, 0)))) sendWithId:JavaLangInteger_valueOfWithInt_(1) withByteArray:[@"Third hello back from 0 to 1" java_getBytes]];
    [((EduUmassCsNioNIOTransport *) nil_chk((IOSObjectArray_Get(niots, 1)))) sendWithId:JavaLangInteger_valueOfWithInt_(0) withByteArray:[@"Thank you for all the hellos back from 1 to 0" java_getBytes]];
    JavaLangThread_sleepWithLong_(2000);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\n\n\nBeginning test of random, sequential communication pattern"];
    JavaLangThread_sleepWithLong_(1000);
    for (jint i = smallNNodes; i < nNodes; i++) {
      IOSObjectArray_SetAndConsume(niots, i, new_EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_(JavaLangInteger_valueOfWithInt_(i), snc, worker));
      [create_JavaLangThread_initWithJavaLangRunnable_(IOSObjectArray_Get(niots, i)) start];
    }
    for (jint i = 0; i < nNodes; i++) {
      jint k = JreFpToInt((JavaLangMath_random() * nNodes));
      if (k >= nNodes) {
        k = nNodes - 1;
      }
      jint j = JreFpToInt((JavaLangMath_random() * nNodes));
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$I$I", @"Sending message ", i, @" from ", k, @" to ", j)];
      [((EduUmassCsNioNIOTransport *) nil_chk((IOSObjectArray_Get(niots, k)))) sendWithId:JavaLangInteger_valueOfWithInt_(j) withByteArray:[(JreStrcat("$I$I", @"Hello from ", k, @" to ", j)) java_getBytes]];
    }
    JavaLangThread_sleepWithLong_(1000);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"\n\n\nBeginning test of random, concurrent 1-to-1 communication pattern"];
    JavaLangThread_sleepWithLong_(1000);
    id<JavaUtilConcurrentScheduledExecutorService> execpool = JavaUtilConcurrentExecutors_newScheduledThreadPoolWithInt_(5);
    EduUmassCsNioNIOTransport *concurrentSender = create_EduUmassCsNioNIOTransport_initWithId_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioInterfacesDataProcessingWorker_(JavaLangInteger_valueOfWithInt_(nNodes), snc, worker);
    [create_JavaLangThread_initWithJavaLangRunnable_(concurrentSender) start];
    IOSObjectArray *futuresRandom = [IOSObjectArray arrayWithLength:nNodes type:JavaUtilConcurrentScheduledFuture_class_()];
    for (jint i = 0; i < nNodes; i++) {
      EduUmassCsNioNIOTransport_1TX *task = create_EduUmassCsNioNIOTransport_1TX_initWithEduUmassCsNioNIOTransport_withInt_(concurrentSender, 0);
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$", @"Scheduling random message ", i, @" from concurrentSender to 0")];
      IOSObjectArray_Set(futuresRandom, i, [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(execpool)) scheduleWithJavaLangRunnable:task withLong:0 withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]);
    }
    for (jint i = 0; i < nNodes; i++) {
      @try {
        [((id<JavaUtilConcurrentScheduledFuture>) nil_chk(IOSObjectArray_Get(futuresRandom, i))) get];
      }
      @catch (JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
      }
    }
    JavaLangThread_sleepWithLong_(1000);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"\n\n\nBeginning test of random, concurrent, any-to-any communication pattern"];
    JavaLangThread_sleepWithLong_(1000);
    jint load_ = nNodes * 50;
    IOSObjectArray *futures = [IOSObjectArray arrayWithLength:load_ type:JavaUtilConcurrentScheduledFuture_class_()];
    for (jint i = 0; i < load_; i++) {
      jint k = JreFpToInt((JavaLangMath_random() * nNodes));
      if (k >= nNodes) {
        k = nNodes - 1;
      }
      jint j = JreFpToInt((JavaLangMath_random() * nNodes));
      jlong millis = JreFpToLong((JavaLangMath_random() * 1000));
      if (i % 100 == 0) {
        j = nNodes;
      }
      EduUmassCsNioNIOTransport_1TX *task = create_EduUmassCsNioNIOTransport_1TX_initWithInt_withInt_withEduUmassCsNioNIOTransportArray_(k, j, niots);
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$I$I", @"Scheduling random message ", i, @" from ", k, @" to ", j)];
      IOSObjectArray_Set(futures, i, [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(execpool)) scheduleWithJavaLangRunnable:task withLong:millis withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]);
    }
    jint numExceptions = 0;
    for (jint i = 0; i < load_; i++) {
      @try {
        [((id<JavaUtilConcurrentScheduledFuture>) nil_chk(IOSObjectArray_Get(futures, i))) get];
      }
      @catch (JavaLangException *e) {
        numExceptions++;
      }
    }
    JavaLangThread_sleepWithLong_(4000);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"\n\n\nPrinting overall stats. Number of exceptions =  ", numExceptions)];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"NIO ", (create_EduUmassCsNioNioutilsNIOInstrumenter_init()))];
    {
      IOSObjectArray *a__ = niots;
      EduUmassCsNioNIOTransport * const *b__ = a__->buffer_;
      EduUmassCsNioNIOTransport * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduUmassCsNioNIOTransport *niot = *b__++;
        [((EduUmassCsNioNIOTransport *) nil_chk(niot)) stop];
      }
    }
    [concurrentSender stop];
    [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(execpool)) shutdown];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"\nTesting notes: The number of missing-or-batched messages should be small. The number of\n missing-or-batched messages may be nonzero as two back-to-back messages may get\n counted as one, as in the very first test above. With concurrent send tests or node failures,\n missing-or-batched may be a nontrivial fraction of totalSent. \nTBD: an exact success/failure outputting test. For now, try testing JSONNIOTransport instead."];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioNIOTransport)

@implementation EduUmassCsNioNIOTransport_AlternatingByteBuffer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduUmassCsNioNIOTransport_AlternatingByteBuffer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)clear {
  [((JavaNioByteBuffer *) nil_chk(self->headerBuf_)) clear];
  JreStrongAssign(&self->bodyBuf_, nil);
}

- (void)readHeaderWithJavaNioByteBuffer:(JavaNioByteBuffer *)incoming {
  if (JreLoadStatic(EduUmassCsNioNIOTransport, USE_PREAMBLE) && [((JavaNioByteBuffer *) nil_chk(headerBuf_)) position] < JavaLangInteger_BYTES) {
    EduUmassCsUtilsUtil_putWithJavaNioByteBuffer_withJavaNioByteBuffer_withInt_(self->headerBuf_, incoming, JavaLangInteger_BYTES - [((JavaNioByteBuffer *) nil_chk(self->headerBuf_)) position]);
    if ([self->headerBuf_ position] == JavaLangInteger_BYTES) {
      [self->headerBuf_ positionWithInt:0];
      jint firstInt = [self->headerBuf_ getInt];
      JreAssert(([self->headerBuf_ position] == JavaLangInteger_BYTES), (@"edu/umass/cs/nio/NIOTransport.java:584 condition failed: assert (this.headerBuf.position() == Integer.BYTES);"));
      if (firstInt != EduUmassCsNioNIOTransport_PREAMBLE) {
        JreAssert(((!EduUmassCsNioNIOTransport_outOfRangeWithInt_(firstInt))), (@"edu/umass/cs/nio/NIOTransport.java:588 condition failed: assert (!outOfRange(firstInt));"));
        [((JavaNioByteBuffer *) nil_chk([((JavaNioByteBuffer *) nil_chk(((JavaNioByteBuffer *) cast_chk([self->headerBuf_ clear], [JavaNioByteBuffer class])))) putIntWithInt:EduUmassCsNioNIOTransport_PREAMBLE])) putIntWithInt:firstInt];
      }
    }
  }
  else EduUmassCsUtilsUtil_putWithJavaNioByteBuffer_withJavaNioByteBuffer_(self->headerBuf_, incoming);
}

- (void)dealloc {
  RELEASE_(headerBuf_);
  RELEASE_(bodyBuf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(readHeaderWithJavaNioByteBuffer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "headerBuf_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bodyBuf_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readHeader", "LJavaNioByteBuffer;", "LEduUmassCsNioNIOTransport;" };
  static const J2ObjcClassInfo _EduUmassCsNioNIOTransport_AlternatingByteBuffer = { "AlternatingByteBuffer", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x1c, 3, 2, 2, -1, -1, -1, -1 };
  return &_EduUmassCsNioNIOTransport_AlternatingByteBuffer;
}

@end

void EduUmassCsNioNIOTransport_AlternatingByteBuffer_init(EduUmassCsNioNIOTransport_AlternatingByteBuffer *self) {
  NSObject_init(self);
  JreStrongAssign(&self->bodyBuf_, nil);
  JreStrongAssign(&self->headerBuf_, JavaNioByteBuffer_allocateWithInt_(JreLoadStatic(EduUmassCsNioNIOTransport, HEADER_SIZE)));
  JreStrongAssign(&self->bodyBuf_, nil);
}

EduUmassCsNioNIOTransport_AlternatingByteBuffer *new_EduUmassCsNioNIOTransport_AlternatingByteBuffer_init() {
  J2OBJC_NEW_IMPL(EduUmassCsNioNIOTransport_AlternatingByteBuffer, init)
}

EduUmassCsNioNIOTransport_AlternatingByteBuffer *create_EduUmassCsNioNIOTransport_AlternatingByteBuffer_init() {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNIOTransport_AlternatingByteBuffer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioNIOTransport_AlternatingByteBuffer)

@implementation EduUmassCsNioNIOTransport_SenderTask

- (instancetype)initWithEduUmassCsNioNIOTransport:(EduUmassCsNioNIOTransport *)outer$ {
  EduUmassCsNioNIOTransport_SenderTask_initWithEduUmassCsNioNIOTransport_(self, outer$);
  return self;
}

- (void)close {
  self->stopped_ = true;
}

- (void)addKeyWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  JreAssert(((key != nil)), (@"edu/umass/cs/nio/NIOTransport.java:815 condition failed: assert (key != null);"));
  if (![((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(self->selectedKeys_)) containsWithId:key]) {
    @try {
      [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(self->selectedKeys_)) offerWithId:key withLong:EduUmassCsNioNIOTransport_SenderTask_PO_TIMEOUT withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    }
    @catch (JavaLangInterruptedException *e) {
      [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
    }
  }
}

- (JavaNioChannelsSelectionKey *)pluckHead {
  @try {
    return [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(self->selectedKeys_)) pollWithLong:EduUmassCsNioNIOTransport_SenderTask_PO_TIMEOUT withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
  }
  @catch (JavaLangInterruptedException *e) {
    [((JavaLangInterruptedException *) nil_chk(e)) printStackTrace];
  }
  return nil;
}

- (void)run {
  JavaNioChannelsSelectionKey *key = nil;
  while (!stopped_) {
    if ((key = [self pluckHead]) != nil && [((JavaNioChannelsSelectionKey *) nil_chk(key)) isValid] && [key isWritable]) {
      @try {
        EduUmassCsNioNIOTransport_writeWithJavaNioChannelsSelectionKey_(this$0_, key);
      }
      @catch (JavaIoIOException *e) {
        EduUmassCsNioNIOTransport_updateFailedWithJavaNioChannelsSelectionKey_(this$0_, key);
        [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduUmassCsNioNIOTransport, log))) infoWithNSString:JreStrcat("@$@$", this$0_->myID_, @" incurred IOException on ", [((JavaNioChannelsSelectionKey *) nil_chk(key)) channel], @" likely because remote end closed connection")];
        EduUmassCsNioNIOTransport_cleanupSSLWithJavaNioChannelsSelectionKey_(this$0_, key);
        [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(selectedKeys_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaNioChannelsSelectionKey;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduUmassCsNioNIOTransport:);
  methods[1].selector = @selector(close);
  methods[2].selector = @selector(addKeyWithJavaNioChannelsSelectionKey:);
  methods[3].selector = @selector(pluckHead);
  methods[4].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduUmassCsNioNIOTransport;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "selectedKeys_", "LJavaUtilConcurrentLinkedBlockingQueue;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
    { "stopped_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PO_TIMEOUT", "J", .constantValue.asLong = EduUmassCsNioNIOTransport_SenderTask_PO_TIMEOUT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addKey", "LJavaNioChannelsSelectionKey;", "Ledu/umass/cs/nio/NIOTransport<TNodeIDType;>;", "Ljava/util/concurrent/LinkedBlockingQueue<Ljava/nio/channels/SelectionKey;>;", "LEduUmassCsNioNIOTransport;" };
  static const J2ObjcClassInfo _EduUmassCsNioNIOTransport_SenderTask = { "SenderTask", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x0, 5, 4, 4, -1, -1, -1, -1 };
  return &_EduUmassCsNioNIOTransport_SenderTask;
}

@end

void EduUmassCsNioNIOTransport_SenderTask_initWithEduUmassCsNioNIOTransport_(EduUmassCsNioNIOTransport_SenderTask *self, EduUmassCsNioNIOTransport *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaLangThread_init(self);
  JreStrongAssignAndConsume(&self->selectedKeys_, new_JavaUtilConcurrentLinkedBlockingQueue_init());
  self->stopped_ = false;
}

EduUmassCsNioNIOTransport_SenderTask *new_EduUmassCsNioNIOTransport_SenderTask_initWithEduUmassCsNioNIOTransport_(EduUmassCsNioNIOTransport *outer$) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNIOTransport_SenderTask, initWithEduUmassCsNioNIOTransport_, outer$)
}

EduUmassCsNioNIOTransport_SenderTask *create_EduUmassCsNioNIOTransport_SenderTask_initWithEduUmassCsNioNIOTransport_(EduUmassCsNioNIOTransport *outer$) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNIOTransport_SenderTask, initWithEduUmassCsNioNIOTransport_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioNIOTransport_SenderTask)

@implementation EduUmassCsNioNIOTransport_ChangeRequest

- (instancetype)initWithEduUmassCsNioNIOTransport:(EduUmassCsNioNIOTransport *)outer$
                 withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socket
                                          withInt:(jint)type
                                          withInt:(jint)ops {
  EduUmassCsNioNIOTransport_ChangeRequest_initWithEduUmassCsNioNIOTransport_withJavaNioChannelsSocketChannel_withInt_withInt_(self, outer$, socket, type, ops);
  return self;
}

- (NSString *)description {
  return JreStrcat("@CICI", socket_, ':', type_, ':', ops_);
}

- (void)dealloc {
  RELEASE_(socket_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduUmassCsNioNIOTransport:withJavaNioChannelsSocketChannel:withInt:withInt:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "REGISTER", "I", .constantValue.asInt = EduUmassCsNioNIOTransport_ChangeRequest_REGISTER, 0x18, -1, -1, -1, -1 },
    { "CHANGEOPS", "I", .constantValue.asInt = EduUmassCsNioNIOTransport_ChangeRequest_CHANGEOPS, 0x18, -1, -1, -1, -1 },
    { "socket_", "LJavaNioChannelsSocketChannel;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "ops_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNioChannelsSocketChannel;II", "toString", "LEduUmassCsNioNIOTransport;" };
  static const J2ObjcClassInfo _EduUmassCsNioNIOTransport_ChangeRequest = { "ChangeRequest", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x2, 2, 5, 2, -1, -1, -1, -1 };
  return &_EduUmassCsNioNIOTransport_ChangeRequest;
}

@end

void EduUmassCsNioNIOTransport_ChangeRequest_initWithEduUmassCsNioNIOTransport_withJavaNioChannelsSocketChannel_withInt_withInt_(EduUmassCsNioNIOTransport_ChangeRequest *self, EduUmassCsNioNIOTransport *outer$, JavaNioChannelsSocketChannel *socket, jint type, jint ops) {
  NSObject_init(self);
  JreStrongAssign(&self->socket_, socket);
  self->type_ = type;
  self->ops_ = ops;
}

EduUmassCsNioNIOTransport_ChangeRequest *new_EduUmassCsNioNIOTransport_ChangeRequest_initWithEduUmassCsNioNIOTransport_withJavaNioChannelsSocketChannel_withInt_withInt_(EduUmassCsNioNIOTransport *outer$, JavaNioChannelsSocketChannel *socket, jint type, jint ops) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNIOTransport_ChangeRequest, initWithEduUmassCsNioNIOTransport_withJavaNioChannelsSocketChannel_withInt_withInt_, outer$, socket, type, ops)
}

EduUmassCsNioNIOTransport_ChangeRequest *create_EduUmassCsNioNIOTransport_ChangeRequest_initWithEduUmassCsNioNIOTransport_withJavaNioChannelsSocketChannel_withInt_withInt_(EduUmassCsNioNIOTransport *outer$, JavaNioChannelsSocketChannel *socket, jint type, jint ops) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNIOTransport_ChangeRequest, initWithEduUmassCsNioNIOTransport_withJavaNioChannelsSocketChannel_withInt_withInt_, outer$, socket, type, ops)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioNIOTransport_ChangeRequest)

@implementation EduUmassCsNioNIOTransport_1TX

- (instancetype)initWithInt:(jint)i
                    withInt:(jint)id_
withEduUmassCsNioNIOTransportArray:(IOSObjectArray *)n {
  EduUmassCsNioNIOTransport_1TX_initWithInt_withInt_withEduUmassCsNioNIOTransportArray_(self, i, id_, n);
  return self;
}

- (instancetype)initWithEduUmassCsNioNIOTransport:(EduUmassCsNioNIOTransport *)niot
                                          withInt:(jint)id_ {
  EduUmassCsNioNIOTransport_1TX_initWithEduUmassCsNioNIOTransport_withInt_(self, niot, id_);
  return self;
}

- (void)run {
  @try {
    [((EduUmassCsNioNIOTransport *) nil_chk(sndr_)) sendWithId:JavaLangInteger_valueOfWithInt_(rcvr_) withByteArray:[(JreStrcat("$@$I", @"Hello from ", sndr_->myID_, @" to ", rcvr_)) java_getBytes]];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
}

- (void)dealloc {
  RELEASE_(sndr_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withEduUmassCsNioNIOTransportArray:);
  methods[1].selector = @selector(initWithEduUmassCsNioNIOTransport:withInt:);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sndr_", "LEduUmassCsNioNIOTransport;", .constantValue.asLong = 0, 0x0, -1, -1, 4, -1 },
    { "rcvr_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II[LEduUmassCsNioNIOTransport;", "(II[Ledu/umass/cs/nio/NIOTransport<*>;)V", "LEduUmassCsNioNIOTransport;I", "(Ledu/umass/cs/nio/NIOTransport<Ljava/lang/Integer;>;I)V", "Ledu/umass/cs/nio/NIOTransport<Ljava/lang/Integer;>;", "LEduUmassCsNioNIOTransport;", "mainWithNSStringArray:" };
  static const J2ObjcClassInfo _EduUmassCsNioNIOTransport_1TX = { "TX", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x0, 3, 2, 5, -1, 6, -1, -1 };
  return &_EduUmassCsNioNIOTransport_1TX;
}

@end

void EduUmassCsNioNIOTransport_1TX_initWithInt_withInt_withEduUmassCsNioNIOTransportArray_(EduUmassCsNioNIOTransport_1TX *self, jint i, jint id_, IOSObjectArray *n) {
  JavaUtilTimerTask_init(self);
  JreStrongAssign(&self->sndr_, nil);
  self->rcvr_ = -1;
  JreStrongAssign(&self->sndr_, (IOSObjectArray_Get(nil_chk(n), i)));
  self->rcvr_ = id_;
}

EduUmassCsNioNIOTransport_1TX *new_EduUmassCsNioNIOTransport_1TX_initWithInt_withInt_withEduUmassCsNioNIOTransportArray_(jint i, jint id_, IOSObjectArray *n) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNIOTransport_1TX, initWithInt_withInt_withEduUmassCsNioNIOTransportArray_, i, id_, n)
}

EduUmassCsNioNIOTransport_1TX *create_EduUmassCsNioNIOTransport_1TX_initWithInt_withInt_withEduUmassCsNioNIOTransportArray_(jint i, jint id_, IOSObjectArray *n) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNIOTransport_1TX, initWithInt_withInt_withEduUmassCsNioNIOTransportArray_, i, id_, n)
}

void EduUmassCsNioNIOTransport_1TX_initWithEduUmassCsNioNIOTransport_withInt_(EduUmassCsNioNIOTransport_1TX *self, EduUmassCsNioNIOTransport *niot, jint id_) {
  JavaUtilTimerTask_init(self);
  JreStrongAssign(&self->sndr_, nil);
  self->rcvr_ = -1;
  JreStrongAssign(&self->sndr_, niot);
  self->rcvr_ = id_;
}

EduUmassCsNioNIOTransport_1TX *new_EduUmassCsNioNIOTransport_1TX_initWithEduUmassCsNioNIOTransport_withInt_(EduUmassCsNioNIOTransport *niot, jint id_) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNIOTransport_1TX, initWithEduUmassCsNioNIOTransport_withInt_, niot, id_)
}

EduUmassCsNioNIOTransport_1TX *create_EduUmassCsNioNIOTransport_1TX_initWithEduUmassCsNioNIOTransport_withInt_(EduUmassCsNioNIOTransport *niot, jint id_) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNIOTransport_1TX, initWithEduUmassCsNioNIOTransport_withInt_, niot, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioNIOTransport_1TX)
