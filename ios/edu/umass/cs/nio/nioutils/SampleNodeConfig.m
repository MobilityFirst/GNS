//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../gig_ios/src/edu/umass/cs/nio/nioutils/SampleNodeConfig.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/umass/cs/nio/nioutils/SampleNodeConfig.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "org/json/JSONArray.h"

@interface EduUmassCsNioNioutilsSampleNodeConfig () {
 @public
  jboolean local_;
  JavaUtilHashMap *nmap_;
  jint defaultPort_;
}

@end

J2OBJC_FIELD_SETTER(EduUmassCsNioNioutilsSampleNodeConfig, nmap_, JavaUtilHashMap *)

@implementation EduUmassCsNioNioutilsSampleNodeConfig

- (instancetype)initWithInt:(jint)defaultPort {
  EduUmassCsNioNioutilsSampleNodeConfig_initWithInt_(self, defaultPort);
  return self;
}

- (instancetype)initWithInt:(jint)defaultPort
                    withInt:(jint)startNodeID
                    withInt:(jint)numLocalNodes {
  EduUmassCsNioNioutilsSampleNodeConfig_initWithInt_withInt_withInt_(self, defaultPort, startNodeID, numLocalNodes);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduUmassCsNioNioutilsSampleNodeConfig_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)localSetupWithJavaUtilSet:(id<JavaUtilSet>)members {
  local_ = true;
  for (id __strong member in nil_chk(members)) {
    [self addWithId:member withJavaNetInetAddress:EduUmassCsNioNioutilsSampleNodeConfig_getLocalAddress()];
  }
}

- (void)localSetupWithInt:(jint)startNodeID
                  withInt:(jint)nNodes {
  local_ = true;
  for (JavaLangInteger *i = JavaLangInteger_valueOfWithInt_(startNodeID); [i intValue] < nNodes + startNodeID; JreBoxedPostIncrInt(&i)) {
    [self addWithId:i withJavaNetInetAddress:EduUmassCsNioNioutilsSampleNodeConfig_getLocalAddress()];
  }
}

- (void)localSetupWithInt:(jint)nNodes {
  [self localSetupWithInt:0 withInt:nNodes];
}

- (jboolean)nodeExistsWithId:(id)ID {
  return [((JavaUtilHashMap *) nil_chk(nmap_)) containsKeyWithId:ID];
}

- (id<JavaUtilSet>)getNodeIDs {
  return [((JavaUtilHashMap *) nil_chk(self->nmap_)) keySet];
}

- (JavaNetInetAddress *)getNodeAddressWithId:(id)ID {
  JavaNetInetAddress *addr = [((JavaUtilHashMap *) nil_chk(nmap_)) getWithId:ID];
  return addr != nil ? addr : (local_ ? EduUmassCsNioNioutilsSampleNodeConfig_getLocalAddress() : nil);
}

- (JavaNetInetAddress *)getBindAddressWithId:(id)ID {
  JavaNetInetAddress *addr = [((JavaUtilHashMap *) nil_chk(nmap_)) getWithId:ID];
  return addr != nil ? addr : (local_ ? EduUmassCsNioNioutilsSampleNodeConfig_getLocalAddress() : nil);
}

- (jint)getNodePortWithId:(id)ID {
  jint maxPort = 65536;
  jint port = ID != nil ? ((defaultPort_ + ((jint) [ID hash])) % maxPort) : 0;
  if (port < 0) {
    port = (port + maxPort) % maxPort;
  }
  return port;
}

+ (jint)getPortWithInt:(jint)ID {
  return EduUmassCsNioNioutilsSampleNodeConfig_getPortWithInt_(ID);
}

- (id<JavaUtilSet>)getNodes {
  return [((JavaUtilHashMap *) nil_chk(nmap_)) keySet];
}

- (void)addWithId:(id)id_
withJavaNetInetAddress:(JavaNetInetAddress *)IP {
  [((JavaUtilHashMap *) nil_chk(nmap_)) putWithId:id_ withId:IP];
}

- (void)addLocalWithId:(id)id_ {
  local_ = true;
  [self addWithId:id_ withJavaNetInetAddress:EduUmassCsNioNioutilsSampleNodeConfig_getLocalAddress()];
}

- (NSString *)description {
  NSString *s = @"";
  for (id __strong i in nil_chk([((JavaUtilHashMap *) nil_chk(nmap_)) keySet])) {
    JreStrAppend(&s, "@$@CIC", i, @" : ", [self getNodeAddressWithId:i], ':', [self getNodePortWithId:i], 0x000a);
  }
  return s;
}

- (id)valueOfWithNSString:(NSString *)nodeAsString {
  id node = nil;
  id<JavaUtilIterator> nodeIter = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(self->nmap_)) keySet])) iterator];
  if ([((id<JavaUtilIterator>) nil_chk(nodeIter)) hasNext] && (node = [nodeIter next]) != nil) {
    if ([node isKindOfClass:[NSString class]] && [((JavaUtilHashMap *) nil_chk(self->nmap_)) containsKeyWithId:nodeAsString]) {
      return nodeAsString;
    }
    else if ([node isKindOfClass:[JavaLangInteger class]]) {
      return (JavaLangInteger_valueOfWithNSString_([((NSString *) nil_chk(nodeAsString)) java_trim]));
    }
    else if ([node isKindOfClass:[JavaNetInetAddress class]]) {
      @try {
        return (JavaNetInetAddress_getByNameWithNSString_([((NSString *) nil_chk(nodeAsString)) java_trim]));
      }
      @catch (JavaNetUnknownHostException *e) {
        [((JavaNetUnknownHostException *) nil_chk(e)) printStackTrace];
      }
    }
  }
  return nil;
}

- (id<JavaUtilSet>)getValuesFromStringSetWithJavaUtilSet:(id<JavaUtilSet>)strNodes {
  id<JavaUtilSet> nodes = create_JavaUtilHashSet_init();
  for (NSString * __strong strNode in nil_chk(strNodes)) {
    [nodes addWithId:[self valueOfWithNSString:strNode]];
  }
  return nodes;
}

- (id<JavaUtilSet>)getValuesFromJSONArrayWithOrgJsonJSONArray:(OrgJsonJSONArray *)array {
  id<JavaUtilSet> nodes = create_JavaUtilHashSet_init();
  for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(array)) length]; i++) {
    [nodes addWithId:[self valueOfWithNSString:[array getStringWithInt:i]]];
  }
  return nodes;
}

+ (JavaNetInetAddress *)getLocalAddress {
  return EduUmassCsNioNioutilsSampleNodeConfig_getLocalAddress();
}

- (void)clear {
  [((JavaUtilHashMap *) nil_chk(self->nmap_)) clear];
}

- (void)dealloc {
  RELEASE_(nmap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 2, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, 10, 7, -1, 11, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, 12, 7, -1, 11, -1, -1 },
    { NULL, "I", 0x1, 13, 7, -1, 14, -1, -1 },
    { NULL, "I", 0x9, 15, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x1, 19, 7, -1, 20, -1, -1 },
    { NULL, "LNSString;", 0x1, 21, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 23, -1, 24, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 25, 3, -1, 26, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 27, 28, 29, 30, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(localSetupWithJavaUtilSet:);
  methods[4].selector = @selector(localSetupWithInt:withInt:);
  methods[5].selector = @selector(localSetupWithInt:);
  methods[6].selector = @selector(nodeExistsWithId:);
  methods[7].selector = @selector(getNodeIDs);
  methods[8].selector = @selector(getNodeAddressWithId:);
  methods[9].selector = @selector(getBindAddressWithId:);
  methods[10].selector = @selector(getNodePortWithId:);
  methods[11].selector = @selector(getPortWithInt:);
  methods[12].selector = @selector(getNodes);
  methods[13].selector = @selector(addWithId:withJavaNetInetAddress:);
  methods[14].selector = @selector(addLocalWithId:);
  methods[15].selector = @selector(description);
  methods[16].selector = @selector(valueOfWithNSString:);
  methods[17].selector = @selector(getValuesFromStringSetWithJavaUtilSet:);
  methods[18].selector = @selector(getValuesFromJSONArrayWithOrgJsonJSONArray:);
  methods[19].selector = @selector(getLocalAddress);
  methods[20].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_START_PORT", "I", .constantValue.asInt = EduUmassCsNioNioutilsSampleNodeConfig_DEFAULT_START_PORT, 0x19, -1, -1, -1, -1 },
    { "local_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nmap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 31, -1 },
    { "defaultPort_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "III", "localSetup", "LJavaUtilSet;", "(Ljava/util/Set<TNodeIDType;>;)V", "II", "nodeExists", "LNSObject;", "(TNodeIDType;)Z", "()Ljava/util/Set<TNodeIDType;>;", "getNodeAddress", "(TNodeIDType;)Ljava/net/InetAddress;", "getBindAddress", "getNodePort", "(TNodeIDType;)I", "getPort", "add", "LNSObject;LJavaNetInetAddress;", "(TNodeIDType;Ljava/net/InetAddress;)V", "addLocal", "(TNodeIDType;)V", "toString", "valueOf", "LNSString;", "(Ljava/lang/String;)TNodeIDType;", "getValuesFromStringSet", "(Ljava/util/Set<Ljava/lang/String;>;)Ljava/util/Set<TNodeIDType;>;", "getValuesFromJSONArray", "LOrgJsonJSONArray;", "LOrgJsonJSONException;", "(Lorg/json/JSONArray;)Ljava/util/Set<TNodeIDType;>;", "Ljava/util/HashMap<TNodeIDType;Ljava/net/InetAddress;>;", "LEduUmassCsNioNioutilsSampleNodeConfig_Main;", "<NodeIDType:Ljava/lang/Object;>Ljava/lang/Object;Ledu/umass/cs/nio/interfaces/NodeConfig<TNodeIDType;>;" };
  static const J2ObjcClassInfo _EduUmassCsNioNioutilsSampleNodeConfig = { "SampleNodeConfig", "edu.umass.cs.nio.nioutils", ptrTable, methods, fields, 7, 0x1, 21, 4, -1, 32, -1, 33, -1 };
  return &_EduUmassCsNioNioutilsSampleNodeConfig;
}

@end

void EduUmassCsNioNioutilsSampleNodeConfig_initWithInt_(EduUmassCsNioNioutilsSampleNodeConfig *self, jint defaultPort) {
  NSObject_init(self);
  self->local_ = false;
  JreStrongAssignAndConsume(&self->nmap_, new_JavaUtilHashMap_init());
  self->defaultPort_ = defaultPort;
}

EduUmassCsNioNioutilsSampleNodeConfig *new_EduUmassCsNioNioutilsSampleNodeConfig_initWithInt_(jint defaultPort) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNioutilsSampleNodeConfig, initWithInt_, defaultPort)
}

EduUmassCsNioNioutilsSampleNodeConfig *create_EduUmassCsNioNioutilsSampleNodeConfig_initWithInt_(jint defaultPort) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNioutilsSampleNodeConfig, initWithInt_, defaultPort)
}

void EduUmassCsNioNioutilsSampleNodeConfig_initWithInt_withInt_withInt_(EduUmassCsNioNioutilsSampleNodeConfig *self, jint defaultPort, jint startNodeID, jint numLocalNodes) {
  NSObject_init(self);
  self->local_ = false;
  JreStrongAssignAndConsume(&self->nmap_, new_JavaUtilHashMap_init());
  self->defaultPort_ = defaultPort;
  [self localSetupWithInt:startNodeID withInt:numLocalNodes];
}

EduUmassCsNioNioutilsSampleNodeConfig *new_EduUmassCsNioNioutilsSampleNodeConfig_initWithInt_withInt_withInt_(jint defaultPort, jint startNodeID, jint numLocalNodes) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNioutilsSampleNodeConfig, initWithInt_withInt_withInt_, defaultPort, startNodeID, numLocalNodes)
}

EduUmassCsNioNioutilsSampleNodeConfig *create_EduUmassCsNioNioutilsSampleNodeConfig_initWithInt_withInt_withInt_(jint defaultPort, jint startNodeID, jint numLocalNodes) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNioutilsSampleNodeConfig, initWithInt_withInt_withInt_, defaultPort, startNodeID, numLocalNodes)
}

void EduUmassCsNioNioutilsSampleNodeConfig_init(EduUmassCsNioNioutilsSampleNodeConfig *self) {
  EduUmassCsNioNioutilsSampleNodeConfig_initWithInt_(self, EduUmassCsNioNioutilsSampleNodeConfig_DEFAULT_START_PORT);
}

EduUmassCsNioNioutilsSampleNodeConfig *new_EduUmassCsNioNioutilsSampleNodeConfig_init() {
  J2OBJC_NEW_IMPL(EduUmassCsNioNioutilsSampleNodeConfig, init)
}

EduUmassCsNioNioutilsSampleNodeConfig *create_EduUmassCsNioNioutilsSampleNodeConfig_init() {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNioutilsSampleNodeConfig, init)
}

jint EduUmassCsNioNioutilsSampleNodeConfig_getPortWithInt_(jint ID) {
  EduUmassCsNioNioutilsSampleNodeConfig_initialize();
  jint maxPort = 65536;
  jint port = (EduUmassCsNioNioutilsSampleNodeConfig_DEFAULT_START_PORT + ID) % maxPort;
  if (port < 0) port = (port + maxPort) % maxPort;
  return port;
}

JavaNetInetAddress *EduUmassCsNioNioutilsSampleNodeConfig_getLocalAddress() {
  EduUmassCsNioNioutilsSampleNodeConfig_initialize();
  JavaNetInetAddress *localAddr = nil;
  @try {
    localAddr = JavaNetInetAddress_getByNameWithNSString_(@"localhost");
  }
  @catch (JavaNetUnknownHostException *e) {
    [((JavaNetUnknownHostException *) nil_chk(e)) printStackTrace];
  }
  return localAddr;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioNioutilsSampleNodeConfig)

@implementation EduUmassCsNioNioutilsSampleNodeConfig_Main

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduUmassCsNioNioutilsSampleNodeConfig_Main_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduUmassCsNioNioutilsSampleNodeConfig_Main_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "main", "[LNSString;", "LEduUmassCsNioNioutilsSampleNodeConfig;" };
  static const J2ObjcClassInfo _EduUmassCsNioNioutilsSampleNodeConfig_Main = { "Main", "edu.umass.cs.nio.nioutils", ptrTable, methods, NULL, 7, 0x8, 2, 0, 2, -1, -1, -1, -1 };
  return &_EduUmassCsNioNioutilsSampleNodeConfig_Main;
}

@end

void EduUmassCsNioNioutilsSampleNodeConfig_Main_init(EduUmassCsNioNioutilsSampleNodeConfig_Main *self) {
  NSObject_init(self);
}

EduUmassCsNioNioutilsSampleNodeConfig_Main *new_EduUmassCsNioNioutilsSampleNodeConfig_Main_init() {
  J2OBJC_NEW_IMPL(EduUmassCsNioNioutilsSampleNodeConfig_Main, init)
}

EduUmassCsNioNioutilsSampleNodeConfig_Main *create_EduUmassCsNioNioutilsSampleNodeConfig_Main_init() {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNioutilsSampleNodeConfig_Main, init)
}

void EduUmassCsNioNioutilsSampleNodeConfig_Main_mainWithNSStringArray_(IOSObjectArray *args) {
  EduUmassCsNioNioutilsSampleNodeConfig_Main_initialize();
  jint dp = (((IOSObjectArray *) nil_chk(args))->size_ > 0 ? [((JavaLangInteger *) nil_chk(JavaLangInteger_valueOfWithNSString_(IOSObjectArray_Get(args, 0)))) intValue] : 2222);
  EduUmassCsNioNioutilsSampleNodeConfig *snc = create_EduUmassCsNioNioutilsSampleNodeConfig_initWithInt_(dp);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Adding node 0, printing nodes 0 and 1"];
  @try {
    [snc addWithId:JavaLangInteger_valueOfWithInt_(0) withJavaNetInetAddress:JavaNetInetAddress_getByNameWithNSString_(@"localhost")];
  }
  @catch (JavaNetUnknownHostException *e) {
    [((JavaNetUnknownHostException *) nil_chk(e)) printStackTrace];
  }
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@CI", @"0 : ", [snc getNodeAddressWithId:JavaLangInteger_valueOfWithInt_(0)], ':', [snc getNodePortWithId:JavaLangInteger_valueOfWithInt_(0)])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@CI", @"1 : ", [snc getNodeAddressWithId:JavaLangInteger_valueOfWithInt_(1)], ':', [snc getNodePortWithId:JavaLangInteger_valueOfWithInt_(1)])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioNioutilsSampleNodeConfig_Main)
