//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../gig_ios/src/edu/umass/cs/nio/nioutils/NIOHeader.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/umass/cs/nio/nioutils/NIOHeader.h"
#include "java/lang/Short.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/nio/ByteBuffer.h"

NSString *EduUmassCsNioNioutilsNIOHeader_CHARSET = @"ISO-8859-1";

@implementation EduUmassCsNioNioutilsNIOHeader

- (instancetype)initWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)sndr
                    withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)rcvr {
  EduUmassCsNioNioutilsNIOHeader_initWithJavaNetInetSocketAddress_withJavaNetInetSocketAddress_(self, sndr, rcvr);
  return self;
}

+ (EduUmassCsNioNioutilsNIOHeader *)getNIOHeaderWithByteArray:(IOSByteArray *)bytes {
  return EduUmassCsNioNioutilsNIOHeader_getNIOHeaderWithByteArray_(bytes);
}

- (NSString *)description {
  return JreStrcat("@$@", sndr_, @"->", rcvr_);
}

- (IOSByteArray *)toBytes {
  JavaNioByteBuffer *bbuf = JavaNioByteBuffer_wrapWithByteArray_([IOSByteArray arrayWithLength:12]);
  [((JavaNioByteBuffer *) nil_chk(bbuf)) putWithByteArray:self->sndr_ != nil ? [((JavaNetInetAddress *) nil_chk([self->sndr_ getAddress])) getAddress] : [IOSByteArray arrayWithLength:4]];
  [bbuf putShortWithShort:self->sndr_ != nil ? (jshort) [self->sndr_ getPort] : 0];
  [bbuf putWithByteArray:self->rcvr_ != nil ? [((JavaNetInetAddress *) nil_chk([self->rcvr_ getAddress])) getAddress] : [IOSByteArray arrayWithLength:4]];
  [bbuf putShortWithShort:self->rcvr_ != nil ? (jshort) [self->rcvr_ getPort] : 0];
  return [bbuf array];
}

- (void)dealloc {
  RELEASE_(sndr_);
  RELEASE_(rcvr_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduUmassCsNioNioutilsNIOHeader;", 0x9, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaNetInetSocketAddress:withJavaNetInetSocketAddress:);
  methods[1].selector = @selector(getNIOHeaderWithByteArray:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(toBytes);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BYTES", "I", .constantValue.asInt = EduUmassCsNioNioutilsNIOHeader_BYTES, 0x19, -1, -1, -1, -1 },
    { "sndr_", "LJavaNetInetSocketAddress;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "rcvr_", "LJavaNetInetSocketAddress;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "CHARSET", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetInetSocketAddress;LJavaNetInetSocketAddress;", "getNIOHeader", "[B", "LJavaNetUnknownHostException;", "toString", &EduUmassCsNioNioutilsNIOHeader_CHARSET };
  static const J2ObjcClassInfo _EduUmassCsNioNioutilsNIOHeader = { "NIOHeader", "edu.umass.cs.nio.nioutils", ptrTable, methods, fields, 7, 0x1, 4, 4, -1, -1, -1, -1, -1 };
  return &_EduUmassCsNioNioutilsNIOHeader;
}

@end

void EduUmassCsNioNioutilsNIOHeader_initWithJavaNetInetSocketAddress_withJavaNetInetSocketAddress_(EduUmassCsNioNioutilsNIOHeader *self, JavaNetInetSocketAddress *sndr, JavaNetInetSocketAddress *rcvr) {
  NSObject_init(self);
  JreStrongAssign(&self->sndr_, sndr);
  JreStrongAssign(&self->rcvr_, rcvr);
}

EduUmassCsNioNioutilsNIOHeader *new_EduUmassCsNioNioutilsNIOHeader_initWithJavaNetInetSocketAddress_withJavaNetInetSocketAddress_(JavaNetInetSocketAddress *sndr, JavaNetInetSocketAddress *rcvr) {
  J2OBJC_NEW_IMPL(EduUmassCsNioNioutilsNIOHeader, initWithJavaNetInetSocketAddress_withJavaNetInetSocketAddress_, sndr, rcvr)
}

EduUmassCsNioNioutilsNIOHeader *create_EduUmassCsNioNioutilsNIOHeader_initWithJavaNetInetSocketAddress_withJavaNetInetSocketAddress_(JavaNetInetSocketAddress *sndr, JavaNetInetSocketAddress *rcvr) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioNioutilsNIOHeader, initWithJavaNetInetSocketAddress_withJavaNetInetSocketAddress_, sndr, rcvr)
}

EduUmassCsNioNioutilsNIOHeader *EduUmassCsNioNioutilsNIOHeader_getNIOHeaderWithByteArray_(IOSByteArray *bytes) {
  EduUmassCsNioNioutilsNIOHeader_initialize();
  JavaNioByteBuffer *bbuf = JavaNioByteBuffer_wrapWithByteArray_withInt_withInt_(bytes, 0, 12);
  IOSByteArray *sip = [IOSByteArray arrayWithLength:4];
  [((JavaNioByteBuffer *) nil_chk(bbuf)) getWithByteArray:sip withInt:0 withInt:4];
  jint sport = (jint) [bbuf getShort];
  if (sport < 0) sport += 2 * (JavaLangShort_MAX_VALUE + 1);
  IOSByteArray *dip = [IOSByteArray arrayWithLength:4];
  [bbuf getWithByteArray:dip withInt:0 withInt:4];
  jint dport = (jint) [bbuf getShort];
  if (dport < 0) dport += 2 * (JavaLangShort_MAX_VALUE + 1);
  return create_EduUmassCsNioNioutilsNIOHeader_initWithJavaNetInetSocketAddress_withJavaNetInetSocketAddress_(create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(JavaNetInetAddress_getByAddressWithByteArray_(sip), sport), create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(JavaNetInetAddress_getByAddressWithByteArray_(dip), dport));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioNioutilsNIOHeader)
