//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../gig_ios/src/edu/umass/cs/nio/JSONMessenger.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/umass/cs/nio/AbstractPacketDemultiplexer.h"
#include "edu/umass/cs/nio/GenericMessagingTask.h"
#include "edu/umass/cs/nio/JSONMessenger.h"
#include "edu/umass/cs/nio/MessageNIOTransport.h"
#include "edu/umass/cs/nio/NIOTransport.h"
#include "edu/umass/cs/nio/SSLDataProcessingWorker.h"
#include "edu/umass/cs/nio/interfaces/AddressMessenger.h"
#include "edu/umass/cs/nio/interfaces/Byteable.h"
#include "edu/umass/cs/nio/interfaces/InterfaceNIOTransport.h"
#include "edu/umass/cs/nio/interfaces/NodeConfig.h"
#include "edu/umass/cs/utils/Stringer.h"
#include "edu/umass/cs/utils/Summarizable.h"
#include "edu/umass/cs/utils/Util.h"
#include "java/io/IOException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/nio/channels/ClosedByInterruptException.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/ScheduledExecutorService.h"
#include "java/util/concurrent/ScheduledFuture.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/json/JSONObject.h"

@interface EduUmassCsNioJSONMessenger () {
 @public
  id<EduUmassCsNioInterfacesInterfaceNIOTransport> nioTransport_;
  id<EduUmassCsNioInterfacesAddressMessenger> clientMessenger_;
  id<EduUmassCsNioInterfacesAddressMessenger> sslClientMessenger_;
  IOSObjectArray *workers_;
  JavaUtilLoggingLogger *log_;
}

- (jint)specialCaseSendWithId:(id)id_
                withByteArray:(IOSByteArray *)msgBytes
                  withBoolean:(jboolean)useWorkers;

- (jint)sendToIDWithId:(id)id_
         withByteArray:(IOSByteArray *)msgBytes
           withBoolean:(jboolean)useWorkers;

- (id<EduUmassCsNioInterfacesAddressMessenger>)getClientMessengerInternal;

- (id<EduUmassCsNioInterfacesAddressMessenger>)getSSLClientMessengerInternal;

@end

J2OBJC_FIELD_SETTER(EduUmassCsNioJSONMessenger, nioTransport_, id<EduUmassCsNioInterfacesInterfaceNIOTransport>)
J2OBJC_FIELD_SETTER(EduUmassCsNioJSONMessenger, clientMessenger_, id<EduUmassCsNioInterfacesAddressMessenger>)
J2OBJC_FIELD_SETTER(EduUmassCsNioJSONMessenger, sslClientMessenger_, id<EduUmassCsNioInterfacesAddressMessenger>)
J2OBJC_FIELD_SETTER(EduUmassCsNioJSONMessenger, workers_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(EduUmassCsNioJSONMessenger, log_, JavaUtilLoggingLogger *)

inline jlong EduUmassCsNioJSONMessenger_get_RTX_DELAY();
#define EduUmassCsNioJSONMessenger_RTX_DELAY 1000LL
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsNioJSONMessenger, RTX_DELAY, jlong)

inline jint EduUmassCsNioJSONMessenger_get_BACKOFF_FACTOR();
#define EduUmassCsNioJSONMessenger_BACKOFF_FACTOR 2
J2OBJC_STATIC_FIELD_CONSTANT(EduUmassCsNioJSONMessenger, BACKOFF_FACTOR, jint)

__attribute__((unused)) static jint EduUmassCsNioJSONMessenger_specialCaseSendWithId_withByteArray_withBoolean_(EduUmassCsNioJSONMessenger *self, id id_, IOSByteArray *msgBytes, jboolean useWorkers);

__attribute__((unused)) static jint EduUmassCsNioJSONMessenger_sendToIDWithId_withByteArray_withBoolean_(EduUmassCsNioJSONMessenger *self, id id_, IOSByteArray *msgBytes, jboolean useWorkers);

__attribute__((unused)) static id<EduUmassCsNioInterfacesAddressMessenger> EduUmassCsNioJSONMessenger_getClientMessengerInternal(EduUmassCsNioJSONMessenger *self);

__attribute__((unused)) static id<EduUmassCsNioInterfacesAddressMessenger> EduUmassCsNioJSONMessenger_getSSLClientMessengerInternal(EduUmassCsNioJSONMessenger *self);

@interface EduUmassCsNioJSONMessenger_1 : NSObject < JavaUtilConcurrentThreadFactory > {
 @public
  id<EduUmassCsNioInterfacesInterfaceNIOTransport> val$niot_;
}

- (instancetype)initWithEduUmassCsNioInterfacesInterfaceNIOTransport:(id<EduUmassCsNioInterfacesInterfaceNIOTransport>)capture$0;

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUmassCsNioJSONMessenger_1)

__attribute__((unused)) static void EduUmassCsNioJSONMessenger_1_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_(EduUmassCsNioJSONMessenger_1 *self, id<EduUmassCsNioInterfacesInterfaceNIOTransport> capture$0);

__attribute__((unused)) static EduUmassCsNioJSONMessenger_1 *new_EduUmassCsNioJSONMessenger_1_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_(id<EduUmassCsNioInterfacesInterfaceNIOTransport> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsNioJSONMessenger_1 *create_EduUmassCsNioJSONMessenger_1_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_(id<EduUmassCsNioInterfacesInterfaceNIOTransport> capture$0);

@interface EduUmassCsNioJSONMessenger_Retransmitter : NSObject < JavaLangRunnable > {
 @public
  EduUmassCsNioJSONMessenger *this$0_;
  id dest_;
  IOSByteArray *msg_;
  jlong delay_;
  jboolean useWorkers_;
}

- (instancetype)initWithEduUmassCsNioJSONMessenger:(EduUmassCsNioJSONMessenger *)outer$
                                            withId:(id)id_
                                     withByteArray:(IOSByteArray *)m
                                          withLong:(jlong)d
                                       withBoolean:(jboolean)useWorkers;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUmassCsNioJSONMessenger_Retransmitter)

J2OBJC_FIELD_SETTER(EduUmassCsNioJSONMessenger_Retransmitter, dest_, id)
J2OBJC_FIELD_SETTER(EduUmassCsNioJSONMessenger_Retransmitter, msg_, IOSByteArray *)

__attribute__((unused)) static void EduUmassCsNioJSONMessenger_Retransmitter_initWithEduUmassCsNioJSONMessenger_withId_withByteArray_withLong_withBoolean_(EduUmassCsNioJSONMessenger_Retransmitter *self, EduUmassCsNioJSONMessenger *outer$, id id_, IOSByteArray *m, jlong d, jboolean useWorkers);

__attribute__((unused)) static EduUmassCsNioJSONMessenger_Retransmitter *new_EduUmassCsNioJSONMessenger_Retransmitter_initWithEduUmassCsNioJSONMessenger_withId_withByteArray_withLong_withBoolean_(EduUmassCsNioJSONMessenger *outer$, id id_, IOSByteArray *m, jlong d, jboolean useWorkers) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduUmassCsNioJSONMessenger_Retransmitter *create_EduUmassCsNioJSONMessenger_Retransmitter_initWithEduUmassCsNioJSONMessenger_withId_withByteArray_withLong_withBoolean_(EduUmassCsNioJSONMessenger *outer$, id id_, IOSByteArray *m, jlong d, jboolean useWorkers);

J2OBJC_TYPE_LITERAL_HEADER(EduUmassCsNioJSONMessenger_Retransmitter)

NSString *EduUmassCsNioJSONMessenger_SENT_TIME = @"SENT_TIME";

@implementation EduUmassCsNioJSONMessenger

- (instancetype)initWithEduUmassCsNioInterfacesInterfaceNIOTransport:(id<EduUmassCsNioInterfacesInterfaceNIOTransport>)niot {
  EduUmassCsNioJSONMessenger_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_(self, niot);
  return self;
}

- (instancetype)initWithEduUmassCsNioInterfacesInterfaceNIOTransport:(id<EduUmassCsNioInterfacesInterfaceNIOTransport>)niot
                                                             withInt:(jint)numWorkers {
  EduUmassCsNioJSONMessenger_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_withInt_(self, niot, numWorkers);
  return self;
}

- (void)sendWithEduUmassCsNioGenericMessagingTask:(EduUmassCsNioGenericMessagingTask *)mtask {
  [self sendWithEduUmassCsNioGenericMessagingTask:mtask withBoolean:false];
}

- (void)sendWithEduUmassCsNioGenericMessagingTask:(EduUmassCsNioGenericMessagingTask *)mtask
                                      withBoolean:(jboolean)useWorkers {
  if (mtask == nil || mtask->recipients_ == nil || mtask->msgs_ == nil) {
    return;
  }
  JavaIoIOException *thrown = nil;
  {
    IOSObjectArray *a__ = mtask->msgs_;
    id const *b__ = a__->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id msg = *b__++;
      if (msg == nil) {
        JreAssert((false), (@"edu/umass/cs/nio/JSONMessenger.java:109 condition failed: assert (false);"));
        continue;
      }
      NSString *message = nil;
      @try {
        if ([msg isKindOfClass:[OrgJsonJSONObject class]]) {
          message = [((OrgJsonJSONObject *) cast_chk((msg), [OrgJsonJSONObject class])) description];
        }
        else if (!([msg isKindOfClass:[IOSByteArray class]] && [EduUmassCsNioInterfacesByteable_class_() isInstance:msg])) message = [msg description];
      }
      @catch (JavaLangException *je) {
        [((JavaUtilLoggingLogger *) nil_chk(log_)) severeWithNSString:JreStrcat("$@$@", @"JSONMessenger", [self getMyID], @" incurred exception while decoding: ", msg)];
        @throw (je);
      }
      IOSByteArray *msgBytes = [msg isKindOfClass:[IOSByteArray class]] ? (IOSByteArray *) cast_chk(msg, [IOSByteArray class]) : [EduUmassCsNioInterfacesByteable_class_() isInstance:msg] ? [((id<EduUmassCsNioInterfacesByteable>) cast_check(msg, EduUmassCsNioInterfacesByteable_class_())) toBytes] : [((NSString *) nil_chk(message)) java_getBytesWithCharsetName:EduUmassCsNioMessageNIOTransport_NIO_CHARSET_ENCODING];
      for (jint r = 0; r < mtask->recipients_->size_; r++) {
        jint sent = -1;
        @try {
          sent = EduUmassCsNioJSONMessenger_specialCaseSendWithId_withByteArray_withBoolean_(self, IOSObjectArray_Get(mtask->recipients_, r), msgBytes, useWorkers);
        }
        @catch (JavaIoIOException *e) {
          if (([e isKindOfClass:[JavaNioChannelsClosedByInterruptException class]])) @throw e;
          [((JavaIoIOException *) nil_chk(e)) printStackTrace];
          thrown = e;
          continue;
        }
        JavaUtilLoggingLevel *level;
        if (sent > 0) {
          JavaUtilLoggingLevel *unseq$1 = level = JreLoadStatic(JavaUtilLoggingLevel, FINEST);
          [((JavaUtilLoggingLogger *) nil_chk(log_)) logWithJavaUtilLoggingLevel:unseq$1 withNSString:@"{0}->{1}:[{2}] " withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, IOSObjectArray_Get(mtask->recipients_, r), [log_ isLoggableWithJavaUtilLoggingLevel:level] ? ([EduUmassCsUtilsSummarizable_class_() isInstance:msg] ? [((id<EduUmassCsUtilsSummarizable>) cast_check(msg, EduUmassCsUtilsSummarizable_class_())) getSummaryWithBoolean:[((JavaUtilLoggingLogger *) nil_chk(log_)) isLoggableWithJavaUtilLoggingLevel:level]] : message != nil ? EduUmassCsUtilsUtil_truncateWithId_withInt_withInt_(message, 32, 32) : EduUmassCsUtilsUtil_truncateWithId_withInt_withInt_(create_EduUmassCsUtilsStringer_initWithByteArray_(msgBytes), 32, 32)) : msgBytes } count:3 type:NSObject_class_()]];
        }
        else if (sent == 0) {
          [((JavaUtilLoggingLogger *) nil_chk(log_)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:@"{0} experiencing congestion; this is not disastrous (yet)" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self } count:1 type:NSObject_class_()]];
          EduUmassCsNioJSONMessenger_Retransmitter *rtxTask = create_EduUmassCsNioJSONMessenger_Retransmitter_initWithEduUmassCsNioJSONMessenger_withId_withByteArray_withLong_withBoolean_(self, (IOSObjectArray_Get(mtask->recipients_, r)), msgBytes, EduUmassCsNioJSONMessenger_RTX_DELAY, useWorkers);
          [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(execpool_)) scheduleWithJavaLangRunnable:rtxTask withLong:EduUmassCsNioJSONMessenger_RTX_DELAY withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
        }
        else {
          JreAssert((sent == -1), (JavaLangInteger_valueOfWithInt_(sent)));
          [((JavaUtilLoggingLogger *) nil_chk(log_)) warningWithNSString:JreStrcat("@$@$@", [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) getMyID], @" failed to send message to node ", IOSObjectArray_Get(mtask->recipients_, r), @": ", msg)];
        }
      }
    }
  }
  if (thrown != nil) @throw thrown;
}

- (void)stop {
  [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(self->execpool_)) shutdown];
  [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) stop];
  if (self->clientMessenger_ != nil && self->clientMessenger_ != self && [EduUmassCsNioInterfacesInterfaceNIOTransport_class_() isInstance:self->clientMessenger_]) [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) cast_check(self->clientMessenger_, EduUmassCsNioInterfacesInterfaceNIOTransport_class_())) stop];
  if (self->sslClientMessenger_ != nil && self->sslClientMessenger_ != self && [EduUmassCsNioInterfacesInterfaceNIOTransport_class_() isInstance:self->sslClientMessenger_]) [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) cast_check(self->sslClientMessenger_, EduUmassCsNioInterfacesInterfaceNIOTransport_class_())) stop];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->workers_))->size_; i++) if (IOSObjectArray_Get(self->workers_, i) != nil && ![((EduUmassCsNioMessageNIOTransport *) nil_chk((IOSObjectArray_Get(workers_, i)))) isStopped]) {
    [((EduUmassCsNioMessageNIOTransport *) nil_chk(IOSObjectArray_Get(self->workers_, i))) stop];
  }
}

- (NSString *)description {
  return JreStrcat("$@", [EduUmassCsNioJSONMessenger_class_() getSimpleName], [self getMyID]);
}

- (jint)specialCaseSendWithId:(id)id_
                withByteArray:(IOSByteArray *)msgBytes
                  withBoolean:(jboolean)useWorkers {
  return EduUmassCsNioJSONMessenger_specialCaseSendWithId_withByteArray_withBoolean_(self, id_, msgBytes, useWorkers);
}

- (jint)sendToIDWithId:(id)id_
                withId:(OrgJsonJSONObject *)jsonData {
  return [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) sendToIDWithId:id_ withId:jsonData];
}

- (jint)sendToIDWithId:(id)id_
         withByteArray:(IOSByteArray *)msgBytes
           withBoolean:(jboolean)useWorkers {
  return EduUmassCsNioJSONMessenger_sendToIDWithId_withByteArray_withBoolean_(self, id_, msgBytes, useWorkers);
}

- (jint)sendToAddressWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)address
                                           withId:(OrgJsonJSONObject *)jsonData {
  return [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) sendToAddressWithJavaNetInetSocketAddress:address withId:jsonData];
}

- (id)getMyID {
  return [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) getMyID];
}

- (void)addPacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:(EduUmassCsNioAbstractPacketDemultiplexer *)pd {
  [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) addPacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:pd];
}

- (void)precedePacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:(EduUmassCsNioAbstractPacketDemultiplexer *)pd {
  [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) precedePacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:pd];
}

- (id<EduUmassCsNioInterfacesInterfaceNIOTransport>)getNIOTransport {
  return self->nioTransport_;
}

- (id<EduUmassCsNioInterfacesAddressMessenger>)getClientMessenger {
  return self->clientMessenger_;
}

- (id<EduUmassCsNioInterfacesAddressMessenger>)getClientMessengerInternal {
  return EduUmassCsNioJSONMessenger_getClientMessengerInternal(self);
}

- (id<EduUmassCsNioInterfacesAddressMessenger>)getSSLClientMessenger {
  return self->sslClientMessenger_;
}

- (id<EduUmassCsNioInterfacesAddressMessenger>)getSSLClientMessengerInternal {
  return EduUmassCsNioJSONMessenger_getSSLClientMessengerInternal(self);
}

- (void)setClientMessengerWithEduUmassCsNioInterfacesAddressMessenger:(id<EduUmassCsNioInterfacesAddressMessenger>)clientMessenger {
  if (self->clientMessenger_ != nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Can not change client messenger once set");
  JreStrongAssign(&self->clientMessenger_, clientMessenger);
}

- (void)setSSLClientMessengerWithEduUmassCsNioInterfacesAddressMessenger:(id<EduUmassCsNioInterfacesAddressMessenger>)sslClientMessenger {
  if (self->sslClientMessenger_ != nil) @throw create_JavaLangIllegalStateException_initWithNSString_(@"Can not change client messenger once set");
  JreStrongAssign(&self->sslClientMessenger_, sslClientMessenger);
}

- (jint)sendClientWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)sockAddr
                                        withId:(id)message
                  withJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)listenSocketAddress {
  id<EduUmassCsNioInterfacesAddressMessenger> msgr = [self getClientMessengerWithJavaNetInetSocketAddress:listenSocketAddress];
  msgr = msgr != nil ? msgr : self;
  if ([message isKindOfClass:[IOSByteArray class]]) return [msgr sendToAddressWithJavaNetInetSocketAddress:sockAddr withByteArray:(IOSByteArray *) cast_chk(message, [IOSByteArray class])];
  else if ([EduUmassCsNioInterfacesByteable_class_() isInstance:message]) return [msgr sendToAddressWithJavaNetInetSocketAddress:sockAddr withByteArray:[((id<EduUmassCsNioInterfacesByteable>) nil_chk(((id<EduUmassCsNioInterfacesByteable>) cast_check(message, EduUmassCsNioInterfacesByteable_class_())))) toBytes]];
  else return [msgr sendToAddressWithJavaNetInetSocketAddress:sockAddr withId:create_EduUmassCsNioJSONMessenger_JSONObjectWrapper_initWithId_(message)];
}

- (void)sendClientWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)sockAddr
                                        withId:(id)message {
  [self sendClientWithJavaNetInetSocketAddress:sockAddr withId:message withJavaNetInetSocketAddress:nil];
}

- (id<EduUmassCsNioInterfacesNodeConfig>)getNodeConfig {
  return [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) getNodeConfig];
}

- (EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)getSSLMode {
  return [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) getSSLMode];
}

- (jint)sendToIDWithId:(id)id_
         withByteArray:(IOSByteArray *)msg {
  return [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) sendToIDWithId:id_ withByteArray:msg];
}

- (jint)sendToAddressWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)isa_
                                    withByteArray:(IOSByteArray *)msg {
  return [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) sendToAddressWithJavaNetInetSocketAddress:isa_ withByteArray:msg];
}

- (jboolean)isStopped {
  return [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) isStopped];
}

- (jboolean)isDisconnectedWithId:(id)node {
  jboolean disconnected = [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) isDisconnectedWithId:node];
  if (self->workers_ != nil) {
    IOSObjectArray *a__ = self->workers_;
    EduUmassCsNioMessageNIOTransport * const *b__ = a__->buffer_;
    EduUmassCsNioMessageNIOTransport * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<EduUmassCsNioInterfacesInterfaceNIOTransport> niot = *b__++;
      disconnected = (disconnected || (niot != nil && [niot isDisconnectedWithId:node]));
    }
  }
  return disconnected;
}

- (id<EduUmassCsNioInterfacesAddressMessenger>)getClientMessengerWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)listenSockAddr {
  id<EduUmassCsNioInterfacesAddressMessenger> msgr = EduUmassCsNioJSONMessenger_getClientMessengerInternal(self);
  if (listenSockAddr == nil) return msgr;
  if ([EduUmassCsNioInterfacesInterfaceNIOTransport_class_() isInstance:msgr] && [((JavaNetInetSocketAddress *) nil_chk([((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) cast_check(msgr, EduUmassCsNioInterfacesInterfaceNIOTransport_class_())))) getListeningSocketAddress])) getPort] == ([listenSockAddr getPort])) return msgr;
  msgr = EduUmassCsNioJSONMessenger_getSSLClientMessengerInternal(self);
  if ([EduUmassCsNioInterfacesInterfaceNIOTransport_class_() isInstance:msgr] && [((JavaNetInetSocketAddress *) nil_chk([((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) cast_check(msgr, EduUmassCsNioInterfacesInterfaceNIOTransport_class_())))) getListeningSocketAddress])) getPort] == ([listenSockAddr getPort])) return msgr;
  return self;
}

- (JavaNetInetSocketAddress *)getListeningSocketAddress {
  return [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) getListeningSocketAddress];
}

- (void)dealloc {
  RELEASE_(nioTransport_);
  RELEASE_(execpool_);
  RELEASE_(clientMessenger_);
  RELEASE_(sslClientMessenger_);
  RELEASE_(workers_);
  RELEASE_(log_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, 7, -1, -1 },
    { NULL, "V", 0x4, 4, 8, 6, 9, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 12, 13, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 15, 13, 16, -1, -1 },
    { NULL, "I", 0x2, 14, 12, 13, 17, -1, -1 },
    { NULL, "I", 0x1, 18, 19, 13, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x1, 24, 22, -1, 23, -1, -1 },
    { NULL, "LEduUmassCsNioInterfacesInterfaceNIOTransport;", 0x4, -1, -1, -1, 25, -1, -1 },
    { NULL, "LEduUmassCsNioInterfacesAddressMessenger;", 0x1, -1, -1, -1, 26, -1, -1 },
    { NULL, "LEduUmassCsNioInterfacesAddressMessenger;", 0x2, -1, -1, -1, 26, -1, -1 },
    { NULL, "LEduUmassCsNioInterfacesAddressMessenger;", 0x1, -1, -1, -1, 26, -1, -1 },
    { NULL, "LEduUmassCsNioInterfacesAddressMessenger;", 0x2, -1, -1, -1, 26, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, 29, -1, -1 },
    { NULL, "V", 0x1, 30, 28, -1, 29, -1, -1 },
    { NULL, "I", 0x1, 31, 32, 33, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 34, 33, -1, -1, -1 },
    { NULL, "LEduUmassCsNioInterfacesNodeConfig;", 0x1, -1, -1, -1, 35, -1, -1 },
    { NULL, "LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 36, 13, 37, -1, -1 },
    { NULL, "I", 0x1, 18, 38, 13, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 39, 40, -1, 41, -1, -1 },
    { NULL, "LEduUmassCsNioInterfacesAddressMessenger;", 0x1, 42, 43, -1, 44, -1, -1 },
    { NULL, "LJavaNetInetSocketAddress;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduUmassCsNioInterfacesInterfaceNIOTransport:);
  methods[1].selector = @selector(initWithEduUmassCsNioInterfacesInterfaceNIOTransport:withInt:);
  methods[2].selector = @selector(sendWithEduUmassCsNioGenericMessagingTask:);
  methods[3].selector = @selector(sendWithEduUmassCsNioGenericMessagingTask:withBoolean:);
  methods[4].selector = @selector(stop);
  methods[5].selector = @selector(description);
  methods[6].selector = @selector(specialCaseSendWithId:withByteArray:withBoolean:);
  methods[7].selector = @selector(sendToIDWithId:withId:);
  methods[8].selector = @selector(sendToIDWithId:withByteArray:withBoolean:);
  methods[9].selector = @selector(sendToAddressWithJavaNetInetSocketAddress:withId:);
  methods[10].selector = @selector(getMyID);
  methods[11].selector = @selector(addPacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:);
  methods[12].selector = @selector(precedePacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:);
  methods[13].selector = @selector(getNIOTransport);
  methods[14].selector = @selector(getClientMessenger);
  methods[15].selector = @selector(getClientMessengerInternal);
  methods[16].selector = @selector(getSSLClientMessenger);
  methods[17].selector = @selector(getSSLClientMessengerInternal);
  methods[18].selector = @selector(setClientMessengerWithEduUmassCsNioInterfacesAddressMessenger:);
  methods[19].selector = @selector(setSSLClientMessengerWithEduUmassCsNioInterfacesAddressMessenger:);
  methods[20].selector = @selector(sendClientWithJavaNetInetSocketAddress:withId:withJavaNetInetSocketAddress:);
  methods[21].selector = @selector(sendClientWithJavaNetInetSocketAddress:withId:);
  methods[22].selector = @selector(getNodeConfig);
  methods[23].selector = @selector(getSSLMode);
  methods[24].selector = @selector(sendToIDWithId:withByteArray:);
  methods[25].selector = @selector(sendToAddressWithJavaNetInetSocketAddress:withByteArray:);
  methods[26].selector = @selector(isStopped);
  methods[27].selector = @selector(isDisconnectedWithId:);
  methods[28].selector = @selector(getClientMessengerWithJavaNetInetSocketAddress:);
  methods[29].selector = @selector(getListeningSocketAddress);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SENT_TIME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 45, -1, -1 },
    { "RTX_DELAY", "J", .constantValue.asLong = EduUmassCsNioJSONMessenger_RTX_DELAY, 0x1a, -1, -1, -1, -1 },
    { "BACKOFF_FACTOR", "I", .constantValue.asInt = EduUmassCsNioJSONMessenger_BACKOFF_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "nioTransport_", "LEduUmassCsNioInterfacesInterfaceNIOTransport;", .constantValue.asLong = 0, 0x12, -1, -1, 46, -1 },
    { "execpool_", "LJavaUtilConcurrentScheduledExecutorService;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "clientMessenger_", "LEduUmassCsNioInterfacesAddressMessenger;", .constantValue.asLong = 0, 0x2, -1, -1, 47, -1 },
    { "sslClientMessenger_", "LEduUmassCsNioInterfacesAddressMessenger;", .constantValue.asLong = 0, 0x2, -1, -1, 47, -1 },
    { "workers_", "[LEduUmassCsNioMessageNIOTransport;", .constantValue.asLong = 0, 0x12, -1, -1, 48, -1 },
    { "log_", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduUmassCsNioInterfacesInterfaceNIOTransport;", "(Ledu/umass/cs/nio/interfaces/InterfaceNIOTransport<TNodeIDType;Lorg/json/JSONObject;>;)V", "LEduUmassCsNioInterfacesInterfaceNIOTransport;I", "(Ledu/umass/cs/nio/interfaces/InterfaceNIOTransport<TNodeIDType;Lorg/json/JSONObject;>;I)V", "send", "LEduUmassCsNioGenericMessagingTask;", "LJavaIoIOException;LOrgJsonJSONException;", "(Ledu/umass/cs/nio/GenericMessagingTask<TNodeIDType;*>;)V", "LEduUmassCsNioGenericMessagingTask;Z", "(Ledu/umass/cs/nio/GenericMessagingTask<TNodeIDType;*>;Z)V", "toString", "specialCaseSend", "LNSObject;[BZ", "LJavaIoIOException;", "sendToID", "LNSObject;LOrgJsonJSONObject;", "(TNodeIDType;Lorg/json/JSONObject;)I", "(TNodeIDType;[BZ)I", "sendToAddress", "LJavaNetInetSocketAddress;LOrgJsonJSONObject;", "()TNodeIDType;", "addPacketDemultiplexer", "LEduUmassCsNioAbstractPacketDemultiplexer;", "(Ledu/umass/cs/nio/AbstractPacketDemultiplexer<*>;)V", "precedePacketDemultiplexer", "()Ledu/umass/cs/nio/interfaces/InterfaceNIOTransport<TNodeIDType;Lorg/json/JSONObject;>;", "()Ledu/umass/cs/nio/interfaces/AddressMessenger<Lorg/json/JSONObject;>;", "setClientMessenger", "LEduUmassCsNioInterfacesAddressMessenger;", "(Ledu/umass/cs/nio/interfaces/AddressMessenger<*>;)V", "setSSLClientMessenger", "sendClient", "LJavaNetInetSocketAddress;LNSObject;LJavaNetInetSocketAddress;", "LOrgJsonJSONException;LJavaIoIOException;", "LJavaNetInetSocketAddress;LNSObject;", "()Ledu/umass/cs/nio/interfaces/NodeConfig<TNodeIDType;>;", "LNSObject;[B", "(TNodeIDType;[B)I", "LJavaNetInetSocketAddress;[B", "isDisconnected", "LNSObject;", "(TNodeIDType;)Z", "getClientMessenger", "LJavaNetInetSocketAddress;", "(Ljava/net/InetSocketAddress;)Ledu/umass/cs/nio/interfaces/AddressMessenger<Lorg/json/JSONObject;>;", &EduUmassCsNioJSONMessenger_SENT_TIME, "Ledu/umass/cs/nio/interfaces/InterfaceNIOTransport<TNodeIDType;Lorg/json/JSONObject;>;", "Ledu/umass/cs/nio/interfaces/AddressMessenger<Lorg/json/JSONObject;>;", "[Ledu/umass/cs/nio/MessageNIOTransport<TNodeIDType;Lorg/json/JSONObject;>;", "LEduUmassCsNioJSONMessenger_Retransmitter;LEduUmassCsNioJSONMessenger_JSONObjectWrapper;LEduUmassCsNioJSONMessenger_JSONObjectByteableWrapper;", "<NodeIDType:Ljava/lang/Object;>Ljava/lang/Object;Ledu/umass/cs/nio/interfaces/SSLMessenger<TNodeIDType;Lorg/json/JSONObject;>;" };
  static const J2ObjcClassInfo _EduUmassCsNioJSONMessenger = { "JSONMessenger", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x1, 30, 9, -1, 49, -1, 50, -1 };
  return &_EduUmassCsNioJSONMessenger;
}

@end

void EduUmassCsNioJSONMessenger_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_(EduUmassCsNioJSONMessenger *self, id<EduUmassCsNioInterfacesInterfaceNIOTransport> niot) {
  EduUmassCsNioJSONMessenger_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_withInt_(self, niot, 0);
}

EduUmassCsNioJSONMessenger *new_EduUmassCsNioJSONMessenger_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_(id<EduUmassCsNioInterfacesInterfaceNIOTransport> niot) {
  J2OBJC_NEW_IMPL(EduUmassCsNioJSONMessenger, initWithEduUmassCsNioInterfacesInterfaceNIOTransport_, niot)
}

EduUmassCsNioJSONMessenger *create_EduUmassCsNioJSONMessenger_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_(id<EduUmassCsNioInterfacesInterfaceNIOTransport> niot) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioJSONMessenger, initWithEduUmassCsNioInterfacesInterfaceNIOTransport_, niot)
}

void EduUmassCsNioJSONMessenger_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_withInt_(EduUmassCsNioJSONMessenger *self, id<EduUmassCsNioInterfacesInterfaceNIOTransport> niot, jint numWorkers) {
  NSObject_init(self);
  JreStrongAssign(&self->log_, EduUmassCsNioNIOTransport_getLogger());
  if ([niot isKindOfClass:[EduUmassCsNioJSONMessenger class]]) JreStrongAssign(&self->execpool_, ((EduUmassCsNioJSONMessenger *) nil_chk(((EduUmassCsNioJSONMessenger *) cast_chk(niot, [EduUmassCsNioJSONMessenger class]))))->execpool_);
  else JreStrongAssign(&self->execpool_, JavaUtilConcurrentExecutors_newScheduledThreadPoolWithInt_withJavaUtilConcurrentThreadFactory_(5, create_EduUmassCsNioJSONMessenger_1_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_(niot)));
  JreStrongAssign(&self->nioTransport_, niot);
  JreStrongAssignAndConsume(&self->workers_, [IOSObjectArray newArrayWithLength:numWorkers type:EduUmassCsNioMessageNIOTransport_class_()]);
  for (jint i = 0; i < self->workers_->size_; i++) {
    @try {
      [((JavaUtilLoggingLogger *) nil_chk(self->log_)) infoWithNSString:(JreStrcat("@$@", self, @" starting worker with ssl mode ", [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) getSSLMode]))];
      IOSObjectArray_SetAndConsume(self->workers_, i, new_EduUmassCsNioMessageNIOTransport_initWithJavaNetInetSocketAddress_withEduUmassCsNioInterfacesNodeConfig_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_(create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_([((JavaNetInetSocketAddress *) nil_chk([self getListeningSocketAddress])) getAddress], 0), [self getNodeConfig], [self->nioTransport_ getSSLMode]));
      [((EduUmassCsNioMessageNIOTransport *) nil_chk(IOSObjectArray_Get(self->workers_, i))) setNameWithNSString:JreStrcat("$@$I", [EduUmassCsNioJSONMessenger_class_() getSimpleName], [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(niot)) getMyID], @"_send_worker", i)];
    }
    @catch (JavaIoIOException *e) {
      IOSObjectArray_Set(self->workers_, i, nil);
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
}

EduUmassCsNioJSONMessenger *new_EduUmassCsNioJSONMessenger_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_withInt_(id<EduUmassCsNioInterfacesInterfaceNIOTransport> niot, jint numWorkers) {
  J2OBJC_NEW_IMPL(EduUmassCsNioJSONMessenger, initWithEduUmassCsNioInterfacesInterfaceNIOTransport_withInt_, niot, numWorkers)
}

EduUmassCsNioJSONMessenger *create_EduUmassCsNioJSONMessenger_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_withInt_(id<EduUmassCsNioInterfacesInterfaceNIOTransport> niot, jint numWorkers) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioJSONMessenger, initWithEduUmassCsNioInterfacesInterfaceNIOTransport_withInt_, niot, numWorkers)
}

jint EduUmassCsNioJSONMessenger_specialCaseSendWithId_withByteArray_withBoolean_(EduUmassCsNioJSONMessenger *self, id id_, IOSByteArray *msgBytes, jboolean useWorkers) {
  if ([id_ isKindOfClass:[JavaNetInetSocketAddress class]]) return [self sendToAddressWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *) cast_chk(id_, [JavaNetInetSocketAddress class]) withByteArray:msgBytes];
  else return EduUmassCsNioJSONMessenger_sendToIDWithId_withByteArray_withBoolean_(self, id_, msgBytes, useWorkers);
}

jint EduUmassCsNioJSONMessenger_sendToIDWithId_withByteArray_withBoolean_(EduUmassCsNioJSONMessenger *self, id id_, IOSByteArray *msgBytes, jboolean useWorkers) {
  jint i = JreFpToInt((JavaLangMath_random() * (((IOSObjectArray *) nil_chk(self->workers_))->size_)));
  return (useWorkers && self->workers_->size_ > 0 && i < self->workers_->size_ && IOSObjectArray_Get(self->workers_, i) != nil) ? [((EduUmassCsNioMessageNIOTransport *) nil_chk(IOSObjectArray_Get(self->workers_, i))) sendToIDWithId:id_ withByteArray:msgBytes] : [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(self->nioTransport_)) sendToIDWithId:id_ withByteArray:msgBytes];
}

id<EduUmassCsNioInterfacesAddressMessenger> EduUmassCsNioJSONMessenger_getClientMessengerInternal(EduUmassCsNioJSONMessenger *self) {
  return self->clientMessenger_ != nil ? self->clientMessenger_ : ([self->nioTransport_ isKindOfClass:[EduUmassCsNioJSONMessenger class]] ? [((EduUmassCsNioJSONMessenger *) nil_chk(((EduUmassCsNioJSONMessenger *) cast_chk(self->nioTransport_, [EduUmassCsNioJSONMessenger class])))) getClientMessenger] : self->clientMessenger_);
}

id<EduUmassCsNioInterfacesAddressMessenger> EduUmassCsNioJSONMessenger_getSSLClientMessengerInternal(EduUmassCsNioJSONMessenger *self) {
  return self->sslClientMessenger_ != nil ? self->sslClientMessenger_ : ([self->nioTransport_ isKindOfClass:[EduUmassCsNioJSONMessenger class]] ? [((EduUmassCsNioJSONMessenger *) nil_chk(((EduUmassCsNioJSONMessenger *) cast_chk(self->nioTransport_, [EduUmassCsNioJSONMessenger class])))) getSSLClientMessenger] : self->sslClientMessenger_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioJSONMessenger)

@implementation EduUmassCsNioJSONMessenger_1

- (instancetype)initWithEduUmassCsNioInterfacesInterfaceNIOTransport:(id<EduUmassCsNioInterfacesInterfaceNIOTransport>)capture$0 {
  EduUmassCsNioJSONMessenger_1_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_(self, capture$0);
  return self;
}

- (JavaLangThread *)newThreadWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  JavaLangThread *thread = [((id<JavaUtilConcurrentThreadFactory>) nil_chk(JavaUtilConcurrentExecutors_defaultThreadFactory())) newThreadWithJavaLangRunnable:r];
  [((JavaLangThread *) nil_chk(thread)) setNameWithNSString:JreStrcat("$@$", [EduUmassCsNioJSONMessenger_class_() getSimpleName], [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(val$niot_)) getMyID], [thread getName])];
  return thread;
}

- (void)dealloc {
  RELEASE_(val$niot_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThread;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduUmassCsNioInterfacesInterfaceNIOTransport:);
  methods[1].selector = @selector(newThreadWithJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$niot_", "LEduUmassCsNioInterfacesInterfaceNIOTransport;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "newThread", "LJavaLangRunnable;", "Ledu/umass/cs/nio/interfaces/InterfaceNIOTransport<TNodeIDType;Lorg/json/JSONObject;>;", "LEduUmassCsNioJSONMessenger;", "initWithEduUmassCsNioInterfacesInterfaceNIOTransport:withInt:" };
  static const J2ObjcClassInfo _EduUmassCsNioJSONMessenger_1 = { "", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_EduUmassCsNioJSONMessenger_1;
}

@end

void EduUmassCsNioJSONMessenger_1_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_(EduUmassCsNioJSONMessenger_1 *self, id<EduUmassCsNioInterfacesInterfaceNIOTransport> capture$0) {
  JreStrongAssign(&self->val$niot_, capture$0);
  NSObject_init(self);
}

EduUmassCsNioJSONMessenger_1 *new_EduUmassCsNioJSONMessenger_1_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_(id<EduUmassCsNioInterfacesInterfaceNIOTransport> capture$0) {
  J2OBJC_NEW_IMPL(EduUmassCsNioJSONMessenger_1, initWithEduUmassCsNioInterfacesInterfaceNIOTransport_, capture$0)
}

EduUmassCsNioJSONMessenger_1 *create_EduUmassCsNioJSONMessenger_1_initWithEduUmassCsNioInterfacesInterfaceNIOTransport_(id<EduUmassCsNioInterfacesInterfaceNIOTransport> capture$0) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioJSONMessenger_1, initWithEduUmassCsNioInterfacesInterfaceNIOTransport_, capture$0)
}

@implementation EduUmassCsNioJSONMessenger_Retransmitter

- (instancetype)initWithEduUmassCsNioJSONMessenger:(EduUmassCsNioJSONMessenger *)outer$
                                            withId:(id)id_
                                     withByteArray:(IOSByteArray *)m
                                          withLong:(jlong)d
                                       withBoolean:(jboolean)useWorkers {
  EduUmassCsNioJSONMessenger_Retransmitter_initWithEduUmassCsNioJSONMessenger_withId_withByteArray_withLong_withBoolean_(self, outer$, id_, m, d, useWorkers);
  return self;
}

- (void)run {
  jint sent = 0;
  @try {
    sent = EduUmassCsNioJSONMessenger_specialCaseSendWithId_withByteArray_withBoolean_(this$0_, self->dest_, self->msg_, self->useWorkers_);
  }
  @catch (JavaIoIOException *ioe) {
    [((JavaIoIOException *) nil_chk(ioe)) printStackTrace];
  }
  @finally {
    if (sent < ((jint) [((NSString *) nil_chk([((IOSByteArray *) nil_chk(msg_)) description])) length]) && sent != -1) {
      JreAssert((sent == 0), (@"edu/umass/cs/nio/JSONMessenger.java:234 condition failed: assert (sent == 0);"));
      [((JavaUtilLoggingLogger *) nil_chk(this$0_->log_)) warningWithNSString:JreStrcat("@$@$", [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(this$0_->nioTransport_)) getMyID], @"->", dest_, @" messenger backing off under severe congestion, Hail Mary!")];
      EduUmassCsNioJSONMessenger_Retransmitter *rtx = create_EduUmassCsNioJSONMessenger_Retransmitter_initWithEduUmassCsNioJSONMessenger_withId_withByteArray_withLong_withBoolean_(this$0_, dest_, msg_, delay_ * EduUmassCsNioJSONMessenger_BACKOFF_FACTOR, useWorkers_);
      [((id<JavaUtilConcurrentScheduledExecutorService>) nil_chk(this$0_->execpool_)) scheduleWithJavaLangRunnable:rtx withLong:delay_ * EduUmassCsNioJSONMessenger_BACKOFF_FACTOR withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)];
    }
    else if (sent == -1) {
      [((JavaUtilLoggingLogger *) nil_chk(this$0_->log_)) severeWithNSString:JreStrcat("@$@$@", [((id<EduUmassCsNioInterfacesInterfaceNIOTransport>) nil_chk(this$0_->nioTransport_)) getMyID], @"->", dest_, @" messenger dropping message as destination unreachable: ", msg_)];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(dest_);
  RELEASE_(msg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduUmassCsNioJSONMessenger:withId:withByteArray:withLong:withBoolean:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduUmassCsNioJSONMessenger;", .constantValue.asLong = 0, 0x1012, -1, -1, 1, -1 },
    { "dest_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "msg_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "delay_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "useWorkers_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;[BJZ", "Ledu/umass/cs/nio/JSONMessenger<TNodeIDType;>;", "LEduUmassCsNioJSONMessenger;" };
  static const J2ObjcClassInfo _EduUmassCsNioJSONMessenger_Retransmitter = { "Retransmitter", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x2, 2, 5, 2, -1, -1, -1, -1 };
  return &_EduUmassCsNioJSONMessenger_Retransmitter;
}

@end

void EduUmassCsNioJSONMessenger_Retransmitter_initWithEduUmassCsNioJSONMessenger_withId_withByteArray_withLong_withBoolean_(EduUmassCsNioJSONMessenger_Retransmitter *self, EduUmassCsNioJSONMessenger *outer$, id id_, IOSByteArray *m, jlong d, jboolean useWorkers) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->dest_, id_);
  JreStrongAssign(&self->msg_, m);
  self->delay_ = d;
  self->useWorkers_ = useWorkers;
}

EduUmassCsNioJSONMessenger_Retransmitter *new_EduUmassCsNioJSONMessenger_Retransmitter_initWithEduUmassCsNioJSONMessenger_withId_withByteArray_withLong_withBoolean_(EduUmassCsNioJSONMessenger *outer$, id id_, IOSByteArray *m, jlong d, jboolean useWorkers) {
  J2OBJC_NEW_IMPL(EduUmassCsNioJSONMessenger_Retransmitter, initWithEduUmassCsNioJSONMessenger_withId_withByteArray_withLong_withBoolean_, outer$, id_, m, d, useWorkers)
}

EduUmassCsNioJSONMessenger_Retransmitter *create_EduUmassCsNioJSONMessenger_Retransmitter_initWithEduUmassCsNioJSONMessenger_withId_withByteArray_withLong_withBoolean_(EduUmassCsNioJSONMessenger *outer$, id id_, IOSByteArray *m, jlong d, jboolean useWorkers) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioJSONMessenger_Retransmitter, initWithEduUmassCsNioJSONMessenger_withId_withByteArray_withLong_withBoolean_, outer$, id_, m, d, useWorkers)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioJSONMessenger_Retransmitter)

@implementation EduUmassCsNioJSONMessenger_JSONObjectWrapper

- (instancetype)initWithId:(id)obj {
  EduUmassCsNioJSONMessenger_JSONObjectWrapper_initWithId_(self, obj);
  return self;
}

- (NSString *)description {
  return [nil_chk(obj_) description];
}

- (id)getObj {
  return self->obj_;
}

- (void)dealloc {
  RELEASE_(obj_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(getObj);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "obj_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "toString", "LEduUmassCsNioJSONMessenger;" };
  static const J2ObjcClassInfo _EduUmassCsNioJSONMessenger_JSONObjectWrapper = { "JSONObjectWrapper", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x9, 3, 1, 2, -1, -1, -1, -1 };
  return &_EduUmassCsNioJSONMessenger_JSONObjectWrapper;
}

@end

void EduUmassCsNioJSONMessenger_JSONObjectWrapper_initWithId_(EduUmassCsNioJSONMessenger_JSONObjectWrapper *self, id obj) {
  OrgJsonJSONObject_init(self);
  JreStrongAssign(&self->obj_, obj);
}

EduUmassCsNioJSONMessenger_JSONObjectWrapper *new_EduUmassCsNioJSONMessenger_JSONObjectWrapper_initWithId_(id obj) {
  J2OBJC_NEW_IMPL(EduUmassCsNioJSONMessenger_JSONObjectWrapper, initWithId_, obj)
}

EduUmassCsNioJSONMessenger_JSONObjectWrapper *create_EduUmassCsNioJSONMessenger_JSONObjectWrapper_initWithId_(id obj) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioJSONMessenger_JSONObjectWrapper, initWithId_, obj)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioJSONMessenger_JSONObjectWrapper)

@implementation EduUmassCsNioJSONMessenger_JSONObjectByteableWrapper

- (instancetype)initWithId:(id)obj {
  EduUmassCsNioJSONMessenger_JSONObjectByteableWrapper_initWithId_(self, obj);
  return self;
}

- (IOSByteArray *)toBytes {
  @try {
    return [EduUmassCsNioInterfacesByteable_class_() isInstance:obj_] ? [((id<EduUmassCsNioInterfacesByteable>) nil_chk(((id<EduUmassCsNioInterfacesByteable>) cast_check(obj_, EduUmassCsNioInterfacesByteable_class_())))) toBytes] : [((NSString *) nil_chk([nil_chk(obj_) description])) java_getBytesWithCharsetName:EduUmassCsNioMessageNIOTransport_NIO_CHARSET_ENCODING];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    [((JavaIoUnsupportedEncodingException *) nil_chk(e)) printStackTrace];
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:);
  methods[1].selector = @selector(toBytes);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSObject;", "LEduUmassCsNioJSONMessenger;" };
  static const J2ObjcClassInfo _EduUmassCsNioJSONMessenger_JSONObjectByteableWrapper = { "JSONObjectByteableWrapper", "edu.umass.cs.nio", ptrTable, methods, NULL, 7, 0x9, 2, 0, 1, -1, -1, -1, -1 };
  return &_EduUmassCsNioJSONMessenger_JSONObjectByteableWrapper;
}

@end

void EduUmassCsNioJSONMessenger_JSONObjectByteableWrapper_initWithId_(EduUmassCsNioJSONMessenger_JSONObjectByteableWrapper *self, id obj) {
  EduUmassCsNioJSONMessenger_JSONObjectWrapper_initWithId_(self, obj);
}

EduUmassCsNioJSONMessenger_JSONObjectByteableWrapper *new_EduUmassCsNioJSONMessenger_JSONObjectByteableWrapper_initWithId_(id obj) {
  J2OBJC_NEW_IMPL(EduUmassCsNioJSONMessenger_JSONObjectByteableWrapper, initWithId_, obj)
}

EduUmassCsNioJSONMessenger_JSONObjectByteableWrapper *create_EduUmassCsNioJSONMessenger_JSONObjectByteableWrapper_initWithId_(id obj) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioJSONMessenger_JSONObjectByteableWrapper, initWithId_, obj)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioJSONMessenger_JSONObjectByteableWrapper)
