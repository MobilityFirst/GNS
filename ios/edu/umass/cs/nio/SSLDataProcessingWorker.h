//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../gig_ios/src/edu/umass/cs/nio/SSLDataProcessingWorker.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduUmassCsNioSSLDataProcessingWorker")
#ifdef RESTRICT_EduUmassCsNioSSLDataProcessingWorker
#define INCLUDE_ALL_EduUmassCsNioSSLDataProcessingWorker 0
#else
#define INCLUDE_ALL_EduUmassCsNioSSLDataProcessingWorker 1
#endif
#undef RESTRICT_EduUmassCsNioSSLDataProcessingWorker

#if !defined (EduUmassCsNioSSLDataProcessingWorker_) && (INCLUDE_ALL_EduUmassCsNioSSLDataProcessingWorker || defined(INCLUDE_EduUmassCsNioSSLDataProcessingWorker))
#define EduUmassCsNioSSLDataProcessingWorker_

#define RESTRICT_EduUmassCsNioInterfacesInterfaceMessageExtractor 1
#define INCLUDE_EduUmassCsNioInterfacesInterfaceMessageExtractor 1
#include "edu/umass/cs/nio/interfaces/InterfaceMessageExtractor.h"

@class EduUmassCsNioAbstractPacketDemultiplexer;
@class EduUmassCsNioSSLDataProcessingWorker_SSL_MODES;
@class IOSByteArray;
@class JavaNetInetSocketAddress;
@class JavaNioByteBuffer;
@class JavaNioChannelsSelectionKey;
@class JavaNioChannelsSocketChannel;
@protocol EduUmassCsNioInterfacesDataProcessingWorker;
@protocol EduUmassCsNioInterfacesHandshakeCallback;

@interface EduUmassCsNioSSLDataProcessingWorker : NSObject < EduUmassCsNioInterfacesInterfaceMessageExtractor > {
 @public
  EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode_;
}

#pragma mark Public

- (void)addPacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:(EduUmassCsNioAbstractPacketDemultiplexer *)pd;

- (void)demultiplexMessageWithId:(id)message;

- (NSString *)getMyID;

- (void)precedePacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:(EduUmassCsNioAbstractPacketDemultiplexer *)pd;

- (void)processDataWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)channel
                              withJavaNioByteBuffer:(JavaNioByteBuffer *)encrypted;

- (void)processLocalMessageWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)sockAddr
                                          withByteArray:(IOSByteArray *)msg;

- (void)stop;

- (NSString *)description;

#pragma mark Protected

- (instancetype)initWithEduUmassCsNioInterfacesDataProcessingWorker:(id<EduUmassCsNioInterfacesDataProcessingWorker>)worker
                 withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)sslMode
                                                       withNSString:(NSString *)myID;

- (jboolean)isHandshakeCompleteWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel;

- (void)poke;

- (jboolean)register__WithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
                                          withBoolean:(jboolean)isClient;

- (void)removeWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key;

- (EduUmassCsNioSSLDataProcessingWorker *)setHandshakeCallbackWithEduUmassCsNioInterfacesHandshakeCallback:(id<EduUmassCsNioInterfacesHandshakeCallback>)callback;

- (void)setMyIDWithNSString:(NSString *)id_;

- (jint)wrapWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)channel
                       withJavaNioByteBuffer:(JavaNioByteBuffer *)unencrypted;

@end

J2OBJC_STATIC_INIT(EduUmassCsNioSSLDataProcessingWorker)

J2OBJC_FIELD_SETTER(EduUmassCsNioSSLDataProcessingWorker, sslMode_, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)

FOUNDATION_EXPORT void EduUmassCsNioSSLDataProcessingWorker_initWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_withNSString_(EduUmassCsNioSSLDataProcessingWorker *self, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode, NSString *myID);

FOUNDATION_EXPORT EduUmassCsNioSSLDataProcessingWorker *new_EduUmassCsNioSSLDataProcessingWorker_initWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_withNSString_(id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode, NSString *myID) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduUmassCsNioSSLDataProcessingWorker *create_EduUmassCsNioSSLDataProcessingWorker_initWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_withNSString_(id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode, NSString *myID);

J2OBJC_TYPE_LITERAL_HEADER(EduUmassCsNioSSLDataProcessingWorker)

#endif

#if !defined (EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_) && (INCLUDE_ALL_EduUmassCsNioSSLDataProcessingWorker || defined(INCLUDE_EduUmassCsNioSSLDataProcessingWorker_SSL_MODES))
#define EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_Enum) {
  EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_Enum_CLEAR = 0,
  EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_Enum_SERVER_AUTH = 1,
  EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_Enum_MUTUAL_AUTH = 2,
};

@interface EduUmassCsNioSSLDataProcessingWorker_SSL_MODES : JavaLangEnum < NSCopying >

#pragma mark Public

+ (EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_values_[];

inline EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_get_CLEAR();
J2OBJC_ENUM_CONSTANT(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES, CLEAR)

inline EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_get_SERVER_AUTH();
J2OBJC_ENUM_CONSTANT(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES, SERVER_AUTH)

inline EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_get_MUTUAL_AUTH();
J2OBJC_ENUM_CONSTANT(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES, MUTUAL_AUTH)

FOUNDATION_EXPORT IOSObjectArray *EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_values();

FOUNDATION_EXPORT EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES)

#endif

#if !defined (EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_) && (INCLUDE_ALL_EduUmassCsNioSSLDataProcessingWorker || defined(INCLUDE_EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl))
#define EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_

#define RESTRICT_EduUmassCsNioAbstractNIOSSL 1
#define INCLUDE_EduUmassCsNioAbstractNIOSSL 1
#include "edu/umass/cs/nio/AbstractNIOSSL.h"

@class EduUmassCsNioSSLDataProcessingWorker;
@class JavaLangException;
@class JavaNioByteBuffer;
@class JavaNioChannelsSelectionKey;
@class JavaxNetSslSSLEngine;
@protocol JavaUtilConcurrentExecutor;

@interface EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl : EduUmassCsNioAbstractNIOSSL {
 @public
  JavaxNetSslSSLEngine *engine_NonBlockingSSLImpl_;
}

#pragma mark Public

- (void)onClosed;

- (void)onHandshakeFailureWithJavaLangException:(JavaLangException *)cause;

- (void)onHandshakeSuccess;

- (void)onInboundDataWithJavaNioByteBuffer:(JavaNioByteBuffer *)decrypted;

- (void)onOutboundDataWithJavaNioByteBuffer:(JavaNioByteBuffer *)encrypted;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithEduUmassCsNioSSLDataProcessingWorker:(EduUmassCsNioSSLDataProcessingWorker *)outer$
                             withJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
                                    withJavaxNetSslSSLEngine:(JavaxNetSslSSLEngine *)engine
                              withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)taskWorkers;

@end

J2OBJC_EMPTY_STATIC_INIT(EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl)

J2OBJC_FIELD_SETTER(EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl, engine_NonBlockingSSLImpl_, JavaxNetSslSSLEngine *)

FOUNDATION_EXPORT void EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_initWithEduUmassCsNioSSLDataProcessingWorker_withJavaNioChannelsSelectionKey_withJavaxNetSslSSLEngine_withJavaUtilConcurrentExecutor_(EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl *self, EduUmassCsNioSSLDataProcessingWorker *outer$, JavaNioChannelsSelectionKey *key, JavaxNetSslSSLEngine *engine, id<JavaUtilConcurrentExecutor> taskWorkers);

FOUNDATION_EXPORT EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl *new_EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_initWithEduUmassCsNioSSLDataProcessingWorker_withJavaNioChannelsSelectionKey_withJavaxNetSslSSLEngine_withJavaUtilConcurrentExecutor_(EduUmassCsNioSSLDataProcessingWorker *outer$, JavaNioChannelsSelectionKey *key, JavaxNetSslSSLEngine *engine, id<JavaUtilConcurrentExecutor> taskWorkers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl *create_EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_initWithEduUmassCsNioSSLDataProcessingWorker_withJavaNioChannelsSelectionKey_withJavaxNetSslSSLEngine_withJavaUtilConcurrentExecutor_(EduUmassCsNioSSLDataProcessingWorker *outer$, JavaNioChannelsSelectionKey *key, JavaxNetSslSSLEngine *engine, id<JavaUtilConcurrentExecutor> taskWorkers);

J2OBJC_TYPE_LITERAL_HEADER(EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl)

#endif

#pragma pop_macro("INCLUDE_ALL_EduUmassCsNioSSLDataProcessingWorker")
