//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../gig_ios/src/edu/umass/cs/nio/SSLDataProcessingWorker.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/umass/cs/nio/AbstractNIOSSL.h"
#include "edu/umass/cs/nio/AbstractPacketDemultiplexer.h"
#include "edu/umass/cs/nio/NIOTransport.h"
#include "edu/umass/cs/nio/SSLDataProcessingWorker.h"
#include "edu/umass/cs/nio/interfaces/DataProcessingWorker.h"
#include "edu/umass/cs/nio/interfaces/HandshakeCallback.h"
#include "edu/umass/cs/nio/interfaces/InterfaceMessageExtractor.h"
#include "edu/umass/cs/nio/nioutils/NIOInstrumenter.h"
#include "edu/umass/cs/utils/Util.h"
#include "java/io/IOException.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/net/InetSocketAddress.h"
#include "java/nio/Buffer.h"
#include "java/nio/BufferOverflowException.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/channels/SelectableChannel.h"
#include "java/nio/channels/SelectionKey.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/Executor.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/SSLEngine.h"

@interface EduUmassCsNioSSLDataProcessingWorker () {
 @public
  id<EduUmassCsNioInterfacesDataProcessingWorker> decryptedWorker_;
  id<JavaUtilConcurrentExecutorService> taskWorkers_;
  JavaUtilConcurrentConcurrentHashMap *sslMap_;
  id<EduUmassCsNioInterfacesHandshakeCallback> callbackTransport_;
  NSString *myID_;
}

- (void)cleanupWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key;

- (void)extractMessagesWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
                                 withJavaNioByteBuffer:(JavaNioByteBuffer *)incoming;

- (JavaNioByteBuffer *)extractMessageWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
                                               withJavaNioByteBuffer:(JavaNioByteBuffer *)incoming;

@end

J2OBJC_FIELD_SETTER(EduUmassCsNioSSLDataProcessingWorker, decryptedWorker_, id<EduUmassCsNioInterfacesDataProcessingWorker>)
J2OBJC_FIELD_SETTER(EduUmassCsNioSSLDataProcessingWorker, taskWorkers_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_FIELD_SETTER(EduUmassCsNioSSLDataProcessingWorker, sslMap_, JavaUtilConcurrentConcurrentHashMap *)
J2OBJC_FIELD_SETTER(EduUmassCsNioSSLDataProcessingWorker, callbackTransport_, id<EduUmassCsNioInterfacesHandshakeCallback>)
J2OBJC_FIELD_SETTER(EduUmassCsNioSSLDataProcessingWorker, myID_, NSString *)

inline JavaUtilLoggingLogger *EduUmassCsNioSSLDataProcessingWorker_get_log();
static JavaUtilLoggingLogger *EduUmassCsNioSSLDataProcessingWorker_log;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduUmassCsNioSSLDataProcessingWorker, log, JavaUtilLoggingLogger *)

__attribute__((unused)) static void EduUmassCsNioSSLDataProcessingWorker_cleanupWithJavaNioChannelsSelectionKey_(EduUmassCsNioSSLDataProcessingWorker *self, JavaNioChannelsSelectionKey *key);

__attribute__((unused)) static void EduUmassCsNioSSLDataProcessingWorker_extractMessagesWithJavaNioChannelsSelectionKey_withJavaNioByteBuffer_(EduUmassCsNioSSLDataProcessingWorker *self, JavaNioChannelsSelectionKey *key, JavaNioByteBuffer *incoming);

__attribute__((unused)) static JavaNioByteBuffer *EduUmassCsNioSSLDataProcessingWorker_extractMessageWithJavaNioChannelsSelectionKey_withJavaNioByteBuffer_(EduUmassCsNioSSLDataProcessingWorker *self, JavaNioChannelsSelectionKey *key, JavaNioByteBuffer *incoming);

__attribute__((unused)) static void EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_initWithNSString_withInt_(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *self, NSString *__name, jint __ordinal);

@interface EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl () {
 @public
  EduUmassCsNioSSLDataProcessingWorker *this$0_;
  jboolean handshakeComplete_;
}

- (jboolean)isHandshakeComplete;

- (void)setHandshakeComplete;

@end

__attribute__((unused)) static jboolean EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_isHandshakeComplete(EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl *self);

__attribute__((unused)) static void EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_setHandshakeComplete(EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl *self);

J2OBJC_INITIALIZED_DEFN(EduUmassCsNioSSLDataProcessingWorker)

@implementation EduUmassCsNioSSLDataProcessingWorker

- (instancetype)initWithEduUmassCsNioInterfacesDataProcessingWorker:(id<EduUmassCsNioInterfacesDataProcessingWorker>)worker
                 withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)sslMode
                                                       withNSString:(NSString *)myID {
  EduUmassCsNioSSLDataProcessingWorker_initWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_withNSString_(self, worker, sslMode, myID);
  return self;
}

- (EduUmassCsNioSSLDataProcessingWorker *)setHandshakeCallbackWithEduUmassCsNioInterfacesHandshakeCallback:(id<EduUmassCsNioInterfacesHandshakeCallback>)callback {
  JreStrongAssign(&self->callbackTransport_, callback);
  return self;
}

- (void)processDataWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)channel
                              withJavaNioByteBuffer:(JavaNioByteBuffer *)encrypted {
  EduUmassCsNioAbstractNIOSSL *nioSSL = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sslMap_)) getWithId:channel];
  JreAssert(((nioSSL != nil)), (@"edu/umass/cs/nio/SSLDataProcessingWorker.java:73 condition failed: assert (nioSSL != null);"));
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioSSLDataProcessingWorker_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST) withNSString:@"{0} received encrypted data of length {1} bytes to send on channel {2}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, JavaLangInteger_valueOfWithInt_([((JavaNioByteBuffer *) nil_chk(encrypted)) remaining]), channel } count:3 type:NSObject_class_()]];
  [((EduUmassCsNioAbstractNIOSSL *) nil_chk(nioSSL)) notifyReceivedWithJavaNioByteBuffer:encrypted];
  JreAssert(([encrypted remaining] == 0), (@"edu/umass/cs/nio/SSLDataProcessingWorker.java:80 condition failed: assert (encrypted.remaining() == 0);"));
}

- (jint)wrapWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)channel
                       withJavaNioByteBuffer:(JavaNioByteBuffer *)unencrypted {
  EduUmassCsNioAbstractNIOSSL *nioSSL = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sslMap_)) getWithId:channel];
  JreAssert(((nioSSL != nil)), (@"edu/umass/cs/nio/SSLDataProcessingWorker.java:86 condition failed: assert (nioSSL != null);"));
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioSSLDataProcessingWorker_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST) withNSString:@"{0} wrapping unencrypted data of length {1} bytes to send on channel {2}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, JavaLangInteger_valueOfWithInt_([((JavaNioByteBuffer *) nil_chk(unencrypted)) remaining]), channel } count:3 type:NSObject_class_()]];
  jint originalSize = [unencrypted remaining];
  @try {
    [((EduUmassCsNioAbstractNIOSSL *) nil_chk(nioSSL)) nioSendWithJavaNioByteBuffer:unencrypted];
  }
  @catch (JavaNioBufferOverflowException *e) {
    [((JavaLangRuntimeException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangIllegalStateException *e) {
    [((JavaLangRuntimeException *) nil_chk(e)) printStackTrace];
  }
  return originalSize - [unencrypted remaining];
}

- (jboolean)isHandshakeCompleteWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)socketChannel {
  EduUmassCsNioAbstractNIOSSL *nioSSL = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sslMap_)) getWithId:socketChannel];
  return nioSSL != nil ? EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_isHandshakeComplete(((EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl *) cast_chk(nioSSL, [EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl class]))) : false;
}

- (jboolean)register__WithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
                                          withBoolean:(jboolean)isClient {
  JreAssert(((![((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sslMap_)) containsKeyWithId:[((JavaNioChannelsSelectionKey *) nil_chk(key)) channel]])), (@"edu/umass/cs/nio/SSLDataProcessingWorker.java:109 condition failed: assert (!this.sslMap.containsKey(key.channel()));"));
  JavaxNetSslSSLEngine *engine;
  @try {
    engine = [((JavaxNetSslSSLContext *) nil_chk(JavaxNetSslSSLContext_getDefault())) createSSLEngine];
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw create_JavaIoIOException_initWithNSString_([((JavaSecurityNoSuchAlgorithmException *) nil_chk(e)) getMessage]);
  }
  [((JavaxNetSslSSLEngine *) nil_chk(engine)) setUseClientModeWithBoolean:isClient];
  if ([((EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *) nil_chk(self->sslMode_)) isEqual:JreLoadEnum(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES, MUTUAL_AUTH)]) [engine setNeedClientAuthWithBoolean:true];
  [engine beginHandshake];
  [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioSSLDataProcessingWorker_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"{0} registered {1} socket channel {2}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, (isClient ? @"client" : @"server"), [key channel] } count:3 type:NSObject_class_()]];
  [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sslMap_)) putWithId:[key channel] withId:create_EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_initWithEduUmassCsNioSSLDataProcessingWorker_withJavaNioChannelsSelectionKey_withJavaxNetSslSSLEngine_withJavaUtilConcurrentExecutor_(self, key, engine, self->taskWorkers_)];
  return true;
}

- (void)poke {
  for (EduUmassCsNioAbstractNIOSSL * __strong nioSSL in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sslMap_)) values])) {
    [((EduUmassCsNioAbstractNIOSSL *) nil_chk(nioSSL)) poke];
  }
}

- (void)cleanupWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  EduUmassCsNioSSLDataProcessingWorker_cleanupWithJavaNioChannelsSelectionKey_(self, key);
}

- (void)removeWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  JavaNioChannelsSocketChannel *socketChannel = (JavaNioChannelsSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(key)) channel], [JavaNioChannelsSocketChannel class]);
  if (socketChannel != nil) {
    EduUmassCsNioAbstractNIOSSL *nioSSL = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(self->sslMap_)) removeWithId:socketChannel];
    if (nioSSL != nil) [nioSSL clean];
  }
}

- (NSString *)description {
  return JreStrcat("$$", [[self java_getClass] getSimpleName], [self getMyID]);
}

- (NSString *)getMyID {
  return self->myID_;
}

- (void)setMyIDWithNSString:(NSString *)id_ {
  JreStrongAssign(&self->myID_, id_);
}

- (void)stop {
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(self->taskWorkers_)) shutdownNow];
  if ([EduUmassCsNioInterfacesInterfaceMessageExtractor_class_() isInstance:self->decryptedWorker_]) [((id<EduUmassCsNioInterfacesInterfaceMessageExtractor>) nil_chk(((id<EduUmassCsNioInterfacesInterfaceMessageExtractor>) cast_check(self->decryptedWorker_, EduUmassCsNioInterfacesInterfaceMessageExtractor_class_())))) stop];
}

- (void)addPacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:(EduUmassCsNioAbstractPacketDemultiplexer *)pd {
  if ([EduUmassCsNioInterfacesInterfaceMessageExtractor_class_() isInstance:self->decryptedWorker_]) [((id<EduUmassCsNioInterfacesInterfaceMessageExtractor>) nil_chk(((id<EduUmassCsNioInterfacesInterfaceMessageExtractor>) cast_check(self->decryptedWorker_, EduUmassCsNioInterfacesInterfaceMessageExtractor_class_())))) addPacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:pd];
}

- (void)precedePacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:(EduUmassCsNioAbstractPacketDemultiplexer *)pd {
  if ([EduUmassCsNioInterfacesInterfaceMessageExtractor_class_() isInstance:self->decryptedWorker_]) [((id<EduUmassCsNioInterfacesInterfaceMessageExtractor>) nil_chk(((id<EduUmassCsNioInterfacesInterfaceMessageExtractor>) cast_check(self->decryptedWorker_, EduUmassCsNioInterfacesInterfaceMessageExtractor_class_())))) precedePacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:pd];
}

- (void)processLocalMessageWithJavaNetInetSocketAddress:(JavaNetInetSocketAddress *)sockAddr
                                          withByteArray:(IOSByteArray *)msg {
  if ([EduUmassCsNioInterfacesInterfaceMessageExtractor_class_() isInstance:self->decryptedWorker_]) [((id<EduUmassCsNioInterfacesInterfaceMessageExtractor>) nil_chk(((id<EduUmassCsNioInterfacesInterfaceMessageExtractor>) cast_check(self->decryptedWorker_, EduUmassCsNioInterfacesInterfaceMessageExtractor_class_())))) processLocalMessageWithJavaNetInetSocketAddress:sockAddr withByteArray:msg];
}

- (void)extractMessagesWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
                                 withJavaNioByteBuffer:(JavaNioByteBuffer *)incoming {
  EduUmassCsNioSSLDataProcessingWorker_extractMessagesWithJavaNioChannelsSelectionKey_withJavaNioByteBuffer_(self, key, incoming);
}

- (JavaNioByteBuffer *)extractMessageWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
                                               withJavaNioByteBuffer:(JavaNioByteBuffer *)incoming {
  return EduUmassCsNioSSLDataProcessingWorker_extractMessageWithJavaNioChannelsSelectionKey_withJavaNioByteBuffer_(self, key, incoming);
}

- (void)demultiplexMessageWithId:(id)message {
  [((id<EduUmassCsNioInterfacesDataProcessingWorker>) nil_chk(self->decryptedWorker_)) demultiplexMessageWithId:message];
}

- (void)dealloc {
  RELEASE_(decryptedWorker_);
  RELEASE_(taskWorkers_);
  RELEASE_(sslMap_);
  RELEASE_(callbackTransport_);
  RELEASE_(sslMode_);
  RELEASE_(myID_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, 1, -1, -1, -1 },
    { NULL, "LEduUmassCsNioSSLDataProcessingWorker;", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 6, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 9, 10, 11, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x2, 26, 25, 11, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduUmassCsNioInterfacesDataProcessingWorker:withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES:withNSString:);
  methods[1].selector = @selector(setHandshakeCallbackWithEduUmassCsNioInterfacesHandshakeCallback:);
  methods[2].selector = @selector(processDataWithJavaNioChannelsSocketChannel:withJavaNioByteBuffer:);
  methods[3].selector = @selector(wrapWithJavaNioChannelsSocketChannel:withJavaNioByteBuffer:);
  methods[4].selector = @selector(isHandshakeCompleteWithJavaNioChannelsSocketChannel:);
  methods[5].selector = @selector(register__WithJavaNioChannelsSelectionKey:withBoolean:);
  methods[6].selector = @selector(poke);
  methods[7].selector = @selector(cleanupWithJavaNioChannelsSelectionKey:);
  methods[8].selector = @selector(removeWithJavaNioChannelsSelectionKey:);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(getMyID);
  methods[11].selector = @selector(setMyIDWithNSString:);
  methods[12].selector = @selector(stop);
  methods[13].selector = @selector(addPacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:);
  methods[14].selector = @selector(precedePacketDemultiplexerWithEduUmassCsNioAbstractPacketDemultiplexer:);
  methods[15].selector = @selector(processLocalMessageWithJavaNetInetSocketAddress:withByteArray:);
  methods[16].selector = @selector(extractMessagesWithJavaNioChannelsSelectionKey:withJavaNioByteBuffer:);
  methods[17].selector = @selector(extractMessageWithJavaNioChannelsSelectionKey:withJavaNioByteBuffer:);
  methods[18].selector = @selector(demultiplexMessageWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "decryptedWorker_", "LEduUmassCsNioInterfacesDataProcessingWorker;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "taskWorkers_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sslMap_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 29, -1 },
    { "callbackTransport_", "LEduUmassCsNioInterfacesHandshakeCallback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sslMode_", "LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "myID_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "log", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduUmassCsNioInterfacesDataProcessingWorker;LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;LNSString;", "LJavaSecurityNoSuchAlgorithmException;LJavaxNetSslSSLException;", "setHandshakeCallback", "LEduUmassCsNioInterfacesHandshakeCallback;", "processData", "LJavaNioChannelsSocketChannel;LJavaNioByteBuffer;", "wrap", "isHandshakeComplete", "LJavaNioChannelsSocketChannel;", "register", "LJavaNioChannelsSelectionKey;Z", "LJavaIoIOException;", "cleanup", "LJavaNioChannelsSelectionKey;", "remove", "toString", "setMyID", "LNSString;", "addPacketDemultiplexer", "LEduUmassCsNioAbstractPacketDemultiplexer;", "(Ledu/umass/cs/nio/AbstractPacketDemultiplexer<*>;)V", "precedePacketDemultiplexer", "processLocalMessage", "LJavaNetInetSocketAddress;[B", "extractMessages", "LJavaNioChannelsSelectionKey;LJavaNioByteBuffer;", "extractMessage", "demultiplexMessage", "LNSObject;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/nio/channels/SelectableChannel;Ledu/umass/cs/nio/AbstractNIOSSL;>;", &EduUmassCsNioSSLDataProcessingWorker_log, "LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;LEduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl;" };
  static const J2ObjcClassInfo _EduUmassCsNioSSLDataProcessingWorker = { "SSLDataProcessingWorker", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x1, 19, 7, -1, 31, -1, -1, -1 };
  return &_EduUmassCsNioSSLDataProcessingWorker;
}

+ (void)initialize {
  if (self == [EduUmassCsNioSSLDataProcessingWorker class]) {
    JreStrongAssign(&EduUmassCsNioSSLDataProcessingWorker_log, EduUmassCsNioNIOTransport_getLogger());
    J2OBJC_SET_INITIALIZED(EduUmassCsNioSSLDataProcessingWorker)
  }
}

@end

void EduUmassCsNioSSLDataProcessingWorker_initWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_withNSString_(EduUmassCsNioSSLDataProcessingWorker *self, id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode, NSString *myID) {
  NSObject_init(self);
  JreStrongAssign(&self->taskWorkers_, JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(4));
  JreStrongAssignAndConsume(&self->sslMap_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssign(&self->callbackTransport_, nil);
  JreStrongAssign(&self->myID_, nil);
  JreStrongAssign(&self->decryptedWorker_, worker);
  JreStrongAssign(&self->sslMode_, sslMode);
  JreStrongAssign(&self->myID_, myID);
}

EduUmassCsNioSSLDataProcessingWorker *new_EduUmassCsNioSSLDataProcessingWorker_initWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_withNSString_(id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode, NSString *myID) {
  J2OBJC_NEW_IMPL(EduUmassCsNioSSLDataProcessingWorker, initWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_withNSString_, worker, sslMode, myID)
}

EduUmassCsNioSSLDataProcessingWorker *create_EduUmassCsNioSSLDataProcessingWorker_initWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_withNSString_(id<EduUmassCsNioInterfacesDataProcessingWorker> worker, EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *sslMode, NSString *myID) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioSSLDataProcessingWorker, initWithEduUmassCsNioInterfacesDataProcessingWorker_withEduUmassCsNioSSLDataProcessingWorker_SSL_MODES_withNSString_, worker, sslMode, myID)
}

void EduUmassCsNioSSLDataProcessingWorker_cleanupWithJavaNioChannelsSelectionKey_(EduUmassCsNioSSLDataProcessingWorker *self, JavaNioChannelsSelectionKey *key) {
  EduUmassCsNioNIOTransport_cleanupWithJavaNioChannelsSelectionKey_(key);
  [self removeWithJavaNioChannelsSelectionKey:key];
}

void EduUmassCsNioSSLDataProcessingWorker_extractMessagesWithJavaNioChannelsSelectionKey_withJavaNioByteBuffer_(EduUmassCsNioSSLDataProcessingWorker *self, JavaNioChannelsSelectionKey *key, JavaNioByteBuffer *incoming) {
  JavaNioByteBuffer *bbuf = nil;
  @try {
    while ([((JavaNioByteBuffer *) nil_chk(incoming)) hasRemaining] && (bbuf = EduUmassCsNioSSLDataProcessingWorker_extractMessageWithJavaNioChannelsSelectionKey_withJavaNioByteBuffer_(self, key, incoming)) != nil) {
      [((id<EduUmassCsNioInterfacesDataProcessingWorker>) nil_chk(self->decryptedWorker_)) processDataWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(key)) channel], [JavaNioChannelsSocketChannel class]) withJavaNioByteBuffer:bbuf];
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EduUmassCsNioSSLDataProcessingWorker_log)) severeWithNSString:JreStrcat("@$$@", self, [((JavaIoIOException *) nil_chk(e)) getMessage], @" on channel ", [((JavaNioChannelsSelectionKey *) nil_chk(key)) channel])];
    [e printStackTrace];
  }
}

JavaNioByteBuffer *EduUmassCsNioSSLDataProcessingWorker_extractMessageWithJavaNioChannelsSelectionKey_withJavaNioByteBuffer_(EduUmassCsNioSSLDataProcessingWorker *self, JavaNioChannelsSelectionKey *key, JavaNioByteBuffer *incoming) {
  EduUmassCsNioNIOTransport_AlternatingByteBuffer *abbuf = (EduUmassCsNioNIOTransport_AlternatingByteBuffer *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(key)) attachment], [EduUmassCsNioNIOTransport_AlternatingByteBuffer class]);
  JreAssert(((abbuf != nil)), (@"edu/umass/cs/nio/SSLDataProcessingWorker.java:303 condition failed: assert (abbuf != null);"));
  if ([((JavaNioByteBuffer *) nil_chk(((EduUmassCsNioNIOTransport_AlternatingByteBuffer *) nil_chk(abbuf))->headerBuf_)) remaining] > 0) {
    EduUmassCsUtilsUtil_putWithJavaNioByteBuffer_withJavaNioByteBuffer_(abbuf->headerBuf_, incoming);
    if ([abbuf->headerBuf_ remaining] == 0) {
      JreStrongAssign(&abbuf->bodyBuf_, JavaNioByteBuffer_allocateWithInt_(EduUmassCsNioNIOTransport_getPayloadLengthWithJavaNioByteBuffer_((JavaNioByteBuffer *) cast_chk([abbuf->headerBuf_ flip], [JavaNioByteBuffer class]))));
      JreAssert(((abbuf->bodyBuf_ != nil && [abbuf->bodyBuf_ capacity] > 0)), (@"edu/umass/cs/nio/SSLDataProcessingWorker.java:310 condition failed: assert (abbuf.bodyBuf != null && abbuf.bodyBuf.capacity() > 0);"));
    }
  }
  JavaNioByteBuffer *retval = nil;
  if (abbuf->bodyBuf_ != nil) {
    EduUmassCsUtilsUtil_putWithJavaNioByteBuffer_withJavaNioByteBuffer_(abbuf->bodyBuf_, incoming);
    if ([((JavaNioByteBuffer *) nil_chk(abbuf->bodyBuf_)) remaining] == 0) {
      retval = (JavaNioByteBuffer *) cast_chk([((JavaNioByteBuffer *) nil_chk(abbuf->bodyBuf_)) flip], [JavaNioByteBuffer class]);
      [abbuf clear];
    }
  }
  return retval;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioSSLDataProcessingWorker)

J2OBJC_INITIALIZED_DEFN(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES)

EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_values_[3];

@implementation EduUmassCsNioSSLDataProcessingWorker_SSL_MODES

+ (IOSObjectArray *)values {
  return EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_values();
}

+ (EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *)valueOfWithNSString:(NSString *)name {
  return EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CLEAR", "LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "SERVER_AUTH", "LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "MUTUAL_AUTH", "LEduUmassCsNioSSLDataProcessingWorker_SSL_MODES;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES, CLEAR), &JreEnum(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES, SERVER_AUTH), &JreEnum(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES, MUTUAL_AUTH), "LEduUmassCsNioSSLDataProcessingWorker;", "Ljava/lang/Enum<Ledu/umass/cs/nio/SSLDataProcessingWorker$SSL_MODES;>;" };
  static const J2ObjcClassInfo _EduUmassCsNioSSLDataProcessingWorker_SSL_MODES = { "SSL_MODES", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_EduUmassCsNioSSLDataProcessingWorker_SSL_MODES;
}

+ (void)initialize {
  if (self == [EduUmassCsNioSSLDataProcessingWorker_SSL_MODES class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"CLEAR", @"SERVER_AUTH", @"MUTUAL_AUTH",
    };
    for (jint i = 0; i < 3; i++) {
      (EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES)
  }
}

@end

void EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_initWithNSString_withInt_(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_values() {
  EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_initialize();
  return [IOSObjectArray arrayWithObjects:EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_values_ count:3 type:EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_class_()];
}

EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_valueOfWithNSString_(NSString *name) {
  EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_initialize();
  for (int i = 0; i < 3; i++) {
    EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *e = EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduUmassCsNioSSLDataProcessingWorker_SSL_MODES *EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_fromOrdinal(NSUInteger ordinal) {
  EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return EduUmassCsNioSSLDataProcessingWorker_SSL_MODES_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioSSLDataProcessingWorker_SSL_MODES)

@implementation EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl

- (instancetype)initWithEduUmassCsNioSSLDataProcessingWorker:(EduUmassCsNioSSLDataProcessingWorker *)outer$
                             withJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key
                                    withJavaxNetSslSSLEngine:(JavaxNetSslSSLEngine *)engine
                              withJavaUtilConcurrentExecutor:(id<JavaUtilConcurrentExecutor>)taskWorkers {
  EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_initWithEduUmassCsNioSSLDataProcessingWorker_withJavaNioChannelsSelectionKey_withJavaxNetSslSSLEngine_withJavaUtilConcurrentExecutor_(self, outer$, key, engine, taskWorkers);
  return self;
}

- (void)onInboundDataWithJavaNioByteBuffer:(JavaNioByteBuffer *)decrypted {
  [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduUmassCsNioSSLDataProcessingWorker, log))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST) withNSString:@"{0} received decrypted data of length {1} bytes on channel {2}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, JavaLangInteger_valueOfWithInt_([((JavaNioByteBuffer *) nil_chk(decrypted)) remaining]), ((JavaNioChannelsSocketChannel *) cast_chk(([((JavaNioChannelsSelectionKey *) nil_chk(key_)) channel]), [JavaNioChannelsSocketChannel class])) } count:3 type:NSObject_class_()]];
  EduUmassCsNioSSLDataProcessingWorker_extractMessagesWithJavaNioChannelsSelectionKey_withJavaNioByteBuffer_(this$0_, key_, decrypted);
}

- (void)onHandshakeFailureWithJavaLangException:(JavaLangException *)cause {
  [((JavaLangException *) nil_chk(cause)) printStackTrace];
  [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduUmassCsNioSSLDataProcessingWorker, log))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"{0} encountered SSL handshake failure; cleaning up channel {1}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, [((JavaNioChannelsSelectionKey *) nil_chk(key_)) channel] } count:2 type:NSObject_class_()]];
  EduUmassCsNioSSLDataProcessingWorker_cleanupWithJavaNioChannelsSelectionKey_(this$0_, key_);
}

- (void)onHandshakeSuccess {
  EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_setHandshakeComplete(self);
  [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduUmassCsNioSSLDataProcessingWorker, log))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"{0} conducted successful SSL handshake for channel {1}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, [((JavaNioChannelsSelectionKey *) nil_chk(key_)) channel] } count:2 type:NSObject_class_()]];
}

- (void)onClosed {
  [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduUmassCsNioSSLDataProcessingWorker, log))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"{0} cleaning up closed SSL channel {1}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, [((JavaNioChannelsSelectionKey *) nil_chk(key_)) channel] } count:2 type:NSObject_class_()]];
  EduUmassCsNioSSLDataProcessingWorker_cleanupWithJavaNioChannelsSelectionKey_(this$0_, key_);
}

- (void)onOutboundDataWithJavaNioByteBuffer:(JavaNioByteBuffer *)encrypted {
  JavaNioChannelsSocketChannel *channel = ((JavaNioChannelsSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(key_)) channel], [JavaNioChannelsSocketChannel class]));
  @try {
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduUmassCsNioSSLDataProcessingWorker, log))) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST) withNSString:@"{0} sending encrypted data of length {1} bytes to send on channel {2}" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, JavaLangInteger_valueOfWithInt_([((JavaNioByteBuffer *) nil_chk(encrypted)) remaining]), channel } count:3 type:NSObject_class_()]];
    JreAssert(((key_ != nil)), (@"edu/umass/cs/nio/SSLDataProcessingWorker.java:204 condition failed: assert (key != null);"));
    jint totalLength = [encrypted remaining];
    for (jint attempts = 0; (attempts < 1 || !EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_isHandshakeComplete(self)) && [encrypted hasRemaining]; attempts++) [((JavaNioChannelsSocketChannel *) nil_chk(channel)) writeWithJavaNioByteBuffer:encrypted];
    EduUmassCsNioNioutilsNIOInstrumenter_incrEncrBytesSentWithInt_(totalLength - [encrypted remaining]);
    if ([encrypted hasRemaining]) [JreLoadStatic(EduUmassCsNioSSLDataProcessingWorker, log) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:@"{0} failed to bulk-write {1} bytes despite multiple attempts ({2} bytes left unsent)" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, JavaLangInteger_valueOfWithInt_(totalLength), JavaLangInteger_valueOfWithInt_([encrypted remaining]) } count:3 type:NSObject_class_()]];
  }
  @catch (JavaIoIOException *exc) {
    [JreLoadStatic(EduUmassCsNioSSLDataProcessingWorker, log) severeWithNSString:JreStrcat("@$$$", self, @" ran into ", [[((JavaLangException *) nil_chk(exc)) java_getClass] getSimpleName], @"  while writing outbound data; closing channel")];
    EduUmassCsNioSSLDataProcessingWorker_cleanupWithJavaNioChannelsSelectionKey_(this$0_, key_);
    @throw create_JavaLangIllegalStateException_initWithNSException_(exc);
  }
  @catch (JavaLangIllegalStateException *exc) {
    [JreLoadStatic(EduUmassCsNioSSLDataProcessingWorker, log) severeWithNSString:JreStrcat("@$$$", self, @" ran into ", [[((JavaLangException *) nil_chk(exc)) java_getClass] getSimpleName], @"  while writing outbound data; closing channel")];
    EduUmassCsNioSSLDataProcessingWorker_cleanupWithJavaNioChannelsSelectionKey_(this$0_, key_);
    @throw create_JavaLangIllegalStateException_initWithNSException_(exc);
  }
}

- (NSString *)description {
  return JreStrcat("$$", [[self java_getClass] getSimpleName], [this$0_ getMyID]);
}

- (jboolean)isHandshakeComplete {
  return EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_isHandshakeComplete(self);
}

- (void)setHandshakeComplete {
  EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_setHandshakeComplete(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(engine_NonBlockingSSLImpl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduUmassCsNioSSLDataProcessingWorker:withJavaNioChannelsSelectionKey:withJavaxNetSslSSLEngine:withJavaUtilConcurrentExecutor:);
  methods[1].selector = @selector(onInboundDataWithJavaNioByteBuffer:);
  methods[2].selector = @selector(onHandshakeFailureWithJavaLangException:);
  methods[3].selector = @selector(onHandshakeSuccess);
  methods[4].selector = @selector(onClosed);
  methods[5].selector = @selector(onOutboundDataWithJavaNioByteBuffer:);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(isHandshakeComplete);
  methods[8].selector = @selector(setHandshakeComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduUmassCsNioSSLDataProcessingWorker;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "engine_NonBlockingSSLImpl_", "LJavaxNetSslSSLEngine;", .constantValue.asLong = 0, 0x10, 7, -1, -1, -1 },
    { "handshakeComplete_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNioChannelsSelectionKey;LJavaxNetSslSSLEngine;LJavaUtilConcurrentExecutor;", "onInboundData", "LJavaNioByteBuffer;", "onHandshakeFailure", "LJavaLangException;", "onOutboundData", "toString", "engine", "LEduUmassCsNioSSLDataProcessingWorker;" };
  static const J2ObjcClassInfo _EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl = { "NonBlockingSSLImpl", "edu.umass.cs.nio", ptrTable, methods, fields, 7, 0x0, 9, 3, 8, -1, -1, -1, -1 };
  return &_EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl;
}

@end

void EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_initWithEduUmassCsNioSSLDataProcessingWorker_withJavaNioChannelsSelectionKey_withJavaxNetSslSSLEngine_withJavaUtilConcurrentExecutor_(EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl *self, EduUmassCsNioSSLDataProcessingWorker *outer$, JavaNioChannelsSelectionKey *key, JavaxNetSslSSLEngine *engine, id<JavaUtilConcurrentExecutor> taskWorkers) {
  JreStrongAssign(&self->this$0_, outer$);
  EduUmassCsNioAbstractNIOSSL_initWithJavaNioChannelsSelectionKey_withJavaxNetSslSSLEngine_withJavaUtilConcurrentExecutor_withNSString_(self, key, engine, taskWorkers, outer$->myID_);
  self->handshakeComplete_ = false;
  JreStrongAssign(&self->engine_NonBlockingSSLImpl_, engine);
}

EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl *new_EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_initWithEduUmassCsNioSSLDataProcessingWorker_withJavaNioChannelsSelectionKey_withJavaxNetSslSSLEngine_withJavaUtilConcurrentExecutor_(EduUmassCsNioSSLDataProcessingWorker *outer$, JavaNioChannelsSelectionKey *key, JavaxNetSslSSLEngine *engine, id<JavaUtilConcurrentExecutor> taskWorkers) {
  J2OBJC_NEW_IMPL(EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl, initWithEduUmassCsNioSSLDataProcessingWorker_withJavaNioChannelsSelectionKey_withJavaxNetSslSSLEngine_withJavaUtilConcurrentExecutor_, outer$, key, engine, taskWorkers)
}

EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl *create_EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_initWithEduUmassCsNioSSLDataProcessingWorker_withJavaNioChannelsSelectionKey_withJavaxNetSslSSLEngine_withJavaUtilConcurrentExecutor_(EduUmassCsNioSSLDataProcessingWorker *outer$, JavaNioChannelsSelectionKey *key, JavaxNetSslSSLEngine *engine, id<JavaUtilConcurrentExecutor> taskWorkers) {
  J2OBJC_CREATE_IMPL(EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl, initWithEduUmassCsNioSSLDataProcessingWorker_withJavaNioChannelsSelectionKey_withJavaxNetSslSSLEngine_withJavaUtilConcurrentExecutor_, outer$, key, engine, taskWorkers)
}

jboolean EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_isHandshakeComplete(EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl *self) {
  @synchronized(self) {
    return self->handshakeComplete_;
  }
}

void EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl_setHandshakeComplete(EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl *self) {
  @synchronized(self) {
    self->handshakeComplete_ = true;
    [((id<EduUmassCsNioInterfacesHandshakeCallback>) nil_chk(self->this$0_->callbackTransport_)) handshakeCompleteWithJavaNioChannelsSelectionKey:self->key_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsNioSSLDataProcessingWorker_NonBlockingSSLImpl)
