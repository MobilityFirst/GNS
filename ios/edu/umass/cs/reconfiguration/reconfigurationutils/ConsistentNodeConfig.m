//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../../gig_ios/src/edu/umass/cs/reconfiguration/reconfigurationutils/ConsistentNodeConfig.java
//

#include "J2ObjC_source.h"
#include "edu/umass/cs/nio/interfaces/NodeConfig.h"
#include "edu/umass/cs/reconfiguration/reconfigurationutils/ConsistentHashing.h"
#include "edu/umass/cs/reconfiguration/reconfigurationutils/ConsistentNodeConfig.h"
#include "java/lang/RuntimeException.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/util/Set.h"
#include "org/json/JSONArray.h"

@interface EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig () {
 @public
  id<EduUmassCsNioInterfacesNodeConfig> nodeConfig_;
  id<JavaUtilSet> nodes_;
  EduUmassCsReconfigurationReconfigurationutilsConsistentHashing *CH_;
}

- (jboolean)refresh;

@end

J2OBJC_FIELD_SETTER(EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig, nodeConfig_, id<EduUmassCsNioInterfacesNodeConfig>)
J2OBJC_FIELD_SETTER(EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig, nodes_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig, CH_, EduUmassCsReconfigurationReconfigurationutilsConsistentHashing *)

__attribute__((unused)) static jboolean EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig_refresh(EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig *self);

@implementation EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig

- (instancetype)initWithEduUmassCsNioInterfacesNodeConfig:(id<EduUmassCsNioInterfacesNodeConfig>)nc {
  EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig_initWithEduUmassCsNioInterfacesNodeConfig_(self, nc);
  return self;
}

- (jboolean)refresh {
  return EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig_refresh(self);
}

- (id<JavaUtilSet>)getReplicatedServersWithNSString:(NSString *)name {
  EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig_refresh(self);
  return [((EduUmassCsReconfigurationReconfigurationutilsConsistentHashing *) nil_chk(self->CH_)) getReplicatedServersWithNSString:name];
}

- (jboolean)nodeExistsWithId:(id)id_ {
  return [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(self->nodeConfig_)) nodeExistsWithId:id_];
}

- (JavaNetInetAddress *)getNodeAddressWithId:(id)id_ {
  return [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(self->nodeConfig_)) getNodeAddressWithId:id_];
}

- (JavaNetInetAddress *)getBindAddressWithId:(id)id_ {
  return [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(self->nodeConfig_)) getBindAddressWithId:id_];
}

- (jint)getNodePortWithId:(id)id_ {
  return [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(self->nodeConfig_)) getNodePortWithId:id_];
}

- (JavaNetInetSocketAddress *)getNodeSocketAddressWithId:(id)id_ {
  JavaNetInetAddress *ip = [self getNodeAddressWithId:id_];
  return (ip != nil ? create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(ip, [self getNodePortWithId:id_]) : nil);
}

- (id<JavaUtilSet>)getNodeIDs {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"The use of this method is not permitted");
}

- (id)valueOfWithNSString:(NSString *)strValue {
  return [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(self->nodeConfig_)) valueOfWithNSString:strValue];
}

- (id<JavaUtilSet>)getValuesFromStringSetWithJavaUtilSet:(id<JavaUtilSet>)strNodes {
  return [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(self->nodeConfig_)) getValuesFromStringSetWithJavaUtilSet:strNodes];
}

- (id<JavaUtilSet>)getValuesFromJSONArrayWithOrgJsonJSONArray:(OrgJsonJSONArray *)array {
  return [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(self->nodeConfig_)) getValuesFromJSONArrayWithOrgJsonJSONArray:array];
}

- (void)dealloc {
  RELEASE_(nodeConfig_);
  RELEASE_(nodes_);
  RELEASE_(CH_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, 8, 6, -1, 9, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x1, 10, 6, -1, 9, -1, -1 },
    { NULL, "I", 0x1, 11, 6, -1, 12, -1, -1 },
    { NULL, "LJavaNetInetSocketAddress;", 0x1, 13, 6, -1, 14, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 3, -1, 17, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 21, 22, 23, 24, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduUmassCsNioInterfacesNodeConfig:);
  methods[1].selector = @selector(refresh);
  methods[2].selector = @selector(getReplicatedServersWithNSString:);
  methods[3].selector = @selector(nodeExistsWithId:);
  methods[4].selector = @selector(getNodeAddressWithId:);
  methods[5].selector = @selector(getBindAddressWithId:);
  methods[6].selector = @selector(getNodePortWithId:);
  methods[7].selector = @selector(getNodeSocketAddressWithId:);
  methods[8].selector = @selector(getNodeIDs);
  methods[9].selector = @selector(valueOfWithNSString:);
  methods[10].selector = @selector(getValuesFromStringSetWithJavaUtilSet:);
  methods[11].selector = @selector(getValuesFromJSONArrayWithOrgJsonJSONArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nodeConfig_", "LEduUmassCsNioInterfacesNodeConfig;", .constantValue.asLong = 0, 0x12, -1, -1, 25, -1 },
    { "nodes_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 26, -1 },
    { "CH_", "LEduUmassCsReconfigurationReconfigurationutilsConsistentHashing;", .constantValue.asLong = 0, 0x12, -1, -1, 27, -1 },
  };
  static const void *ptrTable[] = { "LEduUmassCsNioInterfacesNodeConfig;", "(Ledu/umass/cs/nio/interfaces/NodeConfig<TNodeIDType;>;)V", "getReplicatedServers", "LNSString;", "(Ljava/lang/String;)Ljava/util/Set<TNodeIDType;>;", "nodeExists", "LNSObject;", "(TNodeIDType;)Z", "getNodeAddress", "(TNodeIDType;)Ljava/net/InetAddress;", "getBindAddress", "getNodePort", "(TNodeIDType;)I", "getNodeSocketAddress", "(TNodeIDType;)Ljava/net/InetSocketAddress;", "()Ljava/util/Set<TNodeIDType;>;", "valueOf", "(Ljava/lang/String;)TNodeIDType;", "getValuesFromStringSet", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)Ljava/util/Set<TNodeIDType;>;", "getValuesFromJSONArray", "LOrgJsonJSONArray;", "LOrgJsonJSONException;", "(Lorg/json/JSONArray;)Ljava/util/Set<TNodeIDType;>;", "Ledu/umass/cs/nio/interfaces/NodeConfig<TNodeIDType;>;", "Ljava/util/Set<TNodeIDType;>;", "Ledu/umass/cs/reconfiguration/reconfigurationutils/ConsistentHashing<TNodeIDType;>;", "<NodeIDType:Ljava/lang/Object;>Ljava/lang/Object;Ledu/umass/cs/nio/interfaces/NodeConfig<TNodeIDType;>;" };
  static const J2ObjcClassInfo _EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig = { "ConsistentNodeConfig", "edu.umass.cs.reconfiguration.reconfigurationutils", ptrTable, methods, fields, 7, 0x401, 12, 3, -1, -1, -1, 28, -1 };
  return &_EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig;
}

@end

void EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig_initWithEduUmassCsNioInterfacesNodeConfig_(EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig *self, id<EduUmassCsNioInterfacesNodeConfig> nc) {
  NSObject_init(self);
  JreStrongAssign(&self->nodeConfig_, nc);
  JreStrongAssign(&self->nodes_, [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(self->nodeConfig_)) getNodeIDs]);
  JreStrongAssignAndConsume(&self->CH_, new_EduUmassCsReconfigurationReconfigurationutilsConsistentHashing_initWithJavaUtilSet_(self->nodes_));
}

jboolean EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig_refresh(EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig *self) {
  @synchronized(self) {
    id<JavaUtilSet> curActives = [((id<EduUmassCsNioInterfacesNodeConfig>) nil_chk(self->nodeConfig_)) getNodeIDs];
    if ([((id<JavaUtilSet>) nil_chk(curActives)) isEqual:self->nodes_]) return false;
    JreStrongAssign(&self->nodes_, (curActives));
    [((EduUmassCsReconfigurationReconfigurationutilsConsistentHashing *) nil_chk(self->CH_)) refreshWithJavaUtilSet:curActives];
    return true;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUmassCsReconfigurationReconfigurationutilsConsistentNodeConfig)
