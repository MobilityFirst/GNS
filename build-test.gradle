
// We want the standard java conventions for everything.
apply plugin: 'java'

ant.importBuild('build.xml') { antTargetName ->
    'ant-' + antTargetName
}

sourceCompatibility = 1.8

// Set the name of the gar to something other than GNS.
archivesBaseName = 'gnsserver'

// Load our numbers from the build.properties files.
Properties properties = new Properties()
properties.load(project.file('build.properties').newDataInputStream())
def buildMajorNumber = properties.getProperty('build.major.number')
def buildMinorNumber = properties.getProperty('build.minor.number')
def buildRevisionNumber = properties.getProperty('build.revision.number')

// Change the locations of the srcs - gradle has different standard locations.
sourceSets {
  main{
    java {
      srcDir 'src'
    }
  }
  test {
    java { 
      srcDir 'test' 
    }
  }
}

repositories {
  mavenCentral()
}

configurations {
  // configuration that holds just the jars to include in the client jar
  clientLib
}

dependencies {
  // Says that the compile config also uses clientLib dependencies
  configurations.compile.extendsFrom(configurations.clientLib)
  
  clientLib files('lib/gigapaxos-1.0.05.jar')
  compile files('lib/context-client-GNS.jar')
  
  compile group: 'org.aspectj', name: 'aspectjrt', version: "1.8.2"
  compile group: 'org.aspectj', name: 'aspectjweaver', version: "1.7.2"
  compile group: 'org.apache.cassandra.deps', name: 'avro', version: '1.4.0-cassandra-1'
  compile group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.11.6'
  compile group: 'org.apache.cassandra', name: 'cassandra-all', version: '1.2.6'
  compile group: 'com.datastax.cassandra', name: 'cassandra-driver-core', version: '1.0.2-dse2'
  compile group: 'org.apache.cassandra', name: 'cassandra-thrift', version: '1.2.6'
  compile group: 'commons-cli', name: 'commons-cli', version: '1.1'
  compile group: 'commons-codec', name: 'commons-codec', version: '1.9'
  clientLib group: 'commons-lang', name: 'commons-lang', version: '2.6'
  compile group: 'org.apache.commons', name:'commons-lang3', version: '3.3.1'
  compile group: 'commons-logging', name: 'commons-logging', version: '1.1.3'
  compile group: 'commons-pool', name: 'commons-pool', version: '1.5.3'
  compile group: 'org.apache.derby', name: 'derby', version: '10.12.1.1'
  compile group: 'dnsjava', name: 'dnsjava', version: '2.1.6'
  compile group: 'org.eclipse.jdt.core.compiler', name: 'ecj', version: '4.6.1'
  compile group: 'org.freemarker', name: 'freemarker', version: '2.3.9'
  compile group: 'com.maxmind.geoip2', name: 'geoip2', version: '2.5.0'
  //compile group: 'com.google.guava', name: 'guava', version: '14.0.1' 
  compile group: 'me.prettyprint', name: 'hector-core', version: '1.0-5'
  compile group: 'me.prettyprint', name: 'hector-test', version: '1.0-5'
  compile group: 'org.apache.httpcomponents', name: 'httpcomponents-client', version: '4.5.2'
  compile group: 'org.apache.httpcomponents', name: 'httpcomponents-core', version: '4.4.4'
  //compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.6.0'
  //compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.6.6'
  //compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.6.6'
  //compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-cbor', version: '2.6.6'
  compile group: 'com.sun.mail', name: 'javax.mail', version: '1.5.5'
  clientLib group: 'jline', name: 'jline', version: '1.0'
  compile group: 'joda-time', name: 'joda-time', version: '2.8.1'
  compile group: 'com.jcraft', name: 'jsch', version: '0.1.51'
  compile group: 'log4j', name: 'log4j', version: '1.2.16'
  compile group: 'com.maxmind.db', name: 'maxmind-db', version: '1.1.0'
  compile group: 'org.mongodb', name: 'mongo-java-driver', version: '2.12.1'
  compile group: 'org.springframework', name: 'spring-beans', version: '3.0.7.RELEASE'
  compile group: 'org.springframework', name: 'spring-context', version: '3.0.7.RELEASE'
  compile group: 'org.springframework', name: 'spring-core', version: '3.0.7.RELEASE'
  compile group: 'org.springframework', name: 'spring-test', version: '3.0.7.RELEASE'
    
  // Use android for compling, but not runtime
  compileOnly group: 'com.google.android', name: 'android', version: '4.1.1.4'
  
  // Use these jars for unit testing
  testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
  testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
  testCompile group: 'junit', name: 'junit', version: '4.12'
}


// redefine the overall jar task to produce our 3 jars
task jar(type: Jar, overwrite: true, 
  // Note that we enforce an explicit ordering later in this file with
  // "createSymLinks.mustRunAfter createJars"
  // and a "createJars.mustRunAfter increaseBuildNumber"
  dependsOn: ['increaseBuildNumber', 'createJars', 'createSymLinks', 'fetchGPServer']) {
}

task createJars(type: Jar, overwrite: true, 
  dependsOn: ['copyServerFatJar', 'copyClientFatJar', 'copyClientConsoleFatJar']) {
}

// Builds a fat jar for the server with all jars included.
task serverFatJar(type: Jar, dependsOn: [':compileJava', ':processResources']) {
  baseName = 'gnsserver'
  // all the source classes except client
  from files(sourceSets.main.output.classesDir) {
    exclude 'edu/umass/cs/gnsclient/**'
  }
  // all the libs
  from configurations.runtime.asFileTree.files.collect {  
    zipTree(it) 
  }
  // config files
  from('conf')
  // Handle the version info
  Properties properties3 = new Properties()
  properties3.load(project.file('build.number').newDataInputStream())
  def buildNumber = properties3.getProperty('build.number')
  version = "${buildMajorNumber}.${buildMinorNumber}.${buildRevisionNumber}"
  def fullVersion = "${buildMajorNumber}.${buildMinorNumber}.${buildRevisionNumber}_${buildNumber}"
  //System.out.println("Build version: ${fullVersion}")

  manifest {
    // Todo: Add more of these back from the ant build file
    attributes 'Built-By': System.getProperty('user.name'),
               'Built-Date': new Date(),
               'Main-Class': 'edu.umass.cs.gns.httpserver.GNSHttpServer',
               'Build-Version': "${fullVersion}",
               'Implementation-Vendor': 'University of Massachusetts',
               'Implementation-Title': 'GNS',
               'Implementation-Version': "$version"
  }
}

task copyServerFatJar(type: Copy) {
  from serverFatJar
  into 'jars'
} 

// Builds a fat jar for the client with all jars included.
task clientFatJar(type: Jar, dependsOn: [':compileJava', ':processResources']) {
  baseName = 'gnsclient'
  // all the source class files
  from files(sourceSets.main.output.classesDir) {
  }
  // all the test classes
  from('build/classes/test')
  // the needed libs for the client
  from configurations.clientLib.asFileTree.files.collect {  
    zipTree(it) 
  }
  // key and trust files
  from('conf') {
    include 'trustStore/**'
    include 'keyStore/**'
  }
  // Handle the version info
  Properties properties3 = new Properties()
  properties3.load(project.file('build.number').newDataInputStream())
  def buildNumber = properties3.getProperty('build.number')
  version = "${buildMajorNumber}.${buildMinorNumber}.${buildRevisionNumber}"
  def fullVersion = "${buildMajorNumber}.${buildMinorNumber}.${buildRevisionNumber}_${buildNumber}"
  //System.out.println("Build version: ${fullVersion}")

  manifest {
    // Todo: Add more of these back from the ant build file
    attributes 'Built-By': System.getProperty('user.name'),
               'Built-Date': new Date(),
               'Class-Path': '.',
               'Build-Version': "${fullVersion}",
               'Implementation-Vendor': 'University of Massachusetts',
               'Implementation-Title': 'GNS Client',
               'Implementation-Version': "$version"
  }
}

task copyClientFatJar(type: Copy) {
  from clientFatJar
  into 'jars'
} 

// Builds a fat jar for the CLI with all jars included.
task clientConsoleFatJar(type: Jar, dependsOn: [':compileJava', ':processResources']) {
  baseName = 'gns-cli'
  // all the class files
  from files(sourceSets.main.output.classesDir) {
  }
  // the needed libs for the client
  from configurations.clientLib.asFileTree.files.collect {  
    zipTree(it) 
  }
  // key and trust files
  from('conf') {
    include 'trustStore/**'
    include 'keyStore/**'
  }
  from ('src') {
    include 'edu/umass/cs/gnsclient/console/console.properties'
  }
  // Handle the version info
  Properties properties3 = new Properties()
  properties3.load(project.file('build.number').newDataInputStream())
  def buildNumber = properties3.getProperty('build.number')
  version = "${buildMajorNumber}.${buildMinorNumber}.${buildRevisionNumber}"
  def fullVersion = "${buildMajorNumber}.${buildMinorNumber}.${buildRevisionNumber}_${buildNumber}"
  //System.out.println("Build version: ${fullVersion}")

  manifest {
    // Todo: Add more of these back from the ant build file
    attributes 'Built-By': System.getProperty('user.name'),
               'Built-Date': new Date(),
               'Build-Version': "${fullVersion}",
               'Main-Class': 'edu.umass.cs.gnsclient.console.CommandLineInterface',
               'Implementation-Vendor': 'University of Massachusetts',
               'Implementation-Title': 'GNS CLI',
               'Implementation-Version': "$version"
  }
}

task copyClientConsoleFatJar(type: Copy) {
  from clientConsoleFatJar
  into 'jars'
}  

task createSymLinks {
  Properties properties3 = new Properties()
  properties3.load(project.file('build.number').newDataInputStream())
  def buildNumber = properties3.getProperty('build.number')
  def resourceVersion = "${buildMajorNumber}.${buildMinorNumber}.${buildRevisionNumber}"
  doLast {
    ant.symlink (link: 'jars/GNS.jar', overwrite: 'yes', 
      resource: "gnsserver-${resourceVersion}.jar") 
    ant.symlink (link: 'jars/GNSClient.jar', overwrite: 'yes', 
      resource: "gnsclient-${resourceVersion}.jar") 
    ant.symlink (link: 'jars/GNS-CLI.jar', overwrite: 'yes', 
      resource: "gns-cli-${resourceVersion}.jar") 
  }
}

createSymLinks.mustRunAfter createJars

task fetchGPServer {
  doLast {
    ant.mkdir (dir: 'bin')
    ant.get (src: 'https://raw.githubusercontent.com/MobilityFirst/gigapaxos/master/bin/gpServer.sh', dest:'bin')
    ant.get (src: 'https://raw.githubusercontent.com/MobilityFirst/gigapaxos/master/bin/gpClient.sh', dest:'bin')
    // make scripts executable
    ant.chmod (perm:'ug+x', dir:'bin', includes: '**/*.sh')
  }
}

// Along with the one below this updates the build.number whenever a jar is created.
task increaseBuildNumber {
  doFirst {
    ant.buildnumber (file: 'build.number')
  }
  Properties properties2 = new Properties()
  properties2.load(project.file('build.number').newDataInputStream())
  def buildNumber = Integer.parseInt(properties2.getProperty('build.number')) + 1
  System.out.println("buildNumber: ${buildNumber}")
  properties2.setProperty('build.number', Integer.toString(buildNumber))
  properties2.store(project.file('build.number').newWriter(), null) 
}

createJars.mustRunAfter increaseBuildNumber

