This README explains the following: (1) Testing gigapaxos on a single machine; (2) Testing
gigapaxos in a distributed setting; (3) Writing a simple application using gigapaxos. 

For all of the steps below, you first need to either check out the GNS code from the 
repository and compile it using "ant" in the top-level directory so as to create "GNS.jar"
(in the dist/ subdirectory by default) or otherwise obtain a copy of GNS.jar.

(1) Testing gigapaxos on a single machine

Run the following command: 

$ java -ea -Xms4096M -cp /path/to/GNS.jar edu.umass.cs.gigapaxos.testing.TESTPaxosMain -c 2>/tmp/run1

The above command will try to create a sub-directory called 'paxos_logs' from wherever it
is run, so you need to have write permissions in that directory. Running it again without 
the '-c' option will continue from where the first run left off as crash recovery is 
enabled by default. The '-c' option will wipe out pre-existing logs, effectively 
disabling  recovery.

If successful, you should see a sequence of "SUCCESS" messages on the console at the end 
of the test run. The test will dump debug logs in /tmp/run1 so that you can see the 
console output clearly. If the test appears to be stuck with no console output and without
returning control to the command-line prompt, or if it throws exceptions on the console, 
it has likely failed. If the test fails, you can try reducing the request load or the
total number of requests in the conf/gigapaxos/testing.properties config file.

In order to completely remove a pre-existing log database, do 'rm -r paxos_logs/'. 
The '-c' option only clears tables while the command-line 'rm -r paxos_logs' option 
removes the whole database. The latter option is needed if you make code changes that 
change the schema of existing tables because they would conflict with recovery logs.
 
(2) Testing gigapaxos in a distributed setting

A distributed test requires two or more machines to run servers and clients. The servers 
need to be specified in a config file as exemplified below. 

100 date.cs.umass.edu
101 plum.cs.umass.edu
102 pear.cs.umass.edu

The clients can run on any machine and do not have to be specified in the config file. 
gigapaxos expects to find the config file in a file called "testing_servers.conf" in
the directory TESTPaxosConfig.DISTRIBUTED_CONFIG_DIR.
The name and path of the config file can be specified in TESTPaxosConfig.testing_servers.conf 
and TESTPaxosConfig.DISTRIBUTED_CONFIG_DIR respectively. These files are by default located
in conf/gigapaxos/ subdirectory in the top-level GNS directory. 
 
The servers must be started first in any order as follows:

[date$] java -ea -Xms4096M -cp /path/to/GNS.jar edu.umass.cs.gigapaxos.testing.TESTPaxosNode 100 2>/tmp/run1
[plum$] java -ea -Xms4096M -cp /path/to/GNS.jar edu.umass.cs.gigapaxos.testing.TESTPaxosNode 101 2>/tmp/run1
[pear$] java -ea -Xms4096M -cp /path/to/GNS.jar edu.umass.cs.gigapaxos.testing.TESTPaxosNode 102 2>/tmp/run1

The client must be started after at least two of the above servers are up. A server is
up after it has stopped printing console output for more than a few seconds. The clients
are started as follows:

[fig$] java -ea -Xms1024M -cp /path/to/GNS.jar edu.umass.cs.gigapaxos.TESTPaxosClient 2>/tmp/run1

If the test is successful, the console output should print a sequence of "SUCCESS" just as 
in the single machine test.

(3) Writing a simple application using gigapaxos

FIXME: To be detailed further. Refer TESTPaxosClient for now to get an idea of how to make 
and send a request from a remote client. 

An application may also be co-located in the same JVM as the servers and can explicitly 
invoke PaxosManager.propose(.) instead of transmitting the request as above from a client 
to a server across a network. For the co-located case, each application node must first
start PaxosManager and then create the corresponding paxos instances, as exemplified in
TESTPaxosNode.java.

The application itself must be an instance of Replicable. See TESTReplicable.java for a
simple example that simply echoes back the request (with some instrumentation additions).  


