package edu.umass.cs.gns.nsdesign.packet;

import edu.umass.cs.gns.nsdesign.nodeconfig.NodeId;
import edu.umass.cs.gns.nsdesign.packet.Packet.PacketType;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * This packet is sent by a replica controller to an active replica while changing the
 * set of active replicas for a name. Active replica, on receiving the packet, proposes
 * a request to stop the current set of active replicas.
 *
 * Further, once the active replicas are stopped, active replicas changes the packet type
 * field to <code>OLD_ACTIVE_STOP_CONFIRM_TO_PRIMARY</code> and send the same packet to
 * primaries.
 *
 *
 * Refer to the classes <link>StopActiveSetTask</link>
 * for more documentation.
 */
public class OldActiveSetStopPacket extends BasicPacket {

  private final static String REQ_ID = "reqID";

  private final static String NAME = "name";

  private final static String PRIMARY_SENDER = "primarySender";

  private final static String ACTIVE_RECEIVER = "activeReceiver";

  private final static String VERSION = "version";

  /**
   * Unique request ID generated by the replica controller.
   */
  private int requestID;

  /**
   * name for which the proposal is being done.
   */
  private String name;

  /**
   * primary node that sent this message
   */
  private NodeId<String> primarySender;

  /**
   * active who received this message from primary
   */
  private NodeId<String> activeReceiver;

  /**
   * Actives ID that is requested to be stopped.
   */
  private short version;

  /**
   *
   * @param name
   * @param primarySender
   */
  public OldActiveSetStopPacket(String name, int requestID, NodeId<String> primarySender, NodeId<String> activeReceiver, short version, PacketType type1) {
    this.name = name;
    this.requestID = requestID;
    this.type = type1;
    this.primarySender = primarySender;
    this.activeReceiver = activeReceiver;
    this.version = version;
  }

  public OldActiveSetStopPacket(JSONObject json) throws JSONException {
    this.type = Packet.getPacketType(json);
    this.requestID = json.getInt(REQ_ID);
    this.name = json.getString(NAME);
    this.primarySender = new NodeId<String>(json.getString(PRIMARY_SENDER));
    this.activeReceiver = new NodeId<String>(json.getString(ACTIVE_RECEIVER));
    this.version = (short) json.getInt(VERSION);
  }

  /**
   * JSON object that is implemented.
   *
   * @return
   * @throws org.json.JSONException
   */
  @Override
  public JSONObject toJSONObject() throws JSONException {
    JSONObject json = new JSONObject();
    Packet.putPacketType(json, getType());
    json.put(REQ_ID, requestID);
    json.put(NAME, name);
    json.put(PRIMARY_SENDER, primarySender.toString());
    json.put(ACTIVE_RECEIVER, activeReceiver.toString());
    json.put(VERSION, version);
    return json;
  }

  public int getRequestID() {
    return requestID;
  }

  public String getName() {
    return name;
  }

  public NodeId<String> getPrimarySender() {
    return primarySender;
  }

  public NodeId<String> getActiveReceiver() {
    return activeReceiver;
  }

  public short getVersion() {
    return version;
  }

  /**
   * Once the actives are stopped, the active replica changes the packet type
   * before sending response to primary replica. The packet type field helps the receiving node
   * to identify that this is a reply from an active replica.
   */
  public void changePacketTypeToConfirm() {
    setType(PacketType.OLD_ACTIVE_STOP_CONFIRM_TO_PRIMARY);
  }

  public void changePacketTypeToActiveRemoved() {
    setType(PacketType.ACTIVE_REMOVE_CONFIRM);
  }

  /**
   * This method is called before proposing the STOP request to active replicas.
   * Active replica changes the packet type to distinguish proposed request from the
   * original packet it received from primary.
   */
}
