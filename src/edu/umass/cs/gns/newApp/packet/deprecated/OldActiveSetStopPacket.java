package edu.umass.cs.gns.newApp.packet.deprecated;

import edu.umass.cs.gigapaxos.InterfaceRequest;
import edu.umass.cs.gns.newApp.packet.BasicPacket;
import edu.umass.cs.gns.newApp.packet.Packet;
import edu.umass.cs.gns.newApp.packet.Packet.PacketType;
import edu.umass.cs.nio.Stringifiable;
import edu.umass.cs.reconfiguration.InterfaceReconfigurableRequest;

import org.json.JSONException;
import org.json.JSONObject;

/**
 * This packet is sent by a replica controller to an active replica while changing the
 * set of active replicas for a name. Active replica, on receiving the packet, proposes
 * a request to stop the current set of active replicas.
 *
 * Further, once the active replicas are stopped, active replicas changes the packet type
 * field to <code>OLD_ACTIVE_STOP_CONFIRM_TO_PRIMARY</code> and send the same packet to
 * primaries.
 *
 *
 * Refer to the classes <link>StopActiveSetTask</link>
 * for more documentation.
 *
 * @param <NodeIDType>
 */
@Deprecated
public class OldActiveSetStopPacket<NodeIDType> extends BasicPacket implements InterfaceRequest, InterfaceReconfigurableRequest {

  private final static String REQ_ID = "reqID";

  private final static String NAME = "name";

  private final static String PRIMARY_SENDER = "primarySender";

  private final static String ACTIVE_RECEIVER = "activeReceiver";

  private final static String VERSION = "version";

  /**
   * Unique request ID generated by the replica controller.
   */
  private final int requestID;

  /**
   * name for which the proposal is being done.
   */
  private final String name;

  /**
   * primary node that sent this message
   */
  private final NodeIDType primarySender;

  /**
   * active who received this message from primary
   */
  private final NodeIDType activeReceiver;

  /**
   * Actives ID that is requested to be stopped.
   */
  private final short version;

  /**
   *
   * @param name
   * @param requestID
   * @param primarySender
   * @param activeReceiver
   * @param version
   * @param type
   */
  public OldActiveSetStopPacket(String name, int requestID, NodeIDType primarySender, NodeIDType activeReceiver, 
          short version, PacketType type) {
    this.name = name;
    this.requestID = requestID;
    this.type = type;
    this.primarySender = primarySender;
    this.activeReceiver = activeReceiver;
    this.version = version;
  }

  /**
   * 
   * @param json
   * @param unstringer
   * @throws JSONException 
   */
  public OldActiveSetStopPacket(JSONObject json, Stringifiable<NodeIDType> unstringer) throws JSONException {
    this.type = Packet.getPacketType(json);
    this.requestID = json.getInt(REQ_ID);
    this.name = json.getString(NAME);
    this.primarySender = unstringer.valueOf(json.getString(PRIMARY_SENDER));
    this.activeReceiver = unstringer.valueOf(json.getString(ACTIVE_RECEIVER));
    this.version = (short) json.getInt(VERSION);
  }

  /**
   * Converts an OldActiveSetStopPacket to a JSONObject.
   *
   * @return
   * @throws org.json.JSONException
   */
  @Override
  public JSONObject toJSONObject() throws JSONException {
    JSONObject json = new JSONObject();
    Packet.putPacketType(json, getType());
    json.put(REQ_ID, requestID);
    json.put(NAME, name);
    json.put(PRIMARY_SENDER, primarySender);
    json.put(ACTIVE_RECEIVER, activeReceiver);
    json.put(VERSION, version);
    return json;
  }

  public int getRequestID() {
    return requestID;
  }

  public String getName() {
    return name;
  }

  public NodeIDType getPrimarySender() {
    return primarySender;
  }

  public NodeIDType getActiveReceiver() {
    return activeReceiver;
  }

  public short getVersion() {
    return version;
  }

  /**
   * Once the actives are stopped, the active replica changes the packet type
   * before sending response to primary replica. The packet type field helps the receiving node
   * to identify that this is a reply from an active replica.
   */
  public void changePacketTypeToConfirm() {
    setType(PacketType.OLD_ACTIVE_STOP_CONFIRM_TO_PRIMARY);
  }

  public void changePacketTypeToActiveRemoved() {
    setType(PacketType.ACTIVE_REMOVE_CONFIRM);
  }

  // For InterfaceRequest
  @Override
  public String getServiceName() {
    return this.name;
  }

  @Override
  public int getEpochNumber() {
    return this.version;
  }

  @Override
  public boolean isStop() {
    return true;
  }
}
