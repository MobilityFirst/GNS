
// We want the standard java conventions for everything.
apply plugin: 'java'
// This is needed if want to publish artifacts
apply plugin: 'maven-publish' 

// For info on the gradle java plugin see https://docs.gradle.org/current/userguide/tutorial_java_projects.html

sourceCompatibility = 1.8

// Load our numbers from the build.properties files.
Properties properties = new Properties()
properties.load(project.file('build.properties').newDataInputStream())
def buildMajorNumber = properties.getProperty('build.major.number')
def buildMinorNumber = properties.getProperty('build.minor.number')
def buildRevisionNumber = properties.getProperty('build.revision.number')
def buildVersion = "${buildMajorNumber}.${buildMinorNumber}.${buildRevisionNumber}"

// Change the locations of the srcs - gradle jar plugin has different standard locations.
sourceSets {
  main{
    java {
      srcDir 'src'
    }
  }
  test {
    java {
      // need the second one for ZDefaultGNSTest
      srcDirs = [ 'test', 'src/edu/umass/cs/gnsserver/utils' ]
    }
  }
}

// define where we get our libs from
repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
  // add a configuration that holds just the jars to include in the client jar
  clientLib
}

dependencies {
  // Says that the compile config also uses clientLib dependencies
  configurations.compile.extendsFrom(configurations.clientLib)
  
  // these two are in the lib directory for now, everything else is handled by maven
  clientLib files('lib/gigapaxos-1.0.05.jar')
  compile files('lib/context-client-GNS.jar')
  
  compile group: 'org.aspectj', name: 'aspectjrt', version: "1.8.2"
  compile group: 'org.aspectj', name: 'aspectjweaver', version: "1.7.2"
  compile group: 'org.apache.cassandra.deps', name: 'avro', version: '1.4.0-cassandra-1'
  compile group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.11.6'
  compile group: 'org.apache.cassandra', name: 'cassandra-all', version: '1.2.6'
  compile group: 'com.datastax.cassandra', name: 'cassandra-driver-core', version: '1.0.2-dse2'
  compile group: 'org.apache.cassandra', name: 'cassandra-thrift', version: '1.2.6'
  compile group: 'commons-cli', name: 'commons-cli', version: '1.1'
  compile group: 'commons-codec', name: 'commons-codec', version: '1.9'
  clientLib group: 'commons-lang', name: 'commons-lang', version: '2.6'
  compile group: 'org.apache.commons', name:'commons-lang3', version: '3.3.1'
  compile group: 'commons-logging', name: 'commons-logging', version: '1.1.3'
  compile group: 'commons-pool', name: 'commons-pool', version: '1.5.3'
  compile group: 'org.apache.derby', name: 'derby', version: '10.12.1.1'
  compile group: 'dnsjava', name: 'dnsjava', version: '2.1.6'
  compile group: 'org.eclipse.jdt.core.compiler', name: 'ecj', version: '4.6.1'
  compile group: 'org.freemarker', name: 'freemarker', version: '2.3.9'
  compile group: 'com.maxmind.geoip2', name: 'geoip2', version: '2.5.0'
  compile group: 'me.prettyprint', name: 'hector-core', version: '1.0-5'
  compile group: 'me.prettyprint', name: 'hector-test', version: '1.0-5'
  compile group: 'org.apache.httpcomponents', name: 'httpcomponents-client', version: '4.5.2'
  compile group: 'org.apache.httpcomponents', name: 'httpcomponents-core', version: '4.4.4'
  compile group: 'com.sun.mail', name: 'javax.mail', version: '1.5.5'
  clientLib group: 'jline', name: 'jline', version: '1.0'
  compile group: 'joda-time', name: 'joda-time', version: '2.8.1'
  compile group: 'com.jcraft', name: 'jsch', version: '0.1.51'
  compile group: 'log4j', name: 'log4j', version: '1.2.16'
  compile group: 'com.maxmind.db', name: 'maxmind-db', version: '1.1.0'
  compile group: 'org.mongodb', name: 'mongo-java-driver', version: '2.12.1'
  compile group: 'org.springframework', name: 'spring-beans', version: '3.0.7.RELEASE'
  compile group: 'org.springframework', name: 'spring-context', version: '3.0.7.RELEASE'
  compile group: 'org.springframework', name: 'spring-core', version: '3.0.7.RELEASE'
  compile group: 'org.springframework', name: 'spring-test', version: '3.0.7.RELEASE'
    
  // Use android for compling, but not runtime
  compileOnly group: 'com.google.android', name: 'android', version: '4.1.1.4'
  
  // Use these jars for unit testing
  testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
  testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
  testCompile group: 'junit', name: 'junit', version: '4.12'
  
}

// Updates the build.number whenever a jar is created.
task incrementBuildNumber {
  doLast {
    ant.buildnumber(file: 'build.number')
  }
}

// redefine the default jar task to produce our 3 jars
task jar(type: Jar, overwrite: true, 
  // Note that we enforce an explicit ordering later in this file with
  // "createSymLinks.mustRunAfter createJars"
  // and a "createJars.mustRunAfter incrementBuildNumber"
  dependsOn: ['incrementBuildNumber', 'createJars', 'createSymLinks', 'fetchGPServer']) {
}

task createJars(type: Jar, overwrite: true, 
  dependsOn: ['copyServerFatJar', 'copyClientFatJar', 'copyClientConsoleFatJar',
  'copyServerThinJar', 'copyClientThinJar', 'copyClientConsoleThinJar']) {
}

createJars.mustRunAfter incrementBuildNumber

task createSymLinks {
  doLast {
    ant.symlink (link: 'jars/GNS.jar', overwrite: 'yes', 
      resource: "gnsserver-${buildVersion}.jar") 
    ant.symlink (link: 'jars/GNSClient.jar', overwrite: 'yes', 
      resource: "gnsclient-${buildVersion}.jar") 
    ant.symlink (link: 'jars/GNS-CLI.jar', overwrite: 'yes', 
      resource: "gns-cli-${buildVersion}.jar") 
  }
}

createSymLinks.mustRunAfter createJars

task fetchGPServer {
  doLast {
    ant.mkdir (dir: 'bin')
    ant.get (src: 'https://raw.githubusercontent.com/MobilityFirst/gigapaxos/master/bin/gpServer.sh', dest:'bin')
    ant.get (src: 'https://raw.githubusercontent.com/MobilityFirst/gigapaxos/master/bin/gpClient.sh', dest:'bin')
    // make scripts executable
    ant.chmod (perm:'ug+x', dir:'bin', includes: '**/*.sh')
  }
}

// Builds a fat jar for the server with all jars included.
task serverFatJar(type: Jar, dependsOn: [':compileJava', ':processResources']) {
  baseName = 'gnsserver'
  // all the source classes except client
  from files(sourceSets.main.output.classesDir) {
    exclude 'edu/umass/cs/gnsclient/**'
  }
  // all the libs
  from configurations.runtime.asFileTree.files.collect {  
    zipTree(it) 
  }
  // config files
  from('conf')
  // Handle the version info
  Properties props = new Properties()
  props.load(project.file('build.number').newDataInputStream())
  def buildNumber = props.getProperty('build.number')
  def fullVersion = "${buildVersion}_${buildNumber}"

  manifest {
    attributes 'Built-By': System.getProperty('user.name'),
               'Built-Date': new Date(),
               'Main-Class': 'edu.umass.cs.gns.httpserver.GNSHttpServer',
               'Build-Version': "${fullVersion}",
               'Implementation-Vendor': 'University of Massachusetts',
               'Implementation-Title': 'GNS',
               'Implementation-Version': "$buildVersion"
  }
}

task copyServerFatJar(type: Copy) {
  from serverFatJar
  into 'jars'
} 

// Builds a this jar for the server
task serverThinJar(type: Jar, dependsOn: [':compileJava', ':processResources']) {
  baseName = 'gnsserver_thin'
  // all the source classes except client
  from files(sourceSets.main.output.classesDir) {
    exclude 'edu/umass/cs/gnsclient/**'
  }
  // config files
  from('conf')
  // Handle the version info
  Properties props = new Properties()
  props.load(project.file('build.number').newDataInputStream())
  def buildNumber = props.getProperty('build.number')
  def fullVersion = "${buildVersion}_${buildNumber}"

  manifest {
    attributes 'Built-By': System.getProperty('user.name'),
               'Built-Date': new Date(),
               'Main-Class': 'edu.umass.cs.gns.httpserver.GNSHttpServer',
               'Build-Version': "${fullVersion}",
               'Implementation-Vendor': 'University of Massachusetts',
               'Implementation-Title': 'GNS',
               'Implementation-Version': "$buildVersion"
  }
}

task copyServerThinJar(type: Copy) {
  from serverThinJar
  into 'jars'
} 

// Builds a fat jar for the client with all jars included.
task clientFatJar(type: Jar, dependsOn: [':compileJava', ':processResources']) {
  baseName = 'gnsclient'
  // all the source class files
  from files(sourceSets.main.output.classesDir) {
  }
  // all the test classes
  from('build/classes/test')
  // the needed libs for the client
  from configurations.clientLib.asFileTree.files.collect {  
    zipTree(it) 
  }
  // key and trust files
  from('conf') {
    include 'trustStore/**'
    include 'keyStore/**'
  }
  // Handle the version info
  Properties props = new Properties()
  props.load(project.file('build.number').newDataInputStream())
  def buildNumber = props.getProperty('build.number')
  def fullVersion = "${buildVersion}_${buildNumber}"

  manifest {
    attributes 'Built-By': System.getProperty('user.name'),
               'Built-Date': new Date(),
               'Class-Path': '.',
               'Build-Version': "${fullVersion}",
               'Implementation-Vendor': 'University of Massachusetts',
               'Implementation-Title': 'GNS Client',
               'Implementation-Version': "$buildVersion"
  }
}

task copyClientFatJar(type: Copy) {
  from clientFatJar
  into 'jars'
} 

// Builds a thin jar for the client
task clientThinJar(type: Jar, dependsOn: [':compileJava', ':processResources']) {
  baseName = 'gnsclient_thin'
  // all the source class files
  from files(sourceSets.main.output.classesDir) {
  }
  // all the test classes
  from('build/classes/test')
  // key and trust files
  from('conf') {
    include 'trustStore/**'
    include 'keyStore/**'
  }
  // Handle the version info
  Properties props = new Properties()
  props.load(project.file('build.number').newDataInputStream())
  def buildNumber = props.getProperty('build.number')
  def fullVersion = "${buildVersion}_${buildNumber}"

  manifest {
    attributes 'Built-By': System.getProperty('user.name'),
               'Built-Date': new Date(),
               'Class-Path': '.',
               'Build-Version': "${fullVersion}",
               'Implementation-Vendor': 'University of Massachusetts',
               'Implementation-Title': 'GNS Client',
               'Implementation-Version': "$buildVersion"
  }
}

task copyClientThinJar(type: Copy) {
  from clientThinJar
  into 'jars'
} 

// Builds a fat jar for the CLI with all jars included.
task clientConsoleFatJar(type: Jar, dependsOn: [':compileJava', ':processResources']) {
  baseName = 'gns-cli'
  // all the class files
  from files(sourceSets.main.output.classesDir) {
  }
  // the needed libs for the client
  from configurations.clientLib.asFileTree.files.collect {  
    zipTree(it) 
  }
  // key and trust files
  from('conf') {
    include 'trustStore/**'
    include 'keyStore/**'
  }
  from ('src') {
    include 'edu/umass/cs/gnsclient/console/console.properties'
  }
  // Handle the version info
  Properties props = new Properties()
  props.load(project.file('build.number').newDataInputStream())
  def buildNumber = props.getProperty('build.number')
  def fullVersion = "${buildVersion}_${buildNumber}"

  manifest {
    attributes 'Built-By': System.getProperty('user.name'),
               'Built-Date': new Date(),
               'Build-Version': "${fullVersion}",
               'Main-Class': 'edu.umass.cs.gnsclient.console.CommandLineInterface',
               'Implementation-Vendor': 'University of Massachusetts',
               'Implementation-Title': 'GNS CLI',
               'Implementation-Version': "$buildVersion"
  }
}

task copyClientConsoleFatJar(type: Copy) {
  from clientConsoleFatJar
  into 'jars'
} 

// Builds a fat jar for the CLI with all jars included.
task clientConsoleThinJar(type: Jar, dependsOn: [':compileJava', ':processResources']) {
  baseName = 'gns-cli_thin'
  // all the class files
  from files(sourceSets.main.output.classesDir) {
  }
  // key and trust files
  from('conf') {
    include 'trustStore/**'
    include 'keyStore/**'
  }
  from ('src') {
    include 'edu/umass/cs/gnsclient/console/console.properties'
  }
  // Handle the version info
  Properties props = new Properties()
  props.load(project.file('build.number').newDataInputStream())
  def buildNumber = props.getProperty('build.number')
  def fullVersion = "${buildVersion}_${buildNumber}"

  manifest {
    attributes 'Built-By': System.getProperty('user.name'),
               'Built-Date': new Date(),
               'Build-Version': "${fullVersion}",
               'Main-Class': 'edu.umass.cs.gnsclient.console.CommandLineInterface',
               'Implementation-Vendor': 'University of Massachusetts',
               'Implementation-Title': 'GNS CLI',
               'Implementation-Version': "$buildVersion"
  }
}

task copyClientConsoleThinJar(type: Copy) {
  from clientConsoleThinJar
  into 'jars'
} 

artifacts { 
  archives serverFatJar, clientFatJar, clientConsoleFatJar, serverThinJar, clientThinJar, clientConsoleThinJar 
} 

publishing {
  publications {
    server(MavenPublication) {
      groupId 'edu.umass.cs'
      artifactId 'gnsserver'
      version "$buildVersion"
      
      artifact serverFatJar
    }
    client(MavenPublication) {
      groupId 'edu.umass.cs'
      artifactId 'gnsclient'
      version "$buildVersion"
      
      artifact clientFatJar
    }
    cli(MavenPublication) {
      groupId 'edu.umass.cs'
      artifactId 'gns-cli'
      version "$buildVersion"
      
      artifact clientConsoleFatJar
    }
  }
}

test {
  // we don't wnat to stop the server after each test
  jvmArgs '-DstopServer=false'
  // always run the tests - otherwise default is only runs when something changes
  outputs.upToDateWhen { false }
  // Use include AND filter here (which is non-standard) so that ZDefaultGNSTest works
  include 'edu/umass/cs/gnsclient/client/singletests/*'
  include 'edu/umass/cs/gnsserver/utils/DefaultGNSTest*'
  filter {
    includeTestsMatching 'edu.umass.cs.gnsclient.client.singletests.*'
    // This is included because it shuts everything down at the end if we get an error
    includeTestsMatching '*ZDefaultGNSTest'
  }
  // the rest of this below isn't necessary, it just changes the output
  testLogging {
    // set options for log level LIFECYCLE
    events "passed", "skipped", "failed", "standardOut"
    showExceptions true
    exceptionFormat "full"
    showCauses true
    showStackTraces true

    // set options for log level DEBUG and INFO
    debug {
      events "started", "passed", "skipped", "failed", "standardOut", "standardError"
      exceptionFormat "full"
    }
    info.events = debug.events
    info.exceptionFormat = debug.exceptionFormat
    beforeTest { descriptor ->
      logger.lifecycle("Running test: $descriptor")
    }
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        def repeatLength = startItem.length() + output.length() + endItem.length()
        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
      }
    }
  }
}
